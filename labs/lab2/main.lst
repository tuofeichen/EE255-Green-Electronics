
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
0800a1c0 l    d  .ARM	00000000 .ARM
0800a1c8 l    d  .init_array	00000000 .init_array
0800a1d0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000994 l    d  .bss	00000000 .bss
20001368 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 /tmp/cc4yzNqy.o
f1e0f85f l       *ABS*	00000000 BootRAM
08005c64 l       .text	00000000 LoopCopyDataInit
08005c5c l       .text	00000000 CopyDataInit
08005c78 l       .text	00000000 LoopFillZerobss
08005c72 l       .text	00000000 FillZerobss
08005c8a l       .text	00000000 LoopForever
08005ca0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08000188 l     F .text	00000000 __do_global_dtors_aux
20000994 l       .bss	00000000 completed.8122
0800a1d0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000998 l       .bss	00000000 object.8127
0800a1cc l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 ge_adc.c
080098b4 l     O .text	000000ae _ge_pin_num
08009964 l     O .text	0000015c _ge_pin_port
00000000 l    df *ABS*	00000000 ge_gpio.c
08009ac0 l     O .text	000000ae _ge_pin_num
08009b70 l     O .text	0000015c _ge_pin_port
00000000 l    df *ABS*	00000000 ge_lcd.c
00000000 l    df *ABS*	00000000 ge_system.c
00000000 l    df *ABS*	00000000 ge_timer.c
00000000 l    df *ABS*	00000000 ge_uart.c
00000000 l    df *ABS*	00000000 HD44780_F3.c
08009ccc l     O .text	00000004 CSWTCH.14
00000000 l    df *ABS*	00000000 buffer.c
00000000 l    df *ABS*	00000000 ge_eeprom.c
00000000 l    df *ABS*	00000000 ge_ic_int.c
200009b8 l     O .bss	00000004 _ge_ic_int_count
200009bc l     O .bss	00000004 _ge_ic_int_last_count
200009c0 l     O .bss	00000001 _ge_ic_int_ovf
200009c4 l     O .bss	00000004 _ge_ic_min_count
00000000 l    df *ABS*	00000000 ge_pwm.c
08009cd0 l     O .text	000000ae _ge_pin_num
08009d80 l     O .text	0000015c _ge_pin_port
08009edc l     O .text	000000ae _ge_pin_source
00000000 l    df *ABS*	00000000 eeprom.c
08001648 l     F .text	00000074 EE_VerifyPageFullWriteVariable
080016bc l     F .text	0000002c EE_Format
200009c8 l     O .bss	000001fe VirtAddVarTab
00000000 l    df *ABS*	00000000 stm32f30x_adc.c
00000000 l    df *ABS*	00000000 stm32f30x_dma.c
00000000 l    df *ABS*	00000000 stm32f30x_exti.c
00000000 l    df *ABS*	00000000 stm32f30x_flash.c
00000000 l    df *ABS*	00000000 stm32f30x_gpio.c
00000000 l    df *ABS*	00000000 stm32f30x_misc.c
00000000 l    df *ABS*	00000000 stm32f30x_rcc.c
200000f4 l     O .data	00000010 APBAHBPrescTable
20000104 l     O .data	0000001a ADCPrescTable
00000000 l    df *ABS*	00000000 stm32f30x_syscfg.c
00000000 l    df *ABS*	00000000 stm32f30x_tim.c
00000000 l    df *ABS*	00000000 stm32f30x_usart.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 lab2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 newlib_stubs.c
20000bcc l     O .bss	00000004 heap_end.8807
00000000 l    df *ABS*	00000000 system_stm32f30x.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a024 l     O .text	00000010 zeroes.6911
0800a034 l     O .text	00000010 blanks.6910
00000000 l    df *ABS*	00000000 __call_atexit.c
080072fc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0800731c l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 locale.c
2000054c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800a170 l     O .text	0000000c p05.5302
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000120 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 /home/green-electronics/ee155_tools/gcc-arm-none-eabi-4_9-2015q2/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /home/green-electronics/ee155_tools/gcc-arm-none-eabi-4_9-2015q2/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
0800a1d4 l       .fini_array	00000000 __fini_array_end
20000994 l       .bss	00000000 __bss_start__
20001368 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 software_init_hook
0800a1d0 l       .fini_array	00000000 __fini_array_start
0800a1d0 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
0800a1c8 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
0800a1c8 l       .init_array	00000000 __init_array_start
0800a1c8 l       .init_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 free
08002958 g     F .text	00000054 FLASH_OB_VDDAConfig
080036dc g     F .text	00000012 TIM_TimeBaseStructInit
08005ca0  w    F .text	00000002 RTC_Alarm_IRQHandler
0800094c g     F .text	00000020 gpio_write_pin
20000f54 g     O .bss	00000004 calibration_value_adc1
08005ca0  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08001dc4 g     F .text	0000000a ADC_StartConversion
08004628 g     F .text	00000012 USART_SetGuardTime
080046e8 g     F .text	00000012 USART_SetDEDeassertionTime
080033b0 g     F .text	00000028 SYSCFG_DeInit
08002dd4 g     F .text	0000000c RCC_HSICmd
08005ca0  w    F .text	00000002 TIM8_CC_IRQHandler
08000d00 g     F .text	000000e0 ge_uart_init
08000498 g     F .text	0000002c adc_stop
08003b1c g     F .text	00000012 TIM_ForcedOC2Config
08005850 g     F .text	00000012 .hidden __aeabi_dcmple
08002e00 g     F .text	00000018 RCC_LSEDriveConfig
08002520 g     F .text	00000020 FLASH_Unlock
0800510c g     F .text	0000002e .hidden __gnu_uldivmod_helper
080044c8 g     F .text	00000014 USART_MSBFirstCmd
08002e3c g     F .text	0000000c RCC_PLLCmd
08001ae8 g     F .text	0000000a ADC_DisableCmd
0800578c g     F .text	0000007a .hidden __cmpdf2
08001eec g     F .text	00000014 ADC_ChannelOffset3Cmd
08001ed8 g     F .text	00000014 ADC_ChannelOffset2Cmd
0800110c g     F .text	00000022 HD44780_PutStr
08005ca0  w    F .text	00000002 DebugMon_Handler
08003af8 g     F .text	00000004 TIM_SetCompare2
0800224c g     F .text	00000018 DMA_Cmd
080032a4 g     F .text	00000018 RCC_AHBPeriphResetCmd
080034cc g     F .text	00000010 SYSCFG_GetFlagStatus
08003b4c g     F .text	0000000c TIM_ForcedOC5Config
200000f0 g     O .data	00000004 packet_sent
08002c6c g     F .text	00000028 GPIO_PinAFConfig
0800578c g     F .text	0000007a .hidden __eqdf2
0800406c g     F .text	00000018 TIM_SelectCOM
08005140 g     F .text	0000029c .hidden __divdi3
080008f0 g     F .text	0000005c gpio_setup_pin
080033a4 g     F .text	0000000c RCC_ClearITPendingBit
2000113c g     O .bss	00000040 _ge_tim_periods
08004af4 g     F .text	0000005a .hidden __floatdidf
08002c40 g     F .text	0000000c GPIO_ReadOutputDataBit
08004664 g     F .text	00000012 USART_SetAutoRetryCount
08003ce4 g     F .text	0000001c TIM_CCxCmd
08003fb4 g     F .text	00000016 TIM_SetIC4Prescaler
080022b4 g     F .text	0000001c DMA_GetITStatus
08004084 g     F .text	00000018 TIM_CCPreloadControl
08005ca0  w    F .text	00000002 TIM1_CC_IRQHandler
08005ca0  w    F .text	00000002 HardFault_Handler
080026bc g     F .text	00000064 FLASH_ProgramWord
08001134 g     F .text	0000000a BufferInit
080088dc g     F .text	00000002 __malloc_unlock
08001f14 g     F .text	00000014 ADC_DMACmd
080016e8 g     F .text	00000050 EE_ReadVariable
08005ca0  w    F .text	00000002 USB_HP_IRQHandler
08003b68 g     F .text	0000000c TIM_OC1PreloadConfig
08000a0c g     F .text	00000020 SysTick_Handler
08001ab4 g     F .text	0000000a ADC_StartCalibration
20000bc8 g     O .bss	00000001 btn_pressed
08002e68 g     F .text	0000000c RCC_MCOConfig
08002550 g     F .text	00000020 FLASH_OB_Unlock
08002ca8 g     F .text	00000070 NVIC_Init
2000117c g     O .bss	00000004 _ge_tim_period
08005ca0  w    F .text	00000002 PVD_IRQHandler
08000e04 g     F .text	00000048 ge_uart_get
08002090 g     F .text	00000016 ADC_GetITStatus
080093fc g     F .text	000000c6 memmove
08001002 g     F .text	0000001e hd44780_wr_cmd
0800a1d4 g       .fini_array	00000000 _sidata
08005ca0  w    F .text	00000002 PendSV_Handler
08005d90 g     F .text	0000009c snprintf
08001b18 g     F .text	00000022 ADC_SelectDifferentialMode
08005ca0  w    F .text	00000002 NMI_Handler
080088e0 g     F .text	0000004c _Balloc
20000c08 g     O .bss	00000002 voltage_reading
0800a1c8 g       .ARM	00000000 __exidx_end
08005ca0  w    F .text	00000002 EXTI3_IRQHandler
08000c2c g     F .text	0000000c timer_get_timestep
080041e0 g     F .text	00000020 TIM_ETRClockMode2Config
08000704 g     F .text	0000006c adc_set_fs
080032ec g     F .text	00000018 RCC_ITConfig
0800577c g     F .text	0000008a .hidden __gtdf2
08003c68 g     F .text	0000000c TIM_OC1NPolarityConfig
0800448c g     F .text	00000012 USART_DirectionModeCmd
08001ec4 g     F .text	00000014 ADC_ChannelOffset1Cmd
20000f58 g     O .bss	00000004 calibration_value_adc3
08003b0c g     F .text	00000010 TIM_ForcedOC1Config
08003754 g     F .text	0000001a TIM_UIFRemap
08002720 g     F .text	00000038 FLASH_ProgramHalfWord
080008ae g     F .text	00000042 gpio_deinit
080040f0 g     F .text	00000016 TIM_DMACmd
080029ac g     F .text	00000044 FLASH_OB_SRAMParityConfig
08003458 g     F .text	00000018 SYSCFG_ITConfig
080041b8 g     F .text	00000026 TIM_ETRClockMode1Config
08003fa0 g     F .text	00000012 TIM_SetIC3Prescaler
0800463c g     F .text	00000014 USART_SmartCardCmd
08004780 g     F .text	0000000c USART_GetFlagStatus
08003c10 g     F .text	0000000c TIM_ClearOC3Ref
20000c0a g     O .bss	0000004e adc_readings
0800452c g     F .text	00000010 USART_SetReceiverTimeOut
08001a18 g     F .text	00000078 ADC_CommonInit
20000c04 g     O .bss	00000004 errno
20000c58 g     O .bss	00000002 zero_amps
0800a1c0 g       .text	00000000 _etext
08002834 g     F .text	00000074 FLASH_OB_RDPConfig
20001364 g     O .bss	00000004 _ge_pwm_period
08001dd0 g     F .text	00000008 ADC_GetStartConversionStatus
200000c4 g     O .data	00000027 adc_chan_map
20000994 g       .bss	00000000 _sbss
08002028 g     F .text	0000000c ADC_GetFlagStatus
08001fc8 g     F .text	00000008 ADC_GetStartInjectedConversionStatus
080034b0 g     F .text	0000000c SYSCFG_BypassParityCheckDisable
08002e74 g     F .text	00000014 RCC_SYSCLKConfig
08005818 g     F .text	00000010 .hidden __aeabi_cdcmple
20000c5c g     O .bss	00000040 chan_order1
080021d8 g     F .text	00000056 DMA_Init
08002648 g     F .text	0000003c FLASH_ErasePage
080045d0 g     F .text	00000010 USART_MuteModeWakeUpConfig
080022e4 g     F .text	00000034 EXTI_DeInit
0800334c g     F .text	00000032 RCC_WaitForHSEStartUp
080028a8 g     F .text	0000005c FLASH_OB_UserConfig
080045a8 g     F .text	00000012 USART_SetAddress
20000c9c g     O .bss	00000001 num_chan_adc2
08002268 g     F .text	00000006 DMA_GetCurrDataCounter
08004588 g     F .text	00000010 USART_AutoBaudRateConfig
0800453c g     F .text	00000012 USART_SetPrescaler
080024e8 g     F .text	0000001c FLASH_HalfCycleAccessCmd
080006f8 g     F .text	0000000c adc_callback
0800103c g     F .text	00000002 hd44780_Delay
08001fe4 g     F .text	00000014 ADC_InjectedDiscModeCmd
08003b04 g     F .text	00000004 TIM_SetCompare5
08000bc4 g     F .text	0000000c timer_set_period
08002590 g     F .text	00000010 FLASH_OB_GetUser
08001fb0 g     F .text	0000000a ADC_StartInjectedConversion
08003250 g     F .text	0000000c RCC_BackupResetCmd
080044b4 g     F .text	00000014 USART_OneBitMethodCmd
08001dd8 g     F .text	0000000a ADC_StopConversion
08004058 g     F .text	00000014 TIM_CtrlPWMOutputs
08002d18 g     F .text	00000014 NVIC_SetVectorTable
08005648 g     F .text	00000134 memcpy
08005808 g     F .text	00000020 .hidden __aeabi_cdrcmple
08001aa0 g     F .text	00000014 ADC_Cmd
080025d8 g     F .text	00000014 FLASH_GetFlagStatus
08005e30 g     F .text	000014cc _svfprintf_r
08004a84 g     F .text	00000022 .hidden __floatsidf
08001de4 g     F .text	00000010 ADC_DiscModeChannelCountConfig
08005784 g     F .text	00000082 .hidden __ltdf2
08002e5c g     F .text	0000000c RCC_ClockSecuritySystemCmd
08005ca0  w    F .text	00000002 EXTI0_IRQHandler
08005ca0  w    F .text	00000002 I2C2_EV_IRQHandler
0800116e g     F .text	00000034 BufferGet
08003380 g     F .text	00000010 RCC_ClearFlag
0800588c g     F .text	00000000 .hidden __aeabi_uldivmod
080037bc g     F .text	0000001a TIM_Cmd
08003b90 g     F .text	0000000e TIM_OC4PreloadConfig
08005ca0  w    F .text	00000002 FPU_IRQHandler
08008ecc g     F .text	0000005c __fpclassifyd
080020a8 g     F .text	00000008 ADC_ClearITPendingBit
08005ca0  w    F .text	00000002 EXTI2_TS_IRQHandler
08002684 g     F .text	00000038 FLASH_EraseAllPages
080025a0 g     F .text	0000000c FLASH_OB_GetWRP
080045a0 g     F .text	00000008 USART_ReceiveData
08005ca0  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08002db0 g     F .text	00000010 RCC_HSEConfig
00000000  w      *UND*	00000000 malloc
200000ec g     O .data	00000004 _ge_usb_timeout
080040c4 g     F .text	00000008 TIM_ClearFlag
0800a0a8 g     O .text	000000c8 __mprec_tens
080040e0 g     F .text	00000008 TIM_ClearITPendingBit
08005ca0  w    F .text	00000002 UsageFault_Handler
08002264 g     F .text	00000004 DMA_SetCurrDataCounter
08003710 g     F .text	00000004 TIM_GetCounter
08000bd0 g     F .text	0000005c timer_set_timestep
08003274 g     F .text	00000018 RCC_APB2PeriphClockCmd
08004fc4 g     F .text	00000040 .hidden __fixunsdfsi
08003f74 g     F .text	00000004 TIM_GetCapture3
08005ca0  w    F .text	00000002 ADC1_2_IRQHandler
20000bd8 g     O .bss	00000004 __malloc_top_pad
08002b4c g     F .text	000000ba GPIO_Init
08002e24 g     F .text	00000018 RCC_PLLConfig
08000988 g     F .text	00000004 lcd_putc
08003160 g     F .text	00000020 RCC_ADCCLKConfig
08004a64 g     F .text	0000001e .hidden __aeabi_ui2d
08008318 g     F .text	00000008 _localeconv_r
08002570 g     F .text	00000010 FLASH_OB_Lock
08001af4 g     F .text	00000008 ADC_GetDisableCmdStatus
08008a60 g     F .text	00000012 __i2b
20000000 g       .data	00000000 _sdata
08005ca0  w    F .text	00000002 SPI1_IRQHandler
20000f5c g     O .bss	00000040 data_buf1
08004478 g     F .text	00000014 USART_Cmd
080047e0 g     F .text	00000000 .hidden __aeabi_drsub
08001b64 g     F .text	0000000c ADC_AnalogWatchdogCmd
08008f28 g     F .text	00000024 _sbrk_r
08003f6c g     F .text	00000004 TIM_GetCapture1
08003c48 g     F .text	00000012 TIM_SelectOCREFClear
0800469c g     F .text	00000014 USART_IrDACmd
08002d44 g     F .text	00000018 SysTick_CLKSourceConfig
080027cc g     F .text	00000068 FLASH_OB_EnableWRP
08002c68 g     F .text	00000004 GPIO_Write
08005ca0  w    F .text	00000002 TIM6_DAC_IRQHandler
08002c4c g     F .text	00000006 GPIO_ReadOutputData
080038dc g     F .text	00000070 TIM_OC3Init
08002de0 g     F .text	00000020 RCC_LSEConfig
0800583c g     F .text	00000012 .hidden __aeabi_dcmplt
080047d4 g     F .text	0000000a USART_ClearITPendingBit
08003244 g     F .text	0000000c RCC_RTCCLKCmd
08001f38 g     F .text	00000052 ADC_InjectedChannelConfig
20000bd4 g     O .bss	00000004 __malloc_max_sbrked_mem
08003cd4 g     F .text	0000000e TIM_OC6PolarityConfig
080022d0 g     F .text	00000014 DMA_ClearITPendingBit
08004aa8 g     F .text	0000003a .hidden __extendsfdf2
08004da4 g     F .text	000001d0 .hidden __aeabi_ddiv
08005ca0  w    F .text	00000002 TIM8_UP_IRQHandler
080034ec g     F .text	00000140 TIM_DeInit
08001b70 g     F .text	00000028 ADC_AnalogWatchdog1ThresholdsConfig
0800328c g     F .text	00000018 RCC_APB1PeriphClockCmd
080047ec g     F .text	00000276 .hidden __adddf3
0800098c g     F .text	00000004 lcd_goto
08003390 g     F .text	00000014 RCC_GetITStatus
08003ff4 g     F .text	00000014 TIM_Break1Config
08001b98 g     F .text	00000020 ADC_AnalogWatchdog2ThresholdsConfig
08001b3c g     F .text	00000014 ADC_SelectQueueOfContextMode
080058e4 g     F .text	00000002 meter_init
080004c4 g     F .text	0000002c adc_deinit
0800a1c0 g       .ARM	00000000 __exidx_start
08004b50 g     F .text	00000254 .hidden __aeabi_dmul
080004f0 g     F .text	0000004c adc_enable_channels
0800a020 g     O .text	00000004 _global_impure_ptr
20001180 g     O .bss	00000040 _ge_tim_callbacks
080094c4 g     F .text	000003ec _realloc_r
08005ca4 g     F .text	00000050 __libc_init_array
080040b8 g     F .text	0000000c TIM_GetFlagStatus
08005ca0  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800325c g     F .text	00000018 RCC_AHBPeriphClockCmd
080053dc g     F .text	0000026a .hidden __udivdi3
08005ca0  w    F .text	00000002 DMA1_Channel4_IRQHandler
08001cd8 g     F .text	000000c2 ADC_RegularChannelConfig
08003bd8 g     F .text	0000000c TIM_OC3FastConfig
08000994 g     F .text	00000004 lcd_clear
0800a180 g     O .text	00000028 __mprec_bigtens
08004a64 g     F .text	0000001e .hidden __floatunsidf
08005b24 g     F .text	00000038 _sbrk
08008cf4 g     F .text	00000046 __mcmp
08001e08 g     F .text	00000006 ADC_GetConversionValue
200011c0 g     O .bss	00000004 _ge_tim_max_counter
080045bc g     F .text	00000014 USART_MuteModeCmd
08004108 g     F .text	00000018 TIM_SelectCCDMA
08003a64 g     F .text	00000014 TIM_SelectGC5C2
0800096c g     F .text	00000018 gpio_read_pin
080025c0 g     F .text	00000018 FLASH_ITConfig
080044a0 g     F .text	00000014 USART_OverSampling8Cmd
08001d9c g     F .text	00000012 ADC_RegularChannelSequencerLengthConfig
0800a1a8 g     F .text	00000000 _init
08002230 g     F .text	0000001a DMA_StructInit
080037a4 g     F .text	00000016 TIM_SetClockDivision
20000bc9 g     O .bss	00000001 state
08001c0c g     F .text	00000024 ADC_AnalogWatchdog3SingleChannelConfig
08002540 g     F .text	00000010 FLASH_Lock
08002284 g     F .text	0000001c DMA_GetFlagStatus
08005004 g     F .text	0000009e .hidden __aeabi_d2f
0800130c g     F .text	00000030 ic_int_set_maxf
08005ca0  w    F .text	00000002 USART3_IRQHandler
080024bc g     F .text	00000018 EXTI_ClearITPendingBit
08005990 g     F .text	0000001e setup_buttons
080082ec g     F .text	0000002c __libc_fini_array
08001ae0 g     F .text	00000006 ADC_GetCalibrationStatus
20001368 g       .bss	00000000 _ebss
08004790 g     F .text	00000042 USART_GetITStatus
200009b0 g     O .bss	00000004 _ge_delay_time
08005ca0  w    F .text	00000002 DMA1_Channel7_IRQHandler
080037d8 g     F .text	00000090 TIM_OC1Init
08003b84 g     F .text	0000000c TIM_OC3PreloadConfig
08005c58  w    F .text	00000034 Reset_Handler
20000f9c g     O .bss	00000004 calibration_value_adc2
08002c38 g     F .text	00000006 GPIO_ReadInputData
0800370c g     F .text	00000004 TIM_SetAutoreload
080045f0 g     F .text	00000010 USART_LINBreakDetectLengthConfig
080089c4 g     F .text	00000040 __hi0bits
08005ca0  w    F .text	00000002 CAN1_RX1_IRQHandler
08003bac g     F .text	0000000e TIM_OC6PreloadConfig
08004f74 g     F .text	0000004e .hidden __fixdfsi
08001870 g     F .text	000000a8 EE_WriteVariable
08005ca0  w    F .text	00000002 UART5_IRQHandler
08003304 g     F .text	00000048 RCC_GetFlagStatus
08001738 g     F .text	00000138 EE_Init
08005ca0  w    F .text	00000002 ADC3_IRQHandler
08000a2c g     F .text	000000a4 timer_init
08001f9c g     F .text	00000012 ADC_ExternalTriggerInjectedConfig
080045e0 g     F .text	00000010 USART_AddressDetectionConfig
08003440 g     F .text	00000018 SYSCFG_I2CFastModePlusConfig
080058e8 g     F .text	0000005c meter_display
080034a0 g     F .text	00000010 SYSCFG_BreakConfig
080013c8 g     F .text	000000d4 pwm_init
08002c54 g     F .text	00000004 GPIO_SetBits
0800133c g     F .text	00000028 TIM4_IRQHandler
20000ca0 g     O .bss	00000004 adc_reg_callback
0800245c g     F .text	00000020 EXTI_GetFlagStatus
080047ec g     F .text	00000276 .hidden __aeabi_dadd
08002e88 g     F .text	00000010 RCC_GetSYSCLKSource
08005784 g     F .text	00000082 .hidden __ledf2
08003770 g     F .text	0000001a TIM_ARRPreloadConfig
08001a04 g     F .text	00000014 ADC_InjectedStructInit
200009b4 g     O .bss	00000001 _vcom_buf_corrupt
08002c5c g     F .text	0000000a GPIO_WriteBit
08001f00 g     F .text	00000014 ADC_ChannelOffset4Cmd
08001fd0 g     F .text	00000014 ADC_AutoInjectedConvCmd
08003a50 g     F .text	00000014 TIM_SelectGC5C1
080007f0 g     F .text	0000007c DMA2_Channel1_IRQHandler
20000fa0 g     O .bss	00000020 adc3_conv_map
08008ba8 g     F .text	000000a0 __pow5mult
08000454 g     F .text	00000044 adc_start
08004ae4 g     F .text	0000006a .hidden __aeabi_ul2d
08003b58 g     F .text	0000000e TIM_ForcedOC6Config
200011c4 g     O .bss	00000004 _ge_tim_num_timers
00000000  w      *UND*	00000000 __deregister_frame_info
080059b0 g     F .text	0000003c start_conversion
08005ca0  w    F .text	00000002 I2C1_EV_IRQHandler
20000bc6 g     O .bss	00000002 DataVar
08000b6c g     F .text	00000020 timer_start
0800103e g     F .text	000000ae HD44780_Init
080040cc g     F .text	00000014 TIM_GetITStatus
080058bc g     F .text	00000024 calibrate_offset
08002ed4 g     F .text	0000028c RCC_GetClocksFreq
080011c8 g     F .text	00000004 eeprom_write
200011c8 g     O .bss	00000004 _ge_tim_count
0800053c g     F .text	000001bc adc_initialize_channels
08005878 g     F .text	00000012 .hidden __aeabi_dcmpgt
08005ca0  w    F .text	00000002 DMA1_Channel6_IRQHandler
08002504 g     F .text	0000001c FLASH_PrefetchBufferCmd
08003aa0 g     F .text	00000052 TIM_SelectOCxM
08005ca0  w    F .text	00000002 UART4_IRQHandler
08005ca0  w    F .text	00000002 DMA2_Channel4_IRQHandler
08008844 g     F .text	00000092 memchr
0800243c g     F .text	00000020 EXTI_GenerateSWInterrupt
0800437c g     F .text	000000b8 USART_Init
0800924c g     F .text	000001b0 _free_r
080042c4 g     F .text	00000006 TIM_RemapConfig
08000c38 g     F .text	000000c8 TIM3_IRQHandler
08005ca0  w    F .text	00000002 RCC_IRQHandler
08005864 g     F .text	00000012 .hidden __aeabi_dcmpge
0800077c g     F .text	00000074 DMA1_Channel1_IRQHandler
080046b0 g     F .text	00000014 USART_DECmd
08003bbc g     F .text	0000000c TIM_OC1FastConfig
080047e8 g     F .text	0000027a .hidden __aeabi_dsub
08005ca0 g       .text	00000002 Default_Handler
20000990 g     O .data	00000004 __malloc_sbrk_base
080025f8 g     F .text	00000028 FLASH_GetStatus
20000ca4 g     O .bss	00000001 num_chan_adc1
08005ca0  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08004614 g     F .text	00000014 USART_HalfDuplexCmd
0800247c g     F .text	00000018 EXTI_ClearFlag
080025ec g     F .text	0000000c FLASH_ClearFlag
08001f28 g     F .text	00000010 ADC_DMAConfig
08004ae4 g     F .text	0000006a .hidden __floatundidf
08008c48 g     F .text	000000aa __lshift
08002620 g     F .text	00000026 FLASH_WaitForLastOperation
20000ca8 g     O .bss	000001d4 adc_conv_order
08003228 g     F .text	00000010 RCC_RTCCLKConfig
08003b74 g     F .text	0000000e TIM_OC2PreloadConfig
08004200 g     F .text	0000000e TIM_SelectInputTrigger
08008fa8 g     F .text	00000104 __ssprint_r
080010f0 g     F .text	0000001c HD44780_GotoXY
08001364 g     F .text	00000064 EXTI15_10_IRQHandler
0800409c g     F .text	00000016 TIM_ITConfig
080090ac g     F .text	000000a4 __register_exitproc
080034bc g     F .text	00000010 SYSCFG_SRAMWRPEnable
08003868 g     F .text	00000074 TIM_OC2Init
08001e34 g     F .text	00000024 ADC_SetChannelOffset1
08004720 g     F .text	00000038 USART_ITConfig
08000ad0 g     F .text	00000034 timer_deinit
08002318 g     F .text	00000114 EXTI_Init
08008a74 g     F .text	00000134 __multiply
20000fc0 g     O .bss	00000020 adc2_conv_map
20000bdc g     O .bss	00000028 __malloc_current_mallinfo
08008e10 g     F .text	000000ba __d2b
08001e7c g     F .text	00000024 ADC_SetChannelOffset3
080058e0 g     F .text	00000002 calibrate_voltage
080044dc g     F .text	00000014 USART_DataInvCmd
08001bd8 g     F .text	0000000e ADC_AnalogWatchdog1SingleChannelConfig
080036f0 g     F .text	00000006 TIM_PrescalerConfig
08001fbc g     F .text	0000000a ADC_StopInjectedConversion
08003c2c g     F .text	0000000c TIM_ClearOC5Ref
08002064 g     F .text	0000002c ADC_ClearCommonFlag
20000028 g     O .data	0000009c adc_bank_map
0800401c g     F .text	00000014 TIM_Break1Cmd
08004504 g     F .text	00000014 USART_SWAPPinCmd
08002c58 g     F .text	00000004 GPIO_ResetBits
08003cb4 g     F .text	0000000e TIM_OC4PolarityConfig
08004210 g     F .text	00000012 TIM_SelectOutputTrigger
08005ca0  w    F .text	00000002 TIM7_IRQHandler
08004a84 g     F .text	00000022 .hidden __aeabi_i2d
08002a44 g     F .text	0000003c FLASH_ProgramOptionByteData
080011a2 g     F .text	00000014 BufferIsEmpty
0800468c g     F .text	00000010 USART_IrDAConfig
08003afc g     F .text	00000004 TIM_SetCompare3
080029f0 g     F .text	00000054 FLASH_OB_WriteUser
08004224 g     F .text	00000010 TIM_SelectOutputTrigger2
0800394c g     F .text	00000058 TIM_OC4Init
08000f78 g     F .text	00000078 hd44780_wr_lo_nibble
08004550 g     F .text	00000014 USART_STOPModeCmd
08000990 g     F .text	00000004 lcd_puts
080046c4 g     F .text	00000010 USART_DEPolarityConfig
080042ac g     F .text	00000018 TIM_SelectHallSensor
0800513c  w    F .text	00000002 .hidden __aeabi_ldiv0
08005ca0  w    F .text	00000002 EXTI9_5_IRQHandler
08004da4 g     F .text	000001d0 .hidden __divdf3
08002580 g     F .text	00000010 FLASH_OB_Launch
08001e10 g     F .text	00000024 ADC_GetDualModeConversionValue
08005ca0  w    F .text	00000002 TAMPER_STAMP_IRQHandler
08005ca0  w    F .text	00000002 RTC_WKUP_IRQHandler
20000584 g     O .data	00000408 __malloc_av_
08004b50 g     F .text	00000254 .hidden __muldf3
08004770 g     F .text	00000010 USART_OverrunDetectionConfig
08003f7c g     F .text	00000010 TIM_SetIC1Prescaler
080042cc g     F .text	000000b0 USART_DeInit
20000e7c g     O .bss	00000002 current_reading
080088d8 g     F .text	00000002 __malloc_lock
08009150 g     F .text	0000005e _calloc_r
20000fe0 g     O .bss	00000001 adc_val_rdy_state
08002494 g     F .text	00000028 EXTI_GetITStatus
080025ac g     F .text	00000014 FLASH_OB_GetRDP
08003b3c g     F .text	0000000e TIM_ForcedOC4Config
08005ca0  w    F .text	00000002 SPI2_IRQHandler
08001ac0 g     F .text	00000006 ADC_GetCalibrationValue
20000fe4 g     O .bss	00000004 _num_conv
080024d4 g     F .text	00000014 FLASH_SetLatency
080033d8 g     F .text	00000014 SYSCFG_MemoryRemapConfig
08005cf4 g     F .text	0000009a memset
08003ba0 g     F .text	0000000c TIM_OC5PreloadConfig
08005ca0  w    F .text	00000002 MemManage_Handler
20000e80 g     O .bss	00000040 chan_order2
08002dc0 g     F .text	00000014 RCC_AdjustHSICalibrationValue
08001db0 g     F .text	00000012 ADC_ExternalTriggerConfig
08000984 g     F .text	00000004 lcd_init
080059ec g     F .text	00000138 main
080009f4 g     F .text	00000018 delay_ms
080010ec g     F .text	00000004 HD44780_PutChar
080011d0 g     F .text	000000f8 ic_int_init
20000bd0 g     O .bss	00000004 __malloc_max_total_mem
0800444c g     F .text	0000001e USART_ClockInit
0800412c g     F .text	00000016 TIM_ITRxExternalClockConfig
08003c94 g     F .text	0000000e TIM_OC3PolarityConfig
0800112e g     F .text	00000006 HD44780_ClrScr
08005ca0  w    F .text	00000002 SVC_Handler
08005ca0  w    F .text	00000002 DMA2_Channel5_IRQHandler
08005004 g     F .text	0000009e .hidden __truncdfsf2
2000125c g     O .bss	00000083 U1Rx
080001e8 g     F .text	0000006c adc_enable_clocks
08007448 g     F .text	00000ea2 _dtoa_r
08008320 g     F .text	00000524 _malloc_r
08004120 g     F .text	0000000c TIM_InternalClockConfig
08003c5c g     F .text	0000000c TIM_OC1PolarityConfig
08003bc8 g     F .text	0000000e TIM_OC2FastConfig
08004af4 g     F .text	0000005a .hidden __aeabi_l2d
08002eac g     F .text	00000014 RCC_PCLK1Config
08001bb8 g     F .text	00000020 ADC_AnalogWatchdog3ThresholdsConfig
0800242c g     F .text	0000000e EXTI_StructInit
08001ca0 g     F .text	00000038 ADC_VbatCmd
00000000  w      *UND*	00000000 __libc_fini
08003708 g     F .text	00000004 TIM_SetCounter
08005ca0  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800321c g     F .text	0000000c RCC_USBCLKConfig
08005ca0  w    F .text	00000002 USB_LP_IRQHandler
08001c68 g     F .text	00000038 ADC_VrefintCmd
08005ca0  w    F .text	00000002 EXTI4_IRQHandler
08002038 g     F .text	0000002c ADC_GetCommonFlagStatus
08005ca0  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
080091b0 g     F .text	0000009c _malloc_trim_r
08002ec0 g     F .text	00000014 RCC_PCLK2Config
20000fe8 g     O .bss	00000040 data_buf4
08003b00 g     F .text	00000004 TIM_SetCompare4
08000de0 g     F .text	00000024 ge_uart_put
08001c30 g     F .text	00000038 ADC_TempSensorCmd
08003f70 g     F .text	00000004 TIM_GetCapture2
0800478c g     F .text	00000004 USART_ClearFlag
08003714 g     F .text	00000006 TIM_GetPrescaler
08002904 g     F .text	00000054 FLASH_OB_BOOTConfig
08003c00 g     F .text	0000000e TIM_ClearOC2Ref
08005b5c g     F .text	000000fc SystemInit
20000ec0 g     O .bss	00000004 volts_per_div
08003d1c g     F .text	0000012a TIM_ICInit
08002a80 g     F .text	000000cc GPIO_DeInit
0800578c g     F .text	0000007a .hidden __nedf2
0800a1b4 g     F .text	00000000 _fini
20000ec4 g     O .bss	00000004 amps_per_div
08001f8c g     F .text	0000000e ADC_InjectedSequencerLengthConfig
08005ca0  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08005ca0  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08002d5c g     F .text	00000054 RCC_DeInit
200011cc g     O .bss	00000040 _ge_tim_type
08003e48 g     F .text	00000010 TIM_ICStructInit
08007310 g     F .text	0000000c atexit
08003e58 g     F .text	00000112 TIM_PWMIConfig
08005ca0  w    F .text	00000002 DMA1_Channel3_IRQHandler
08001a90 g     F .text	0000000e ADC_CommonStructInit
080033ec g     F .text	00000018 SYSCFG_DMAChannelRemapConfig
080011c4 g     F .text	00000004 eeprom_read
08004564 g     F .text	00000010 USART_StopModeWakeUpSourceConfig
080019bc g     F .text	00000016 ADC_StructInit
08002014 g     F .text	00000012 ADC_ITConfig
08001ac8 g     F .text	00000006 ADC_SetCalibrationValue
20000548 g     O .data	00000004 _impure_ptr
08000254 g     F .text	00000200 adc_init
08000b8c g     F .text	00000038 timer_stop
08005ca0  w    F .text	00000002 ADC4_IRQHandler
08000f00 g     F .text	00000078 hd44780_wr_hi_nibble
08003c84 g     F .text	0000000e TIM_OC2NPolarityConfig
08002d2c g     F .text	00000018 NVIC_SystemLPConfig
0800341c g     F .text	00000018 SYSCFG_EncoderRemapConfig
08003bf4 g     F .text	0000000c TIM_ClearOC1Ref
080011b6 g     F .text	0000000e eeprom_init
08001578 g     F .text	00000020 pwm_set
08005ca0  w    F .text	00000002 WWDG_IRQHandler
080032d4 g     F .text	00000018 RCC_APB1PeriphResetCmd
08002034 g     F .text	00000004 ADC_ClearFlag
08002e48 g     F .text	00000014 RCC_PREDIV1Config
0800113e g     F .text	00000030 BufferPut
08002270 g     F .text	00000012 DMA_ITConfig
08001598 g     F .text	000000b0 pwm_freq
0800595c g     F .text	00000034 change_state
20000ec8 g     O .bss	00000001 num_chan_adc4
080039a4 g     F .text	00000058 TIM_OC5Init
08005ca0  w    F .text	00000002 TIM2_IRQHandler
08003738 g     F .text	0000001a TIM_UpdateRequestConfig
08000770 g     F .text	0000000c adc_get_state
20001028 g     O .bss	00000004 calibration_value_adc4
08003b30 g     F .text	0000000c TIM_ForcedOC3Config
08004144 g     F .text	00000074 TIM_TIxExternalClockConfig
08004fc4 g     F .text	00000040 .hidden __aeabi_d2uiz
08002c08 g     F .text	00000014 GPIO_StructInit
08003404 g     F .text	00000018 SYSCFG_TriggerRemapConfig
08001918 g     F .text	00000058 ADC_DeInit
08003b08 g     F .text	00000004 TIM_SetCompare6
08004044 g     F .text	00000012 TIM_BDTRStructInit
08003a8c g     F .text	00000014 TIM_OCStructInit
08004758 g     F .text	00000016 USART_RequestCmd
08003ca4 g     F .text	0000000e TIM_OC3NPolarityConfig
08004008 g     F .text	00000014 TIM_Break2Config
08005ca0  w    F .text	00000002 COMP7_IRQHandler
08001970 g     F .text	0000004c ADC_Init
08004598 g     F .text	00000008 USART_SendData
2000a000 g       *ABS*	00000000 _estack
08003d00 g     F .text	0000001c TIM_CCxNCmd
0800149c g     F .text	000000a4 pwm_set_pin
08005ca0  w    F .text	00000002 COMP1_2_3_IRQHandler
080019d4 g     F .text	0000002e ADC_InjectedInit
08005ca0  w    F .text	00000002 EXTI1_IRQHandler
08005828 g     F .text	00000012 .hidden __aeabi_dcmpeq
08004248 g     F .text	00000012 TIM_SelectMasterSlaveMode
08001020 g     F .text	0000001c hd44780_wr_data
08000e4c g     F .text	00000034 ge_uart_available
08003c38 g     F .text	0000000e TIM_ClearOC6Ref
20000ecc g     O .bss	00000040 chan_order3
2000102c g     O .bss	00000040 data_buf3
20000994 g       .data	00000000 _edata
08003f78 g     F .text	00000004 TIM_GetCapture4
08004434 g     F .text	00000016 USART_StructInit
08004518 g     F .text	00000014 USART_ReceiverTimeOutCmd
08001ea0 g     F .text	00000024 ADC_SetChannelOffset4
08005944 g     F .text	00000018 my_adc_callback
0800362c g     F .text	000000b0 TIM_TimeBaseInit
08001ff8 g     F .text	0000001a ADC_GetInjectedConversionValue
08001e58 g     F .text	00000024 ADC_SetChannelOffset2
08003434 g     F .text	0000000c SYSCFG_USBInterruptLineRemapCmd
08001afc g     F .text	0000001c ADC_VoltageRegulatorCmd
08005ca0  w    F .text	00000002 USART2_IRQHandler
08003470 g     F .text	0000002e SYSCFG_EXTILineConfig
08005ca0  w    F .text	00000002 COMP4_5_6_IRQHandler
08004650 g     F .text	00000014 USART_SmartCardNACKCmd
2000098c g     O .data	00000004 __malloc_trim_threshold
08004678 g     F .text	00000012 USART_SetBlockLength
08000000 g     O .isr_vector	00000000 g_pfnVectors
2000106c g     O .bss	00000020 adc1_conv_map
08008d3c g     F .text	000000d2 __mdiff
08000e80 g     F .text	0000001a ge_uart_write
08004600 g     F .text	00000014 USART_LINCmd
08004f74 g     F .text	0000004e .hidden __aeabi_d2iz
080040e8 g     F .text	00000008 TIM_DMAConfig
08001df4 g     F .text	00000014 ADC_DiscModeCmd
080031c0 g     F .text	0000005c RCC_USARTCLKConfig
08000998 g     F .text	0000005c ge_init
080058e2 g     F .text	00000002 calibrate_current
08005ca0  w    F .text	00000002 I2C2_ER_IRQHandler
08005ca0  w    F .text	00000002 DMA1_Channel2_IRQHandler
08003a78 g     F .text	00000014 TIM_SelectGC5C3
080031a0 g     F .text	00000020 RCC_TIMCLKConfig
080044f0 g     F .text	00000012 USART_InvPinCmd
080040b4 g     F .text	00000004 TIM_GenerateEvent
08001540 g     F .text	0000000c pwm_get_max_int
200012df g     O .bss	00000083 U1Tx
08005ca0  w    F .text	00000002 TIM8_BRK_IRQHandler
200009b6 g     O .bss	00000001 _vcom_buf_head
080022a0 g     F .text	00000014 DMA_ClearFlag
2000120c g     O .bss	00000010 _ge_tim_state
0800513c  w    F .text	00000002 .hidden __aeabi_idiv0
08003fcc g     F .text	00000026 TIM_BDTRConfig
08003180 g     F .text	00000020 RCC_I2CCLKConfig
08005ca0  w    F .text	00000002 CAN1_SCE_IRQHandler
08003238 g     F .text	0000000c RCC_I2SCLKConfig
08005ca0  w    F .text	00000002 FLASH_IRQHandler
08000b04 g     F .text	00000068 timer_register
08004030 g     F .text	00000014 TIM_Break2Cmd
08001ad0 g     F .text	00000010 ADC_SelectCalibrationMode
08002c1c g     F .text	00000010 GPIO_PinLockConfig
08005ca0  w    F .text	00000002 BusFault_Handler
08000e9a g     F .text	00000066 USART1_IRQHandler
08001b50 g     F .text	00000014 ADC_AutoDelayCmd
08002e18 g     F .text	0000000c RCC_LSICmd
08008f4c g     F .text	0000005c strlen
08003f8c g     F .text	00000012 TIM_SetIC2Prescaler
08005ca0  w    F .text	00000002 SPI3_IRQHandler
0800425c g     F .text	00000018 TIM_ETRConfig
20000f0c g     O .bss	00000002 zero_volts
08005818 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0800577c g     F .text	0000008a .hidden __gedf2
0800446c g     F .text	0000000c USART_ClockStructInit
080032bc g     F .text	00000018 RCC_APB2PeriphResetCmd
2000108c g     O .bss	00000020 adc4_conv_map
08002758 g     F .text	00000074 FLASH_OB_Erase
08004234 g     F .text	00000014 TIM_SelectSlaveMode
08004574 g     F .text	00000014 USART_AutoBaudRateCmd
080050dc g     F .text	0000002e .hidden __gnu_ldivmod_helper
08005ca0  w    F .text	00000002 I2C1_ER_IRQHandler
200010ac g     O .bss	00000040 data_buf2
200010ec g     O .bss	0000004e adc_conversions
20000000 g     O .data	00000027 adc_pin_map
08002c94 g     F .text	00000014 NVIC_PriorityGroupConfig
08000ff0 g     F .text	00000012 hd44780_write
08004aa8 g     F .text	0000003a .hidden __aeabi_f2d
2000121c g     O .bss	00000040 _ge_tim_offsets
080020b0 g     F .text	00000128 DMA_DeInit
08003c1c g     F .text	0000000e TIM_ClearOC4Ref
0800086c g     F .text	00000042 gpio_init
0800378c g     F .text	00000016 TIM_SelectOnePulseMode
08004274 g     F .text	00000038 TIM_EncoderInterfaceConfig
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0800154c g     F .text	0000002c pwm_set_int
20000f10 g     O .bss	00000040 chan_order4
080047e8 g     F .text	0000027a .hidden __subdf3
08003af4 g     F .text	00000004 TIM_SetCompare1
080034dc g     F .text	00000010 SYSCFG_ClearFlag
08003c74 g     F .text	0000000e TIM_OC2PolarityConfig
08008a04 g     F .text	0000005a __lo0bits
080050a4 g     F .text	00000000 .hidden __aeabi_ldivmod
0800371c g     F .text	0000001a TIM_UpdateDisableConfig
2000113a g     O .bss	00000001 _ge_adc_ovf
08002c2c g     F .text	0000000c GPIO_ReadInputDataBit
080046fc g     F .text	00000012 USART_DMACmd
00000000  w      *UND*	00000000 __register_frame_info
080039fc g     F .text	00000054 TIM_OC6Init
08003be4 g     F .text	0000000e TIM_OC4FastConfig
080012c8 g     F .text	00000044 ic_int_read_freq
080046d4 g     F .text	00000012 USART_SetDEAssertionTime
08005ca0  w    F .text	00000002 USBWakeUp_IRQHandler
08001be8 g     F .text	00000024 ADC_AnalogWatchdog2SingleChannelConfig
08002e98 g     F .text	00000014 RCC_HCLKConfig
200009b5 g     O .bss	00000001 _vcom_buf_tail
2000113b g     O .bss	00000001 adc_state
080036f8 g     F .text	00000010 TIM_CounterModeConfig
08005ca0  w    F .text	00000002 DMA2_Channel3_IRQHandler
08008940 g     F .text	00000082 __multadd
08004710 g     F .text	00000010 USART_DMAReceptionErrorConfig
0800892c g     F .text	00000012 _Bfree
08003cc4 g     F .text	0000000e TIM_OC5PolarityConfig
08005ca0  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
20000f50 g     O .bss	00000001 num_chan_adc3



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000994 	.word	0x20000994
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000188 	.word	0x08000188

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08000188 	.word	0x08000188
 80001d8:	20000998 	.word	0x20000998
 80001dc:	20000994 	.word	0x20000994
	...

080001e8 <adc_enable_clocks>:

/**
 * @brief Enable clocks necessary for ADC conversions and the DMA
 * controller
 */
void adc_enable_clocks(void) {
 80001e8:	b508      	push	{r3, lr}
  /* GPIO Periph clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80001ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001ee:	2101      	movs	r1, #1
 80001f0:	f003 f834 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80001f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80001f8:	2101      	movs	r1, #1
 80001fa:	f003 f82f 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80001fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000202:	2101      	movs	r1, #1
 8000204:	f003 f82a 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000208:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800020c:	2101      	movs	r1, #1
 800020e:	f003 f825 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000212:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000216:	2101      	movs	r1, #1
 8000218:	f003 f820 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 800021c:	2101      	movs	r1, #1
 800021e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000222:	f003 f81b 	bl	800325c <RCC_AHBPeriphClockCmd>

  /* Configure the ADC clock */
  RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 8000226:	f44f 7088 	mov.w	r0, #272	; 0x110
 800022a:	f002 ff99 	bl	8003160 <RCC_ADCCLKConfig>
  // RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div2);

  /* Enable DMA1 */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800022e:	2001      	movs	r0, #1
 8000230:	4601      	mov	r1, r0
 8000232:	f003 f813 	bl	800325c <RCC_AHBPeriphClockCmd>

  /* Enable DMA2 */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 8000236:	2002      	movs	r0, #2
 8000238:	2101      	movs	r1, #1
 800023a:	f003 f80f 	bl	800325c <RCC_AHBPeriphClockCmd>

  /* ADC1 Periph clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 800023e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000242:	2101      	movs	r1, #1
 8000244:	f003 f80a 	bl	800325c <RCC_AHBPeriphClockCmd>
  // RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);

  // enable TIM2
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000248:	2001      	movs	r0, #1
 800024a:	4601      	mov	r1, r0
  // RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
}
 800024c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* ADC1 Periph clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
  // RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);

  // enable TIM2
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000250:	f003 b81c 	b.w	800328c <RCC_APB1PeriphClockCmd>

08000254 <adc_init>:
 * and DMA controllers. It also will register the necessary
 * interrupt routines and perform the initial ADC calibration.
 * The individual channels for conversions still have to be enabled
 * seperately.
 */
void adc_init(void) {
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	b09a      	sub	sp, #104	; 0x68
  ADC_InitTypeDef       ADC_InitStructure;
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;
  NVIC_InitTypeDef   NVIC_InitStructure;
  __IO uint16_t calibration_value = 0;
 800025a:	2500      	movs	r5, #0
 800025c:	f8ad 5002 	strh.w	r5, [sp, #2]

  // enable clocks
  adc_enable_clocks();
 8000260:	f7ff ffc2 	bl	80001e8 <adc_enable_clocks>

  // Enable DMAs
  // Enable DMA for ADC1
  // DMA_DeInit(DMA1_Channel1);
  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
 8000264:	a80f      	add	r0, sp, #60	; 0x3c
 8000266:	f001 ffe3 	bl	8002230 <DMA_StructInit>
  DMA_InitStructure.DMA_BufferSize = 3;
 800026a:	2303      	movs	r3, #3
 800026c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
 8000270:	4b6b      	ldr	r3, [pc, #428]	; (8000420 <adc_init+0x1cc>)
 8000272:	9310      	str	r3, [sp, #64]	; 0x40
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000274:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8000278:	4b6a      	ldr	r3, [pc, #424]	; (8000424 <adc_init+0x1d0>)
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;

  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 800027a:	486b      	ldr	r0, [pc, #428]	; (8000428 <adc_init+0x1d4>)
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 800027c:	930f      	str	r3, [sp, #60]	; 0x3c
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_BufferSize = 3;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800027e:	f04f 0980 	mov.w	r9, #128	; 0x80
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000282:	f04f 0820 	mov.w	r8, #32
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000286:	f44f 7780 	mov.w	r7, #256	; 0x100
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800028a:	f44f 5600 	mov.w	r6, #8192	; 0x2000

  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 800028e:	a90f      	add	r1, sp, #60	; 0x3c
  // Enable DMA for ADC1
  // DMA_DeInit(DMA1_Channel1);
  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_BufferSize = 3;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000290:	9511      	str	r5, [sp, #68]	; 0x44
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000292:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000296:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800029a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800029e:	9715      	str	r7, [sp, #84]	; 0x54
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80002a0:	9513      	str	r5, [sp, #76]	; 0x4c
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80002a2:	9618      	str	r6, [sp, #96]	; 0x60

  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 80002a4:	f001 ff98 	bl	80021d8 <DMA_Init>

  // Enable DMA1 Channel Transfer Complete interrupt
  DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2102      	movs	r1, #2
 80002ac:	485e      	ldr	r0, [pc, #376]	; (8000428 <adc_init+0x1d4>)
 80002ae:	f001 ffdf 	bl	8002270 <DMA_ITConfig>

  //Enable DMA1 channel IRQ Channel */
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80002b2:	2401      	movs	r4, #1

  // Enable DMA1 Channel Transfer Complete interrupt
  DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);

  //Enable DMA1 channel IRQ Channel */
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 80002b4:	230b      	movs	r3, #11
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80002b6:	a801      	add	r0, sp, #4

  // Enable DMA1 Channel Transfer Complete interrupt
  DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);

  //Enable DMA1 channel IRQ Channel */
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 80002b8:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80002bc:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80002c0:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80002c4:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80002c8:	f002 fcee 	bl	8002ca8 <NVIC_Init>

  DMA_Cmd(DMA1_Channel1, ENABLE);
 80002cc:	4621      	mov	r1, r4
 80002ce:	4856      	ldr	r0, [pc, #344]	; (8000428 <adc_init+0x1d4>)
 80002d0:	f001 ffbc 	bl	800224c <DMA_Cmd>

  // Enable DMA for ADC2
  // DMA_DeInit(DMA2_Channel1);
  DMA_StructInit(&DMA_InitStructure);
 80002d4:	a80f      	add	r0, sp, #60	; 0x3c
 80002d6:	f001 ffab 	bl	8002230 <DMA_StructInit>
  DMA_InitStructure.DMA_BufferSize = 1;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf2[0];
 80002da:	4b54      	ldr	r3, [pc, #336]	; (800042c <adc_init+0x1d8>)
 80002dc:	9310      	str	r3, [sp, #64]	; 0x40
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC2->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;

  DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 80002de:	4854      	ldr	r0, [pc, #336]	; (8000430 <adc_init+0x1dc>)
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf2[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC2->DR;
 80002e0:	4b54      	ldr	r3, [pc, #336]	; (8000434 <adc_init+0x1e0>)
 80002e2:	930f      	str	r3, [sp, #60]	; 0x3c
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;

  DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 80002e4:	a90f      	add	r1, sp, #60	; 0x3c
  DMA_Cmd(DMA1_Channel1, ENABLE);

  // Enable DMA for ADC2
  // DMA_DeInit(DMA2_Channel1);
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_BufferSize = 1;
 80002e6:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 80002ea:	9511      	str	r5, [sp, #68]	; 0x44
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf2[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 80002ec:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80002f0:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80002f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC2->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80002f8:	9715      	str	r7, [sp, #84]	; 0x54
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80002fa:	9513      	str	r5, [sp, #76]	; 0x4c
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80002fc:	9618      	str	r6, [sp, #96]	; 0x60

  DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 80002fe:	f001 ff6b 	bl	80021d8 <DMA_Init>

  // Enable DMA2 Channel Transfer Complete interrupt
  DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 8000302:	4622      	mov	r2, r4
 8000304:	2102      	movs	r1, #2
 8000306:	484a      	ldr	r0, [pc, #296]	; (8000430 <adc_init+0x1dc>)
 8000308:	f001 ffb2 	bl	8002270 <DMA_ITConfig>

  //Enable DMA1 channel IRQ Channel */
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 800030c:	2338      	movs	r3, #56	; 0x38
 800030e:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 8000312:	a801      	add	r0, sp, #4
  DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);

  //Enable DMA1 channel IRQ Channel */
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Channel1_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8000314:	2302      	movs	r3, #2
 8000316:	f88d 3006 	strb.w	r3, [sp, #6]
  // Enable DMA2 Channel Transfer Complete interrupt
  DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);

  //Enable DMA1 channel IRQ Channel */
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Channel1_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800031a:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800031e:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000322:	f002 fcc1 	bl	8002ca8 <NVIC_Init>

  DMA_Cmd(DMA2_Channel1, ENABLE);
 8000326:	4621      	mov	r1, r4
 8000328:	4841      	ldr	r0, [pc, #260]	; (8000430 <adc_init+0x1dc>)
 800032a:	f001 ff8f 	bl	800224c <DMA_Cmd>


  // Enable ADCs
  ADC_StructInit(&ADC_InitStructure);
 800032e:	a807      	add	r0, sp, #28
 8000330:	f001 fb44 	bl	80019bc <ADC_StructInit>

  /* Calibration procedure */
  // ADC1
  ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 8000334:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000338:	4621      	mov	r1, r4
 800033a:	f001 fbdf 	bl	8001afc <ADC_VoltageRegulatorCmd>

  ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 800033e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000342:	4629      	mov	r1, r5
 8000344:	f001 fbc4 	bl	8001ad0 <ADC_SelectCalibrationMode>
  ADC_StartCalibration(ADC1);
 8000348:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800034c:	f001 fbb2 	bl	8001ab4 <ADC_StartCalibration>

  while(ADC_GetCalibrationStatus(ADC1) != RESET);
 8000350:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000354:	f001 fbc4 	bl	8001ae0 <ADC_GetCalibrationStatus>
 8000358:	4604      	mov	r4, r0
 800035a:	2800      	cmp	r0, #0
 800035c:	d1f8      	bne.n	8000350 <adc_init+0xfc>
  calibration_value_adc1 = ADC_GetCalibrationValue(ADC1);
 800035e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000362:	f001 fbad 	bl	8001ac0 <ADC_GetCalibrationValue>
 8000366:	4b34      	ldr	r3, [pc, #208]	; (8000438 <adc_init+0x1e4>)

  // ADC2
  ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 8000368:	2101      	movs	r1, #1

  ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
  ADC_StartCalibration(ADC1);

  while(ADC_GetCalibrationStatus(ADC1) != RESET);
  calibration_value_adc1 = ADC_GetCalibrationValue(ADC1);
 800036a:	6018      	str	r0, [r3, #0]

  // ADC2
  ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 800036c:	4833      	ldr	r0, [pc, #204]	; (800043c <adc_init+0x1e8>)
 800036e:	f001 fbc5 	bl	8001afc <ADC_VoltageRegulatorCmd>

  ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 8000372:	4832      	ldr	r0, [pc, #200]	; (800043c <adc_init+0x1e8>)
 8000374:	4621      	mov	r1, r4
 8000376:	f001 fbab 	bl	8001ad0 <ADC_SelectCalibrationMode>
  ADC_StartCalibration(ADC2);
 800037a:	4830      	ldr	r0, [pc, #192]	; (800043c <adc_init+0x1e8>)
 800037c:	f001 fb9a 	bl	8001ab4 <ADC_StartCalibration>

  while(ADC_GetCalibrationStatus(ADC2) != RESET);
 8000380:	482e      	ldr	r0, [pc, #184]	; (800043c <adc_init+0x1e8>)
 8000382:	f001 fbad 	bl	8001ae0 <ADC_GetCalibrationStatus>
 8000386:	4604      	mov	r4, r0
 8000388:	2800      	cmp	r0, #0
 800038a:	d1f9      	bne.n	8000380 <adc_init+0x12c>
  calibration_value_adc2 = ADC_GetCalibrationValue(ADC2);
 800038c:	482b      	ldr	r0, [pc, #172]	; (800043c <adc_init+0x1e8>)
 800038e:	f001 fb97 	bl	8001ac0 <ADC_GetCalibrationValue>
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <adc_init+0x1ec>)

  // while(ADC_GetCalibrationStatus(ADC4) != RESET);
  // calibration_value_adc4 = ADC_GetCalibrationValue(ADC4);

  /* Configure ADC1, ADC2, ADC3, and ADC4 in continuous mode */
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8000394:	9402      	str	r4, [sp, #8]

  ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
  ADC_StartCalibration(ADC2);

  while(ADC_GetCalibrationStatus(ADC2) != RESET);
  calibration_value_adc2 = ADC_GetCalibrationValue(ADC2);
 8000396:	6018      	str	r0, [r3, #0]

  /* Configure ADC1, ADC2, ADC3, and ADC4 in continuous mode */
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
  ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 8000398:	2502      	movs	r5, #2
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;

  ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 800039a:	a902      	add	r1, sp, #8
 800039c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  // while(ADC_GetCalibrationStatus(ADC4) != RESET);
  // calibration_value_adc4 = ADC_GetCalibrationValue(ADC4);

  /* Configure ADC1, ADC2, ADC3, and ADC4 in continuous mode */
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 80003a0:	9403      	str	r4, [sp, #12]
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80003a2:	9404      	str	r4, [sp, #16]
  ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 80003a4:	9505      	str	r5, [sp, #20]
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 80003a6:	f88d 4018 	strb.w	r4, [sp, #24]

  ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 80003aa:	f001 fb35 	bl	8001a18 <ADC_CommonInit>
  ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 80003ae:	a902      	add	r1, sp, #8
 80003b0:	4822      	ldr	r0, [pc, #136]	; (800043c <adc_init+0x1e8>)
 80003b2:	f001 fb31 	bl	8001a18 <ADC_CommonInit>
  // ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
  // ADC_CommonInit(ADC4, &ADC_CommonInitStructure);

  ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Disable;
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_11;
 80003b6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80003ba:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_RisingEdge;
 80003bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c0:	930a      	str	r3, [sp, #40]	; 0x28
  ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
  ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
  ADC_InitStructure.ADC_NbrOfRegChannel = 3;

  // Initialize ADCs
  ADC_Init(ADC1, &ADC_InitStructure);
 80003c2:	a907      	add	r1, sp, #28
  ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_11;
  ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_RisingEdge;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
  ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
  ADC_InitStructure.ADC_NbrOfRegChannel = 3;
 80003c4:	2303      	movs	r3, #3

  // Initialize ADCs
  ADC_Init(ADC1, &ADC_InitStructure);
 80003c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_11;
  ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_RisingEdge;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
  ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
  ADC_InitStructure.ADC_NbrOfRegChannel = 3;
 80003ca:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
  ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
  // ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
  // ADC_CommonInit(ADC4, &ADC_CommonInitStructure);

  ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Disable;
 80003ce:	9407      	str	r4, [sp, #28]
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80003d0:	9408      	str	r4, [sp, #32]
  ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_11;
  ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_RisingEdge;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80003d2:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 80003d4:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 80003d6:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_InitStructure.ADC_NbrOfRegChannel = 3;

  // Initialize ADCs
  ADC_Init(ADC1, &ADC_InitStructure);
 80003d8:	f001 faca 	bl	8001970 <ADC_Init>
  ADC_Init(ADC2, &ADC_InitStructure);
 80003dc:	a907      	add	r1, sp, #28
 80003de:	4817      	ldr	r0, [pc, #92]	; (800043c <adc_init+0x1e8>)
 80003e0:	f001 fac6 	bl	8001970 <ADC_Init>
  // ADC_Init(ADC3, &ADC_InitStructure);
  // ADC_Init(ADC4, &ADC_InitStructure);

  // Set number of enabled ADC channels
  num_chan_adc1 = 0;
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <adc_init+0x1f0>)
 80003e6:	701c      	strb	r4, [r3, #0]
  num_chan_adc2 = 0;
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <adc_init+0x1f4>)
 80003ea:	701c      	strb	r4, [r3, #0]
  // num_chan_adc3 = 0;
  // num_chan_adc4 = 0;
  
  // Set adc conversion state
  adc_state = 0x0;
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <adc_init+0x1f8>)
 80003ee:	701c      	strb	r4, [r3, #0]
  adc_val_rdy_state = 0x0;
 80003f0:	4b17      	ldr	r3, [pc, #92]	; (8000450 <adc_init+0x1fc>)

  // Enable DMA mode for ADC
  ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 80003f2:	4629      	mov	r1, r5
 80003f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  // num_chan_adc3 = 0;
  // num_chan_adc4 = 0;
  
  // Set adc conversion state
  adc_state = 0x0;
  adc_val_rdy_state = 0x0;
 80003f8:	701c      	strb	r4, [r3, #0]

  // Enable DMA mode for ADC
  ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 80003fa:	f001 fd95 	bl	8001f28 <ADC_DMAConfig>
  ADC_DMACmd(ADC1, ENABLE);
 80003fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000402:	2101      	movs	r1, #1
 8000404:	f001 fd86 	bl	8001f14 <ADC_DMACmd>

  ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 8000408:	4629      	mov	r1, r5
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <adc_init+0x1e8>)
 800040c:	f001 fd8c 	bl	8001f28 <ADC_DMAConfig>
  ADC_DMACmd(ADC2, ENABLE);
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <adc_init+0x1e8>)
 8000412:	2101      	movs	r1, #1
 8000414:	f001 fd7e 	bl	8001f14 <ADC_DMACmd>
}
 8000418:	b01a      	add	sp, #104	; 0x68
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	bf00      	nop
 8000420:	20000f5c 	.word	0x20000f5c
 8000424:	50000040 	.word	0x50000040
 8000428:	40020008 	.word	0x40020008
 800042c:	200010ac 	.word	0x200010ac
 8000430:	40020408 	.word	0x40020408
 8000434:	50000140 	.word	0x50000140
 8000438:	20000f54 	.word	0x20000f54
 800043c:	50000100 	.word	0x50000100
 8000440:	20000f9c 	.word	0x20000f9c
 8000444:	20000ca4 	.word	0x20000ca4
 8000448:	20000c9c 	.word	0x20000c9c
 800044c:	2000113b 	.word	0x2000113b
 8000450:	20000fe0 	.word	0x20000fe0

08000454 <adc_start>:
/**
 * @brief Start ADC conversions
 */
void adc_start(void) {
  /* Enable ADC */
  ADC_Cmd(ADC1, ENABLE);
 8000454:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000458:	2101      	movs	r1, #1
}

/**
 * @brief Start ADC conversions
 */
void adc_start(void) {
 800045a:	b508      	push	{r3, lr}
  /* Enable ADC */
  ADC_Cmd(ADC1, ENABLE);
 800045c:	f001 fb20 	bl	8001aa0 <ADC_Cmd>
  ADC_Cmd(ADC2, ENABLE);
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <adc_start+0x40>)
 8000462:	2101      	movs	r1, #1
 8000464:	f001 fb1c 	bl	8001aa0 <ADC_Cmd>
  // ADC_Cmd(ADC3, ENABLE);
  // ADC_Cmd(ADC4, ENABLE);

  /* wait for ADRDY */
  while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 8000468:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800046c:	2101      	movs	r1, #1
 800046e:	f001 fddb 	bl	8002028 <ADC_GetFlagStatus>
 8000472:	2800      	cmp	r0, #0
 8000474:	d0f8      	beq.n	8000468 <adc_start+0x14>
  while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 8000476:	4807      	ldr	r0, [pc, #28]	; (8000494 <adc_start+0x40>)
 8000478:	2101      	movs	r1, #1
 800047a:	f001 fdd5 	bl	8002028 <ADC_GetFlagStatus>
 800047e:	2800      	cmp	r0, #0
 8000480:	d0f9      	beq.n	8000476 <adc_start+0x22>
  // while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
  // while(!ADC_GetFlagStatus(ADC4, ADC_FLAG_RDY));

  /* ADC Start Conversion */
   ADC_StartConversion(ADC1);
 8000482:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000486:	f001 fc9d 	bl	8001dc4 <ADC_StartConversion>
   ADC_StartConversion(ADC2);
 800048a:	4802      	ldr	r0, [pc, #8]	; (8000494 <adc_start+0x40>)
   // ADC_StartConversion(ADC3);
   // ADC_StartConversion(ADC4);
}
 800048c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
  // while(!ADC_GetFlagStatus(ADC4, ADC_FLAG_RDY));

  /* ADC Start Conversion */
   ADC_StartConversion(ADC1);
   ADC_StartConversion(ADC2);
 8000490:	f001 bc98 	b.w	8001dc4 <ADC_StartConversion>
 8000494:	50000100 	.word	0x50000100

08000498 <adc_stop>:
}

/**
 * @brief Stop ADC conversions
 */
void adc_stop(void) {
 8000498:	b510      	push	{r4, lr}
  /* Disable ADC1 and ADC2 */
  ADC_StopConversion(ADC1);
  ADC_StopConversion(ADC2);
 800049a:	4c09      	ldr	r4, [pc, #36]	; (80004c0 <adc_stop+0x28>)
/**
 * @brief Stop ADC conversions
 */
void adc_stop(void) {
  /* Disable ADC1 and ADC2 */
  ADC_StopConversion(ADC1);
 800049c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80004a0:	f001 fc9a 	bl	8001dd8 <ADC_StopConversion>
  ADC_StopConversion(ADC2);
 80004a4:	4620      	mov	r0, r4
 80004a6:	f001 fc97 	bl	8001dd8 <ADC_StopConversion>
  // ADC_StopConversion(ADC3);
  // ADC_StopConversion(ADC4);

  ADC_Cmd(ADC1, DISABLE);
 80004aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80004ae:	2100      	movs	r1, #0
 80004b0:	f001 faf6 	bl	8001aa0 <ADC_Cmd>
  ADC_Cmd(ADC2, DISABLE);
 80004b4:	4620      	mov	r0, r4
 80004b6:	2100      	movs	r1, #0
  // ADC_Cmd(ADC3, DISABLE);
  // ADC_Cmd(ADC4, DISABLE);
}
 80004b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ADC_StopConversion(ADC2);
  // ADC_StopConversion(ADC3);
  // ADC_StopConversion(ADC4);

  ADC_Cmd(ADC1, DISABLE);
  ADC_Cmd(ADC2, DISABLE);
 80004bc:	f001 baf0 	b.w	8001aa0 <ADC_Cmd>
 80004c0:	50000100 	.word	0x50000100

080004c4 <adc_deinit>:


/**
 * @brief Deinitialize ADCs
 */
void adc_deinit(void) {
 80004c4:	b508      	push	{r3, lr}
  adc_stop();
 80004c6:	f7ff ffe7 	bl	8000498 <adc_stop>

  //reset ADCs
  ADC_DeInit(ADC1);
 80004ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80004ce:	f001 fa23 	bl	8001918 <ADC_DeInit>
  ADC_DeInit(ADC2);
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <adc_deinit+0x20>)
 80004d4:	f001 fa20 	bl	8001918 <ADC_DeInit>
  // ADC_DeInit(ADC3);
  // ADC_DeInit(ADC4);

  num_chan_adc1 = 0;
 80004d8:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <adc_deinit+0x24>)
 80004da:	2300      	movs	r3, #0
 80004dc:	7013      	strb	r3, [r2, #0]
  num_chan_adc2 = 0;
 80004de:	4a03      	ldr	r2, [pc, #12]	; (80004ec <adc_deinit+0x28>)
 80004e0:	7013      	strb	r3, [r2, #0]
 80004e2:	bd08      	pop	{r3, pc}
 80004e4:	50000100 	.word	0x50000100
 80004e8:	20000ca4 	.word	0x20000ca4
 80004ec:	20000c9c 	.word	0x20000c9c

080004f0 <adc_enable_channels>:
 * are split based on what ADC they are performed on.
 * 
 * @param channels Array containing the ADC channels to convert in order
 * @param num_conv Number of total ADC channels enabled
 */
void adc_enable_channels(ADC_CHAN_Type *channels, uint16_t num_conv) {
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <adc_enable_channels+0x44>)
 80004f2:	b570      	push	{r4, r5, r6, lr}
  for (int k = 0; k < num_conv; k++) {
 80004f4:	4604      	mov	r4, r0
 80004f6:	1a22      	subs	r2, r4, r0
 80004f8:	428a      	cmp	r2, r1
 80004fa:	f103 030c 	add.w	r3, r3, #12
 80004fe:	da17      	bge.n	8000530 <adc_enable_channels+0x40>
    // adc_conv_order[k] = channels[k];
    ADC_CHAN_Type sel_adc_chan = channels[k];
 8000500:	f814 2b01 	ldrb.w	r2, [r4], #1

    adc_conv_order[k].pin = adc_pin_map[sel_adc_chan];
 8000504:	4d0c      	ldr	r5, [pc, #48]	; (8000538 <adc_enable_channels+0x48>)
    adc_conv_order[k].chan = sel_adc_chan;
 8000506:	f803 2c0c 	strb.w	r2, [r3, #-12]
void adc_enable_channels(ADC_CHAN_Type *channels, uint16_t num_conv) {
  for (int k = 0; k < num_conv; k++) {
    // adc_conv_order[k] = channels[k];
    ADC_CHAN_Type sel_adc_chan = channels[k];

    adc_conv_order[k].pin = adc_pin_map[sel_adc_chan];
 800050a:	5cae      	ldrb	r6, [r5, r2]
 800050c:	f803 6c0d 	strb.w	r6, [r3, #-13]
    adc_conv_order[k].chan = sel_adc_chan;
    adc_conv_order[k].STM_ADCx = adc_bank_map[sel_adc_chan];
 8000510:	eb05 0682 	add.w	r6, r5, r2, lsl #2
    adc_conv_order[k].STM_ADC_chan = adc_chan_map[sel_adc_chan];
 8000514:	442a      	add	r2, r5
    // adc_conv_order[k] = channels[k];
    ADC_CHAN_Type sel_adc_chan = channels[k];

    adc_conv_order[k].pin = adc_pin_map[sel_adc_chan];
    adc_conv_order[k].chan = sel_adc_chan;
    adc_conv_order[k].STM_ADCx = adc_bank_map[sel_adc_chan];
 8000516:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    adc_conv_order[k].STM_ADC_chan = adc_chan_map[sel_adc_chan];
 8000518:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
 800051c:	f803 2c05 	strb.w	r2, [r3, #-5]
    adc_conv_order[k].enabled = true;
 8000520:	2201      	movs	r2, #1
    // adc_conv_order[k] = channels[k];
    ADC_CHAN_Type sel_adc_chan = channels[k];

    adc_conv_order[k].pin = adc_pin_map[sel_adc_chan];
    adc_conv_order[k].chan = sel_adc_chan;
    adc_conv_order[k].STM_ADCx = adc_bank_map[sel_adc_chan];
 8000522:	f843 6c09 	str.w	r6, [r3, #-9]
    adc_conv_order[k].STM_ADC_chan = adc_chan_map[sel_adc_chan];
    adc_conv_order[k].enabled = true;
 8000526:	f803 2c04 	strb.w	r2, [r3, #-4]
    adc_conv_order[k].period = 1;
 800052a:	f823 2c03 	strh.w	r2, [r3, #-3]
 800052e:	e7e2      	b.n	80004f6 <adc_enable_channels+0x6>
  }
}
 8000530:	bd70      	pop	{r4, r5, r6, pc}
 8000532:	bf00      	nop
 8000534:	20000ca9 	.word	0x20000ca9
 8000538:	20000000 	.word	0x20000000

0800053c <adc_initialize_channels>:
 * @brief Initialize ADC channels
 * @details Handles the actual initialization of the external
 * ADC pins and enabling the correct ADC channel. This method
 * assumes that you have already called adc_enable_channels
 */
void adc_initialize_channels() {
 800053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000540:	4c58      	ldr	r4, [pc, #352]	; (80006a4 <adc_initialize_channels+0x168>)
 8000542:	b08c      	sub	sp, #48	; 0x30
  for (int k = 0; k < GE_NUM_ADC; k++) {
 8000544:	2500      	movs	r5, #0
    if (adc_conv_order[k].enabled) {
 8000546:	7823      	ldrb	r3, [r4, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d04a      	beq.n	80005e2 <adc_initialize_channels+0xa6>
      GPIOPin pin = adc_conv_order[k].pin;

      GPIO_InitTypeDef GPIO_InitStruct;
      GPIO_InitStruct.GPIO_Pin = _ge_pin_num[pin];
 800054c:	f814 2c09 	ldrb.w	r2, [r4, #-9]
 8000550:	4b55      	ldr	r3, [pc, #340]	; (80006a8 <adc_initialize_channels+0x16c>)
 8000552:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000556:	9101      	str	r1, [sp, #4]
      GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
      GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
      GPIO_Init(_ge_pin_port[pin], &GPIO_InitStruct);
 8000558:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    if (adc_conv_order[k].enabled) {
      GPIOPin pin = adc_conv_order[k].pin;

      GPIO_InitTypeDef GPIO_InitStruct;
      GPIO_InitStruct.GPIO_Pin = _ge_pin_num[pin];
      GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 800055c:	2103      	movs	r1, #3
 800055e:	f88d 1008 	strb.w	r1, [sp, #8]
      GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000562:	2100      	movs	r1, #0
 8000564:	f88d 100b 	strb.w	r1, [sp, #11]
      GPIO_Init(_ge_pin_port[pin], &GPIO_InitStruct);
 8000568:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800056c:	a901      	add	r1, sp, #4
 800056e:	f002 faed 	bl	8002b4c <GPIO_Init>

      if (adc_conv_order[k].STM_ADCx == ADC1) {
 8000572:	f854 0c05 	ldr.w	r0, [r4, #-5]
 8000576:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800057a:	d108      	bne.n	800058e <adc_initialize_channels+0x52>
        num_chan_adc1++;
 800057c:	4b4b      	ldr	r3, [pc, #300]	; (80006ac <adc_initialize_channels+0x170>)

        // store index to save result
        adc1_conv_map[num_chan_adc1-1] = k;
 800057e:	494c      	ldr	r1, [pc, #304]	; (80006b0 <adc_initialize_channels+0x174>)
      GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
      GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
      GPIO_Init(_ge_pin_port[pin], &GPIO_InitStruct);

      if (adc_conv_order[k].STM_ADCx == ADC1) {
        num_chan_adc1++;
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	3201      	adds	r2, #1
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	701a      	strb	r2, [r3, #0]

        // store index to save result
        adc1_conv_map[num_chan_adc1-1] = k;
 8000588:	1e56      	subs	r6, r2, #1
 800058a:	b2ab      	uxth	r3, r5
 800058c:	e022      	b.n	80005d4 <adc_initialize_channels+0x98>

        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x1;

        ADC_RegularChannelConfig(adc_conv_order[k].STM_ADCx, adc_conv_order[k].STM_ADC_chan, num_chan_adc1, ADC_SampleTime_19Cycles5);
      } else if (adc_conv_order[k].STM_ADCx == ADC2) {
 800058e:	4b49      	ldr	r3, [pc, #292]	; (80006b4 <adc_initialize_channels+0x178>)
 8000590:	4298      	cmp	r0, r3
 8000592:	d108      	bne.n	80005a6 <adc_initialize_channels+0x6a>
        num_chan_adc2++;
 8000594:	4b48      	ldr	r3, [pc, #288]	; (80006b8 <adc_initialize_channels+0x17c>)

        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x2;

        // store index to save result
        adc2_conv_map[num_chan_adc2-1] = k;
 8000596:	4949      	ldr	r1, [pc, #292]	; (80006bc <adc_initialize_channels+0x180>)
        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x1;

        ADC_RegularChannelConfig(adc_conv_order[k].STM_ADCx, adc_conv_order[k].STM_ADC_chan, num_chan_adc1, ADC_SampleTime_19Cycles5);
      } else if (adc_conv_order[k].STM_ADCx == ADC2) {
        num_chan_adc2++;
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	3201      	adds	r2, #1
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]

        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x2;

        // store index to save result
        adc2_conv_map[num_chan_adc2-1] = k;
 80005a0:	1e56      	subs	r6, r2, #1
 80005a2:	b2ab      	uxth	r3, r5
 80005a4:	e016      	b.n	80005d4 <adc_initialize_channels+0x98>

        ADC_RegularChannelConfig(adc_conv_order[k].STM_ADCx, adc_conv_order[k].STM_ADC_chan, num_chan_adc2, ADC_SampleTime_19Cycles5);
      } else if (adc_conv_order[k].STM_ADCx == ADC3) {
 80005a6:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <adc_initialize_channels+0x184>)
 80005a8:	4298      	cmp	r0, r3
 80005aa:	d108      	bne.n	80005be <adc_initialize_channels+0x82>
        num_chan_adc3++;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <adc_initialize_channels+0x188>)

        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x4;

        // store index to save result
        adc3_conv_map[num_chan_adc3-1] = k;
 80005ae:	4946      	ldr	r1, [pc, #280]	; (80006c8 <adc_initialize_channels+0x18c>)
        // store index to save result
        adc2_conv_map[num_chan_adc2-1] = k;

        ADC_RegularChannelConfig(adc_conv_order[k].STM_ADCx, adc_conv_order[k].STM_ADC_chan, num_chan_adc2, ADC_SampleTime_19Cycles5);
      } else if (adc_conv_order[k].STM_ADCx == ADC3) {
        num_chan_adc3++;
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	3201      	adds	r2, #1
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]

        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x4;

        // store index to save result
        adc3_conv_map[num_chan_adc3-1] = k;
 80005b8:	1e56      	subs	r6, r2, #1
 80005ba:	b2ab      	uxth	r3, r5
 80005bc:	e00a      	b.n	80005d4 <adc_initialize_channels+0x98>
        
        ADC_RegularChannelConfig(adc_conv_order[k].STM_ADCx, adc_conv_order[k].STM_ADC_chan, num_chan_adc3, ADC_SampleTime_19Cycles5);
      } else if (adc_conv_order[k].STM_ADCx == ADC4) {
 80005be:	4b43      	ldr	r3, [pc, #268]	; (80006cc <adc_initialize_channels+0x190>)
 80005c0:	4298      	cmp	r0, r3
 80005c2:	d16b      	bne.n	800069c <adc_initialize_channels+0x160>
        num_chan_adc4++;
 80005c4:	4b42      	ldr	r3, [pc, #264]	; (80006d0 <adc_initialize_channels+0x194>)

        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x1;

        // store index to save result
        adc4_conv_map[num_chan_adc4-1] = k;
 80005c6:	4943      	ldr	r1, [pc, #268]	; (80006d4 <adc_initialize_channels+0x198>)
        // store index to save result
        adc3_conv_map[num_chan_adc3-1] = k;
        
        ADC_RegularChannelConfig(adc_conv_order[k].STM_ADCx, adc_conv_order[k].STM_ADC_chan, num_chan_adc3, ADC_SampleTime_19Cycles5);
      } else if (adc_conv_order[k].STM_ADCx == ADC4) {
        num_chan_adc4++;
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	3201      	adds	r2, #1
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]

        // mark that ADC1 is used
        // adc_val_rdy_state |= 0x1;

        // store index to save result
        adc4_conv_map[num_chan_adc4-1] = k;
 80005d0:	1e56      	subs	r6, r2, #1
 80005d2:	b2ab      	uxth	r3, r5
 80005d4:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]

        ADC_RegularChannelConfig(adc_conv_order[k].STM_ADCx, adc_conv_order[k].STM_ADC_chan, num_chan_adc4, ADC_SampleTime_19Cycles5);
 80005d8:	2304      	movs	r3, #4
 80005da:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80005de:	f001 fb7b 	bl	8001cd8 <ADC_RegularChannelConfig>
 * @details Handles the actual initialization of the external
 * ADC pins and enabling the correct ADC channel. This method
 * assumes that you have already called adc_enable_channels
 */
void adc_initialize_channels() {
  for (int k = 0; k < GE_NUM_ADC; k++) {
 80005e2:	3501      	adds	r5, #1
 80005e4:	2d27      	cmp	r5, #39	; 0x27
 80005e6:	f104 040c 	add.w	r4, r4, #12
 80005ea:	d1ac      	bne.n	8000546 <adc_initialize_channels+0xa>
      }
    }
  }

  // enable conversion sequences for ADCs
  ADC_RegularChannelSequencerLengthConfig(ADC1, num_chan_adc1);
 80005ec:	4c2f      	ldr	r4, [pc, #188]	; (80006ac <adc_initialize_channels+0x170>)
  ADC_RegularChannelSequencerLengthConfig(ADC2, num_chan_adc2);
 80005ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80006b8 <adc_initialize_channels+0x17c>
      }
    }
  }

  // enable conversion sequences for ADCs
  ADC_RegularChannelSequencerLengthConfig(ADC1, num_chan_adc1);
 80005f2:	7821      	ldrb	r1, [r4, #0]
 80005f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005f8:	f001 fbd0 	bl	8001d9c <ADC_RegularChannelSequencerLengthConfig>
  ADC_RegularChannelSequencerLengthConfig(ADC2, num_chan_adc2);
 80005fc:	482d      	ldr	r0, [pc, #180]	; (80006b4 <adc_initialize_channels+0x178>)
 80005fe:	f89a 1000 	ldrb.w	r1, [sl]
 8000602:	f001 fbcb 	bl	8001d9c <ADC_RegularChannelSequencerLengthConfig>
  // ADC_RegularChannelSequencerLengthConfig(ADC3, num_chan_adc3);
  // ADC_RegularChannelSequencerLengthConfig(ADC4, num_chan_adc4);

  // setup DMAs

  DMA_Cmd(DMA1_Channel1, DISABLE);
 8000606:	4834      	ldr	r0, [pc, #208]	; (80006d8 <adc_initialize_channels+0x19c>)
 8000608:	2100      	movs	r1, #0
 800060a:	f001 fe1f 	bl	800224c <DMA_Cmd>
  DMA_Cmd(DMA1_Channel2, DISABLE);
 800060e:	2100      	movs	r1, #0
 8000610:	4832      	ldr	r0, [pc, #200]	; (80006dc <adc_initialize_channels+0x1a0>)
 8000612:	f001 fe1b 	bl	800224c <DMA_Cmd>

  // DMA for ADC1
  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
 8000616:	a801      	add	r0, sp, #4
 8000618:	f001 fe0a 	bl	8002230 <DMA_StructInit>
  DMA_InitStructure.DMA_BufferSize = num_chan_adc1;
 800061c:	7823      	ldrb	r3, [r4, #0]
 800061e:	f8ad 3010 	strh.w	r3, [sp, #16]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <adc_initialize_channels+0x1a4>)
 8000624:	9302      	str	r3, [sp, #8]

  // DMA for ADC1
  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_BufferSize = num_chan_adc1;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000626:	2400      	movs	r4, #0
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <adc_initialize_channels+0x1a8>)
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;

  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 800062a:	482b      	ldr	r0, [pc, #172]	; (80006d8 <adc_initialize_channels+0x19c>)
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 800062c:	9301      	str	r3, [sp, #4]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;

  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 800062e:	a901      	add	r1, sp, #4
  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_BufferSize = num_chan_adc1;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000630:	f44f 6900 	mov.w	r9, #2048	; 0x800
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000634:	f04f 0880 	mov.w	r8, #128	; 0x80
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000638:	2720      	movs	r7, #32
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800063a:	f44f 7680 	mov.w	r6, #256	; 0x100
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800063e:	f44f 5500 	mov.w	r5, #8192	; 0x2000

  // DMA for ADC1
  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_BufferSize = num_chan_adc1;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000642:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf1[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000644:	f8cd 9020 	str.w	r9, [sp, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000648:	f8cd 8018 	str.w	r8, [sp, #24]
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800064c:	9709      	str	r7, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800064e:	9607      	str	r6, [sp, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000650:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000652:	950a      	str	r5, [sp, #40]	; 0x28

  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8000654:	f001 fdc0 	bl	80021d8 <DMA_Init>


  // DMA for ADC2
  DMA_StructInit(&DMA_InitStructure);
 8000658:	a801      	add	r0, sp, #4
 800065a:	f001 fde9 	bl	8002230 <DMA_StructInit>
  DMA_InitStructure.DMA_BufferSize = num_chan_adc2;
 800065e:	f89a 3000 	ldrb.w	r3, [sl]
 8000662:	f8ad 3010 	strh.w	r3, [sp, #16]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf2[0];
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <adc_initialize_channels+0x1ac>)
 8000668:	9302      	str	r3, [sp, #8]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC2->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;

  DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 800066a:	4820      	ldr	r0, [pc, #128]	; (80006ec <adc_initialize_channels+0x1b0>)
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf2[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC2->DR;
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <adc_initialize_channels+0x1b4>)
 800066e:	9301      	str	r3, [sp, #4]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;

  DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 8000670:	a901      	add	r1, sp, #4


  // DMA for ADC2
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_BufferSize = num_chan_adc2;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000672:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&data_buf2[0];
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000674:	f8cd 9020 	str.w	r9, [sp, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000678:	f8cd 8018 	str.w	r8, [sp, #24]
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800067c:	9709      	str	r7, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC2->DR;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800067e:	9607      	str	r6, [sp, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000680:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000682:	950a      	str	r5, [sp, #40]	; 0x28

  DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 8000684:	f001 fda8 	bl	80021d8 <DMA_Init>

  DMA_Cmd(DMA1_Channel1, ENABLE);
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <adc_initialize_channels+0x19c>)
 800068a:	2101      	movs	r1, #1
 800068c:	f001 fdde 	bl	800224c <DMA_Cmd>
  DMA_Cmd(DMA1_Channel2, ENABLE);
 8000690:	4812      	ldr	r0, [pc, #72]	; (80006dc <adc_initialize_channels+0x1a0>)
 8000692:	2101      	movs	r1, #1
 8000694:	f001 fdda 	bl	800224c <DMA_Cmd>
  // ADC_Cmd(ADC4, ENABLE);

  // DMA_Cmd(DMA1_Channel1, DISABLE);
  // DMA_Cmd(DMA1_Channel2, DISABLE);

  adc_state = 0x0;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <adc_initialize_channels+0x1b8>)
 800069a:	701c      	strb	r4, [r3, #0]
}
 800069c:	b00c      	add	sp, #48	; 0x30
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	bf00      	nop
 80006a4:	20000cb1 	.word	0x20000cb1
 80006a8:	080098b4 	.word	0x080098b4
 80006ac:	20000ca4 	.word	0x20000ca4
 80006b0:	2000106c 	.word	0x2000106c
 80006b4:	50000100 	.word	0x50000100
 80006b8:	20000c9c 	.word	0x20000c9c
 80006bc:	20000fc0 	.word	0x20000fc0
 80006c0:	50000400 	.word	0x50000400
 80006c4:	20000f50 	.word	0x20000f50
 80006c8:	20000fa0 	.word	0x20000fa0
 80006cc:	50000500 	.word	0x50000500
 80006d0:	20000ec8 	.word	0x20000ec8
 80006d4:	2000108c 	.word	0x2000108c
 80006d8:	40020008 	.word	0x40020008
 80006dc:	4002001c 	.word	0x4002001c
 80006e0:	20000f5c 	.word	0x20000f5c
 80006e4:	50000040 	.word	0x50000040
 80006e8:	200010ac 	.word	0x200010ac
 80006ec:	40020408 	.word	0x40020408
 80006f0:	50000140 	.word	0x50000140
 80006f4:	2000113b 	.word	0x2000113b

080006f8 <adc_callback>:
 * 
 * @param callback Callback function that takes the conversion
 * results as its argument.
 */
void adc_callback(void (*callback)(uint16_t *)) {
  adc_reg_callback = callback;
 80006f8:	4b01      	ldr	r3, [pc, #4]	; (8000700 <adc_callback+0x8>)
 80006fa:	6018      	str	r0, [r3, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000ca0 	.word	0x20000ca0

08000704 <adc_set_fs>:
 * the ADC conversions. The ADC maximum sampling rate is 5 MHz
 * and the minimum for the library is 1.1 kHz
 * 
 * @param fs Sampling rate in Hz.
 */
void adc_set_fs(float fs) {
 8000704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000706:	ee10 4a10 	vmov	r4, s0

  //configure timer
  /* Compute the prescaler value */
  uint16_t PrescalerValue = (uint16_t) ((SystemCoreClock) / 72000000) - 1;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800070a:	a801      	add	r0, sp, #4
 800070c:	f002 ffe6 	bl	80036dc <TIM_TimeBaseStructInit>
 * and the minimum for the library is 1.1 kHz
 * 
 * @param fs Sampling rate in Hz.
 */
void adc_set_fs(float fs) {
  uint16_t num_ticks = (uint16_t) (72000000.0/fs);
 8000710:	4620      	mov	r0, r4
 8000712:	f004 f9c9 	bl	8004aa8 <__aeabi_f2d>
 8000716:	4602      	mov	r2, r0
 8000718:	460b      	mov	r3, r1
 800071a:	a113      	add	r1, pc, #76	; (adr r1, 8000768 <adc_set_fs+0x64>)
 800071c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000720:	f004 fb40 	bl	8004da4 <__aeabi_ddiv>
 8000724:	f004 fc4e 	bl	8004fc4 <__aeabi_d2uiz>
  //configure timer
  /* Compute the prescaler value */
  uint16_t PrescalerValue = (uint16_t) ((SystemCoreClock) / 72000000) - 1;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
  TIM_TimeBaseStructure.TIM_Period = num_ticks-1;
 8000728:	b280      	uxth	r0, r0
 800072a:	3801      	subs	r0, #1
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800072c:	2300      	movs	r3, #0
  //configure timer
  /* Compute the prescaler value */
  uint16_t PrescalerValue = (uint16_t) ((SystemCoreClock) / 72000000) - 1;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
  TIM_TimeBaseStructure.TIM_Period = num_ticks-1;
 800072e:	9002      	str	r0, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x00;
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000730:	a901      	add	r1, sp, #4
 8000732:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  /* Compute the prescaler value */
  uint16_t PrescalerValue = (uint16_t) ((SystemCoreClock) / 72000000) - 1;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
  TIM_TimeBaseStructure.TIM_Period = num_ticks-1;
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8000736:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800073a:	f8ad 300c 	strh.w	r3, [sp, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800073e:	f8ad 3006 	strh.w	r3, [sp, #6]
  TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x00;
 8000742:	f88d 300e 	strb.w	r3, [sp, #14]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000746:	f002 ff71 	bl	800362c <TIM_TimeBaseInit>

  TIM_SelectOutputTrigger(TIM2, TIM_TRGOSource_Update); // ADC_ExternalTrigConv_T2_TRGO
 800074a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800074e:	2120      	movs	r1, #32
 8000750:	f003 fd5e 	bl	8004210 <TIM_SelectOutputTrigger>

  /* Enables the TIM2 counter */
  TIM_Cmd(TIM2, ENABLE);
 8000754:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000758:	2101      	movs	r1, #1
 800075a:	f003 f82f 	bl	80037bc <TIM_Cmd>
}
 800075e:	b004      	add	sp, #16
 8000760:	bd10      	pop	{r4, pc}
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	41912a88 	.word	0x41912a88

08000770 <adc_get_state>:
 * @brief Get the ADC conversion state
 * @return ADC conversion state. The state is represented as a
 * 4 bit value where the LSB is ADC1 and MSB is ADC4
 */
uint8_t adc_get_state() {
  return adc_state;
 8000770:	4b01      	ldr	r3, [pc, #4]	; (8000778 <adc_get_state+0x8>)
 8000772:	7818      	ldrb	r0, [r3, #0]
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	2000113b 	.word	0x2000113b

0800077c <DMA1_Channel1_IRQHandler>:
/**
 * @brief Interrupt Handler for DMA1_CH1 - ADC1 DMA handler
 * @details Moves the results from data_buf1 to the correct
 * location in adc_conversions
 */
void DMA1_Channel1_IRQHandler(void) {
 800077c:	b510      	push	{r4, lr}
  //Test on DMA1 Channel1 Transfer Complete interrupt
  if(DMA_GetITStatus(DMA1_IT_TC1)) {
 800077e:	2002      	movs	r0, #2
 8000780:	f001 fd98 	bl	80022b4 <DMA_GetITStatus>
 8000784:	b338      	cbz	r0, 80007d6 <DMA1_Channel1_IRQHandler+0x5a>
    // status=1;
    //Clear DMA1 interrupt pending bits
    DMA_ClearITPendingBit(DMA1_IT_GL1);
 8000786:	2001      	movs	r0, #1
 8000788:	f001 fda2 	bl	80022d0 <DMA_ClearITPendingBit>
    DMA_ClearITPendingBit(DMA1_IT_TC1);
 800078c:	2002      	movs	r0, #2
 800078e:	f001 fd9f 	bl	80022d0 <DMA_ClearITPendingBit>

    // callback to handle ADC1 results
    for (int k = 0; k < num_chan_adc1; k++) {
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <DMA1_Channel1_IRQHandler+0x5c>)
 8000794:	7818      	ldrb	r0, [r3, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	4283      	cmp	r3, r0
 800079a:	da0c      	bge.n	80007b6 <DMA1_Channel1_IRQHandler+0x3a>
      adc_conversions[adc1_conv_map[k]] = (uint16_t)(data_buf1[k]);
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <DMA1_Channel1_IRQHandler+0x60>)
 800079e:	4910      	ldr	r1, [pc, #64]	; (80007e0 <DMA1_Channel1_IRQHandler+0x64>)
 80007a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80007a8:	4c0e      	ldr	r4, [pc, #56]	; (80007e4 <DMA1_Channel1_IRQHandler+0x68>)
 80007aa:	b292      	uxth	r2, r2
 80007ac:	b289      	uxth	r1, r1
 80007ae:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
    //Clear DMA1 interrupt pending bits
    DMA_ClearITPendingBit(DMA1_IT_GL1);
    DMA_ClearITPendingBit(DMA1_IT_TC1);

    // callback to handle ADC1 results
    for (int k = 0; k < num_chan_adc1; k++) {
 80007b2:	3301      	adds	r3, #1
 80007b4:	e7f0      	b.n	8000798 <DMA1_Channel1_IRQHandler+0x1c>
      adc_conversions[adc1_conv_map[k]] = (uint16_t)(data_buf1[k]);
    }

    adc_state |= 0x1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <DMA1_Channel1_IRQHandler+0x6c>)
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	f042 0201 	orr.w	r2, r2, #1
 80007be:	701a      	strb	r2, [r3, #0]

    // if all ADCs finished trigger callback
    if (adc_state == 0x3) {
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	2a03      	cmp	r2, #3
 80007c4:	d107      	bne.n	80007d6 <DMA1_Channel1_IRQHandler+0x5a>
      adc_state = 0x0;
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
      adc_reg_callback(adc_conversions);
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <DMA1_Channel1_IRQHandler+0x70>)
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <DMA1_Channel1_IRQHandler+0x68>)
 80007ce:	681b      	ldr	r3, [r3, #0]
    }

    // DMA_SetCurrDataCounter(DMA1_Channel1, num_chan_adc1);
  }
  // ADC_StartConversion(ADC1);
}
 80007d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adc_state |= 0x1;

    // if all ADCs finished trigger callback
    if (adc_state == 0x3) {
      adc_state = 0x0;
      adc_reg_callback(adc_conversions);
 80007d4:	4718      	bx	r3
 80007d6:	bd10      	pop	{r4, pc}
 80007d8:	20000ca4 	.word	0x20000ca4
 80007dc:	2000106c 	.word	0x2000106c
 80007e0:	20000f5c 	.word	0x20000f5c
 80007e4:	200010ec 	.word	0x200010ec
 80007e8:	2000113b 	.word	0x2000113b
 80007ec:	20000ca0 	.word	0x20000ca0

080007f0 <DMA2_Channel1_IRQHandler>:
/**
 * @brief Interrupt Handler for DMA2_CH1 - ADC2 DMA handler
 * @details Moves the results from data_buf2 to the correct
 * location in adc_conversions
 */
void DMA2_Channel1_IRQHandler(void) {
 80007f0:	b510      	push	{r4, lr}
  //Test on DMA2 Channel1 Transfer Complete interrupt
  if(DMA_GetITStatus(DMA2_IT_TC1)) {
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <DMA2_Channel1_IRQHandler+0x5c>)
 80007f4:	f001 fd5e 	bl	80022b4 <DMA_GetITStatus>
 80007f8:	b338      	cbz	r0, 800084a <DMA2_Channel1_IRQHandler+0x5a>
    // status=1;
    //Clear DMA2 interrupt pending bits
    DMA_ClearITPendingBit(DMA2_IT_GL1);
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <DMA2_Channel1_IRQHandler+0x60>)
 80007fc:	f001 fd68 	bl	80022d0 <DMA_ClearITPendingBit>
    DMA_ClearITPendingBit(DMA2_IT_TC1);
 8000800:	4812      	ldr	r0, [pc, #72]	; (800084c <DMA2_Channel1_IRQHandler+0x5c>)
 8000802:	f001 fd65 	bl	80022d0 <DMA_ClearITPendingBit>

    // callback to handle ADC2 results
    for (int k = 0; k < num_chan_adc2; k++) {
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <DMA2_Channel1_IRQHandler+0x64>)
 8000808:	7818      	ldrb	r0, [r3, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	4283      	cmp	r3, r0
 800080e:	da0c      	bge.n	800082a <DMA2_Channel1_IRQHandler+0x3a>
      adc_conversions[adc2_conv_map[k]] = (uint16_t)(data_buf2[k]);
 8000810:	4a11      	ldr	r2, [pc, #68]	; (8000858 <DMA2_Channel1_IRQHandler+0x68>)
 8000812:	4912      	ldr	r1, [pc, #72]	; (800085c <DMA2_Channel1_IRQHandler+0x6c>)
 8000814:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000818:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800081c:	4c10      	ldr	r4, [pc, #64]	; (8000860 <DMA2_Channel1_IRQHandler+0x70>)
 800081e:	b292      	uxth	r2, r2
 8000820:	b289      	uxth	r1, r1
 8000822:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
    //Clear DMA2 interrupt pending bits
    DMA_ClearITPendingBit(DMA2_IT_GL1);
    DMA_ClearITPendingBit(DMA2_IT_TC1);

    // callback to handle ADC2 results
    for (int k = 0; k < num_chan_adc2; k++) {
 8000826:	3301      	adds	r3, #1
 8000828:	e7f0      	b.n	800080c <DMA2_Channel1_IRQHandler+0x1c>
      adc_conversions[adc2_conv_map[k]] = (uint16_t)(data_buf2[k]);
    }

    adc_state |= 0x2;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <DMA2_Channel1_IRQHandler+0x74>)
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	f042 0202 	orr.w	r2, r2, #2
 8000832:	701a      	strb	r2, [r3, #0]

    // if all ADCs finished trigger callback
    if (adc_state == 0x3) {
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	2a03      	cmp	r2, #3
 8000838:	d107      	bne.n	800084a <DMA2_Channel1_IRQHandler+0x5a>
      adc_state = 0x0;
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
      adc_reg_callback(adc_conversions);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <DMA2_Channel1_IRQHandler+0x78>)
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <DMA2_Channel1_IRQHandler+0x70>)
 8000842:	681b      	ldr	r3, [r3, #0]
    }

    // DMA_SetCurrDataCounter(DMA2_Channel1, num_chan_adc2);
  }
  // ADC_StartConversion(ADC1);
}
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adc_state |= 0x2;

    // if all ADCs finished trigger callback
    if (adc_state == 0x3) {
      adc_state = 0x0;
      adc_reg_callback(adc_conversions);
 8000848:	4718      	bx	r3
 800084a:	bd10      	pop	{r4, pc}
 800084c:	10000002 	.word	0x10000002
 8000850:	10000001 	.word	0x10000001
 8000854:	20000c9c 	.word	0x20000c9c
 8000858:	20000fc0 	.word	0x20000fc0
 800085c:	200010ac 	.word	0x200010ac
 8000860:	200010ec 	.word	0x200010ec
 8000864:	2000113b 	.word	0x2000113b
 8000868:	20000ca0 	.word	0x20000ca0

0800086c <gpio_init>:
 * @details Initializes all of the STM32 GPIO banks. The
 * method doesn't set them to any particular mode or value.
 * It just makes sure the peripherals are enabled and can
 * be set by later functions.
 */
void gpio_init() {
 800086c:	b508      	push	{r3, lr}
  //enable clocks for GPIO banks
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800086e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000872:	2101      	movs	r1, #1
 8000874:	f002 fcf2 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000878:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800087c:	2101      	movs	r1, #1
 800087e:	f002 fced 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000882:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000886:	2101      	movs	r1, #1
 8000888:	f002 fce8 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800088c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000890:	2101      	movs	r1, #1
 8000892:	f002 fce3 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000896:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800089a:	2101      	movs	r1, #1
 800089c:	f002 fcde 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80008a0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80008a4:	2101      	movs	r1, #1
}
 80008a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80008aa:	f002 bcd7 	b.w	800325c <RCC_AHBPeriphClockCmd>

080008ae <gpio_deinit>:
 * @brief Deinitialize GPIO clocks
 * @details Turns off the clocks to the GPIO banks. This
 * function should only be called if you need to fully disable
 * the GPIO banks.
 */
void gpio_deinit() {
 80008ae:	b508      	push	{r3, lr}
  //disable clocks for GPIO banks
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80008b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008b4:	2100      	movs	r1, #0
 80008b6:	f002 fcd1 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80008ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008be:	2100      	movs	r1, #0
 80008c0:	f002 fccc 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 80008c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80008c8:	2100      	movs	r1, #0
 80008ca:	f002 fcc7 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	2100      	movs	r1, #0
 80008d4:	f002 fcc2 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 80008d8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80008dc:	2100      	movs	r1, #0
 80008de:	f002 fcbd 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80008e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80008e6:	2100      	movs	r1, #0
}
 80008e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80008ec:	f002 bcb6 	b.w	800325c <RCC_AHBPeriphClockCmd>

080008f0 <gpio_setup_pin>:
 * @param pin Specified pin name (i.e. PD1, PA12, etc.)
 * @param dir GPIO_INPUT or GPIO_OUTPUT
 * @param open_drain True sets output to open drain. False to push-pull
 * @param pull_up True enables an internal pull up resistor.
 */
void gpio_setup_pin(GPIOPin pin, int dir, bool open_drain, bool pull_up) {
 80008f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80008f2:	4605      	mov	r5, r0
  //create initialization structure
  GPIO_InitTypeDef GPIO_init;
  GPIO_StructInit(&GPIO_init);
 80008f4:	4668      	mov	r0, sp
 * @param pin Specified pin name (i.e. PD1, PA12, etc.)
 * @param dir GPIO_INPUT or GPIO_OUTPUT
 * @param open_drain True sets output to open drain. False to push-pull
 * @param pull_up True enables an internal pull up resistor.
 */
void gpio_setup_pin(GPIOPin pin, int dir, bool open_drain, bool pull_up) {
 80008f6:	461e      	mov	r6, r3
 80008f8:	460f      	mov	r7, r1
 80008fa:	4614      	mov	r4, r2
  //create initialization structure
  GPIO_InitTypeDef GPIO_init;
  GPIO_StructInit(&GPIO_init);
 80008fc:	f002 f984 	bl	8002c08 <GPIO_StructInit>

  GPIO_init.GPIO_Pin = _ge_pin_num[pin];
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <gpio_setup_pin+0x58>)
 8000902:	f830 3015 	ldrh.w	r3, [r0, r5, lsl #1]
 8000906:	9300      	str	r3, [sp, #0]
  //where the magic happens
  if (dir == GPIO_INPUT) {
 8000908:	b917      	cbnz	r7, 8000910 <gpio_setup_pin+0x20>
    GPIO_init.GPIO_Mode = GPIO_Mode_IN;
 800090a:	f88d 7004 	strb.w	r7, [sp, #4]
 800090e:	e00a      	b.n	8000926 <gpio_setup_pin+0x36>
  } else {
    GPIO_init.GPIO_Mode = GPIO_Mode_OUT;
 8000910:	2301      	movs	r3, #1
    
    //handle output type
    if (open_drain) {
      GPIO_init.GPIO_OType = GPIO_OType_OD;
 8000912:	2c00      	cmp	r4, #0
 8000914:	bf18      	it	ne
 8000916:	461c      	movne	r4, r3
  GPIO_init.GPIO_Pin = _ge_pin_num[pin];
  //where the magic happens
  if (dir == GPIO_INPUT) {
    GPIO_init.GPIO_Mode = GPIO_Mode_IN;
  } else {
    GPIO_init.GPIO_Mode = GPIO_Mode_OUT;
 8000918:	f88d 3004 	strb.w	r3, [sp, #4]
      GPIO_init.GPIO_OType = GPIO_OType_OD;
    } else {
      GPIO_init.GPIO_OType = GPIO_OType_PP;
    }
    
    GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
 800091c:	2303      	movs	r3, #3
  } else {
    GPIO_init.GPIO_Mode = GPIO_Mode_OUT;
    
    //handle output type
    if (open_drain) {
      GPIO_init.GPIO_OType = GPIO_OType_OD;
 800091e:	f88d 4006 	strb.w	r4, [sp, #6]
    } else {
      GPIO_init.GPIO_OType = GPIO_OType_PP;
    }
    
    GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
 8000922:	f88d 3005 	strb.w	r3, [sp, #5]
  }

  //handle optional internal pull up
  if (pull_up) {
 8000926:	b11e      	cbz	r6, 8000930 <gpio_setup_pin+0x40>
    GPIO_init.GPIO_PuPd = GPIO_PuPd_UP;
 8000928:	2301      	movs	r3, #1
 800092a:	f88d 3007 	strb.w	r3, [sp, #7]
 800092e:	e001      	b.n	8000934 <gpio_setup_pin+0x44>
  } else {
    GPIO_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000930:	f88d 6007 	strb.w	r6, [sp, #7]
  }

  GPIO_Init(_ge_pin_port[pin], &GPIO_init);
 8000934:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8000938:	4669      	mov	r1, sp
 800093a:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 800093e:	f002 f905 	bl	8002b4c <GPIO_Init>
}
 8000942:	b003      	add	sp, #12
 8000944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000946:	bf00      	nop
 8000948:	08009ac0 	.word	0x08009ac0

0800094c <gpio_write_pin>:
 * @details Sets the specified pin either high or low
 * 
 * @param pin Pin to write to
 * @param state GPIO_HIGH (1) or GPIO_LOW (0)
 */
void gpio_write_pin(GPIOPin pin, uint8_t state) {
 800094c:	b510      	push	{r4, lr}
  GPIO_WriteBit(_ge_pin_port[pin], _ge_pin_num[pin], state);
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <gpio_write_pin+0x1c>)
 * @details Sets the specified pin either high or low
 * 
 * @param pin Pin to write to
 * @param state GPIO_HIGH (1) or GPIO_LOW (0)
 */
void gpio_write_pin(GPIOPin pin, uint8_t state) {
 8000950:	4604      	mov	r4, r0
 8000952:	460a      	mov	r2, r1
  GPIO_WriteBit(_ge_pin_port[pin], _ge_pin_num[pin], state);
 8000954:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8000958:	f8d1 00b0 	ldr.w	r0, [r1, #176]	; 0xb0
 800095c:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
}
 8000960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * 
 * @param pin Pin to write to
 * @param state GPIO_HIGH (1) or GPIO_LOW (0)
 */
void gpio_write_pin(GPIOPin pin, uint8_t state) {
  GPIO_WriteBit(_ge_pin_port[pin], _ge_pin_num[pin], state);
 8000964:	f002 b97a 	b.w	8002c5c <GPIO_WriteBit>
 8000968:	08009ac0 	.word	0x08009ac0

0800096c <gpio_read_pin>:
 * 
 * @param pin Pin to read from
 * @return Bit value of pin
 */
uint8_t gpio_read_pin(GPIOPin pin) {
  return GPIO_ReadInputDataBit(_ge_pin_port[pin], _ge_pin_num[pin]);
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <gpio_read_pin+0x14>)
 * @details Read data bit on specified GPIO pin
 * 
 * @param pin Pin to read from
 * @return Bit value of pin
 */
uint8_t gpio_read_pin(GPIOPin pin) {
 800096e:	4602      	mov	r2, r0
  return GPIO_ReadInputDataBit(_ge_pin_port[pin], _ge_pin_num[pin]);
 8000970:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8000974:	f8d1 00b0 	ldr.w	r0, [r1, #176]	; 0xb0
 8000978:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800097c:	f002 b956 	b.w	8002c2c <GPIO_ReadInputDataBit>
 8000980:	08009ac0 	.word	0x08009ac0

08000984 <lcd_init>:
/**
 * @brief Initializes the LCD
 * @details Initializes necessary IO and sets up the display
 */
void lcd_init(void) {
  HD44780_Init();
 8000984:	f000 bb5b 	b.w	800103e <HD44780_Init>

08000988 <lcd_putc>:
 * @details Place a character on the LCD at the current position
 * 
 * @param char Character to display
 */
void lcd_putc(unsigned char c) {
  HD44780_PutChar(c);
 8000988:	f000 bbb0 	b.w	80010ec <HD44780_PutChar>

0800098c <lcd_goto>:
 * 
 * @param x X position
 * @param y Y position
 */
void lcd_goto(uint8_t x, uint8_t y) {
  HD44780_GotoXY((unsigned char) x, (unsigned char) y);
 800098c:	f000 bbb0 	b.w	80010f0 <HD44780_GotoXY>

08000990 <lcd_puts>:
 * position
 * 
 * @param str String to print
 */
void lcd_puts(char *str) {
  HD44780_PutStr(str);
 8000990:	f000 bbbc 	b.w	800110c <HD44780_PutStr>

08000994 <lcd_clear>:
/**
 * @brief Clear the display
 * @details Clear the LCD display
 */
void lcd_clear(void) {
  HD44780_ClrScr();
 8000994:	f000 bbcb 	b.w	800112e <HD44780_ClrScr>

08000998 <ge_init>:
/**
 * @brief Initialize dependancies for libraries
 * @details Initializes the SysTick timer for generating delays.
 * Must be called before using delay_ms.
 */
void ge_init() {
 8000998:	b500      	push	{lr}
 800099a:	b091      	sub	sp, #68	; 0x44
  //Initialize SysTick for delays
  RCC_ClocksTypeDef RCC_clocks;
  RCC_GetClocksFreq(&RCC_clocks);
 800099c:	a801      	add	r0, sp, #4
 800099e:	f002 fa99 	bl	8002ed4 <RCC_GetClocksFreq>
  SysTick_Config(RCC_clocks.HCLK_Frequency / GE_TICKS_S);
 80009a2:	9b02      	ldr	r3, [sp, #8]
 80009a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a8:	fbb3 f3f2 	udiv	r3, r3, r2
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <ge_init+0x54>)
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <ge_init+0x58>)
 80009b4:	21f0      	movs	r1, #240	; 0xf0
 80009b6:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80009ba:	2300      	movs	r3, #0
 80009bc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	2307      	movs	r3, #7
 80009c0:	6013      	str	r3, [r2, #0]

  // initialize GPIO
  gpio_init();
 80009c2:	f7ff ff53 	bl	800086c <gpio_init>

  // initialize ADC library
  adc_init();
 80009c6:	f7ff fc45 	bl	8000254 <adc_init>

  // initialize USART library
  ge_uart_init(115200);
 80009ca:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80009ce:	f000 f997 	bl	8000d00 <ge_uart_init>

  // initialize timer library
  timer_init();
 80009d2:	f000 f82b 	bl	8000a2c <timer_init>

  // initialize pwm library
  pwm_init();
 80009d6:	f000 fcf7 	bl	80013c8 <pwm_init>

  // initialize lcd library
  lcd_init();
 80009da:	f7ff ffd3 	bl	8000984 <lcd_init>

  // initialize EEPROM
  eeprom_init();
 80009de:	f000 fbea 	bl	80011b6 <eeprom_init>

  // initialize ICP library
  ic_int_init();
 80009e2:	f000 fbf5 	bl	80011d0 <ic_int_init>
}
 80009e6:	b011      	add	sp, #68	; 0x44
 80009e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ec:	e000e010 	.word	0xe000e010
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <delay_ms>:
 * @details Sets a counter that is decremented every SysTick
 * and blocks until fully decremented.
 * 
 * @param uint32_t How long in ms to delay.
 */
void delay_ms(__IO uint32_t ms) {
 80009f4:	b082      	sub	sp, #8
  _ge_delay_time = ms;
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <delay_ms+0x14>)
 * @details Sets a counter that is decremented every SysTick
 * and blocks until fully decremented.
 * 
 * @param uint32_t How long in ms to delay.
 */
void delay_ms(__IO uint32_t ms) {
 80009f8:	9001      	str	r0, [sp, #4]
  _ge_delay_time = ms;
 80009fa:	9a01      	ldr	r2, [sp, #4]
 80009fc:	601a      	str	r2, [r3, #0]

  while (_ge_delay_time != 0);
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d1fc      	bne.n	80009fe <delay_ms+0xa>
}
 8000a04:	b002      	add	sp, #8
 8000a06:	4770      	bx	lr
 8000a08:	200009b0 	.word	0x200009b0

08000a0c <SysTick_Handler>:
/**
 * @brief Interrupt handler for the SysTick
 * @details Interrupt handler for the SysTick
 */
void SysTick_Handler(void) {
  if (_ge_delay_time != 0)
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Handler+0x18>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	b112      	cbz	r2, 8000a18 <SysTick_Handler+0xc>
    _ge_delay_time--;
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	3a01      	subs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]

  _ge_usb_timeout--;
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <SysTick_Handler+0x1c>)
 8000a1a:	6813      	ldr	r3, [r2, #0]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200009b0 	.word	0x200009b0
 8000a28:	200000ec 	.word	0x200000ec

08000a2c <timer_init>:
 * @brief Initialize TIM3 to use for timing interrupts
 * @details Sets up TIM3 to use the appropriate time base and
 * set up the appropriate interrupts.
 * @return 0 on success, -1 on failure
 */
int timer_init() {
 8000a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _ge_tim_max_counter = 0;
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <timer_init+0x78>)
  _ge_tim_num_timers = 0;
  _ge_tim_count = 0;
  _ge_tim_period = _GE_TIM_PERIOD;
 8000a30:	491d      	ldr	r1, [pc, #116]	; (8000aa8 <timer_init+0x7c>)
 * @details Sets up TIM3 to use the appropriate time base and
 * set up the appropriate interrupts.
 * @return 0 on success, -1 on failure
 */
int timer_init() {
  _ge_tim_max_counter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	6013      	str	r3, [r2, #0]
  _ge_tim_num_timers = 0;
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <timer_init+0x80>)
 8000a38:	6013      	str	r3, [r2, #0]
  _ge_tim_count = 0;
 8000a3a:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <timer_init+0x84>)
 8000a3c:	6013      	str	r3, [r2, #0]
  _ge_tim_period = _GE_TIM_PERIOD;
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <timer_init+0x88>)
 8000a40:	6011      	str	r1, [r2, #0]

  //initialize arrays
  for (int i = 0; i < _GE_MAX_TIMERS; i++) {
    _ge_tim_periods[i] = 0;
 8000a42:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <timer_init+0x8c>)
 8000a44:	2500      	movs	r5, #0
 8000a46:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    _ge_tim_callbacks[i] = NULL;
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <timer_init+0x90>)
 8000a4c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    _ge_tim_type[i] = GE_PERIODIC;
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <timer_init+0x94>)
 8000a52:	2401      	movs	r4, #1
 8000a54:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    _ge_tim_offsets[i] = 0;
 8000a58:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <timer_init+0x98>)
 8000a5a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    _ge_tim_state[i] = false;
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <timer_init+0x9c>)
 8000a60:	54d5      	strb	r5, [r2, r3]
  _ge_tim_num_timers = 0;
  _ge_tim_count = 0;
  _ge_tim_period = _GE_TIM_PERIOD;

  //initialize arrays
  for (int i = 0; i < _GE_MAX_TIMERS; i++) {
 8000a62:	4423      	add	r3, r4
 8000a64:	2b10      	cmp	r3, #16
 8000a66:	d1ec      	bne.n	8000a42 <timer_init+0x16>
    _ge_tim_offsets[i] = 0;
    _ge_tim_state[i] = false;
  }

  //enable TIM3
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000a68:	4621      	mov	r1, r4
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f002 fc0e 	bl	800328c <RCC_APB1PeriphClockCmd>

  //setup interrupt
  //enable timer update interrupt
  TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8000a70:	4621      	mov	r1, r4
 8000a72:	4622      	mov	r2, r4
 8000a74:	4815      	ldr	r0, [pc, #84]	; (8000acc <timer_init+0xa0>)
 8000a76:	f003 fb11 	bl	800409c <TIM_ITConfig>

  NVIC_InitTypeDef NVIC_init_struct;
  NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
 8000a7a:	231d      	movs	r3, #29
 8000a7c:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0f;
  NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0f;
  NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_init_struct);
 8000a80:	a801      	add	r0, sp, #4
  //enable timer update interrupt
  TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);

  NVIC_InitTypeDef NVIC_init_struct;
  NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
  NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0f;
 8000a82:	230f      	movs	r3, #15
 8000a84:	f88d 3006 	strb.w	r3, [sp, #6]
  NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0f;
 8000a88:	f88d 3005 	strb.w	r3, [sp, #5]
  NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8000a8c:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_init_struct);
 8000a90:	f002 f90a 	bl	8002ca8 <NVIC_Init>

  //enable counter
  TIM_Cmd(TIM3, ENABLE);
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <timer_init+0xa0>)
 8000a96:	4621      	mov	r1, r4
 8000a98:	f002 fe90 	bl	80037bc <TIM_Cmd>

  return 0;
}
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	b003      	add	sp, #12
 8000aa0:	bd30      	pop	{r4, r5, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200011c0 	.word	0x200011c0
 8000aa8:	00011940 	.word	0x00011940
 8000aac:	200011c4 	.word	0x200011c4
 8000ab0:	200011c8 	.word	0x200011c8
 8000ab4:	2000117c 	.word	0x2000117c
 8000ab8:	2000113c 	.word	0x2000113c
 8000abc:	20001180 	.word	0x20001180
 8000ac0:	200011cc 	.word	0x200011cc
 8000ac4:	2000121c 	.word	0x2000121c
 8000ac8:	2000120c 	.word	0x2000120c
 8000acc:	40000400 	.word	0x40000400

08000ad0 <timer_deinit>:
 * function will stop all the timer callbacks from functioning
 * and only should be called if you are using TIM3 for something
 * else.
 * @return 0 on success
 */
int timer_deinit() {
 8000ad0:	b510      	push	{r4, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <timer_deinit+0x2c>)
  NVIC_DisableIRQ(TIM3_IRQn);
  TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE);
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <timer_deinit+0x30>)
 8000ad6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000ade:	4620      	mov	r0, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f003 fada 	bl	800409c <TIM_ITConfig>
  TIM_Cmd(TIM3, DISABLE);
 8000ae8:	4620      	mov	r0, r4
 8000aea:	2100      	movs	r1, #0
 8000aec:	f002 fe66 	bl	80037bc <TIM_Cmd>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);
 8000af0:	2002      	movs	r0, #2
 8000af2:	2100      	movs	r1, #0
 8000af4:	f002 fbca 	bl	800328c <RCC_APB1PeriphClockCmd>

  return 0;
}
 8000af8:	2000      	movs	r0, #0
 8000afa:	bd10      	pop	{r4, pc}
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	40000400 	.word	0x40000400

08000b04 <timer_register>:
 * @param type SINGLE_SHOT or PERIODIC
 * @return Timer ID of associate timer or error code.
 */
timer_id_t timer_register(uint32_t period, void (*function)(void), uint8_t type) {
  //check if there are less than the max number of timers registered
  if (_ge_tim_num_timers == _GE_MAX_TIMERS)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <timer_register+0x4c>)
 * @param ms Period in milliseconds (int)
 * @param function Callback function
 * @param type SINGLE_SHOT or PERIODIC
 * @return Timer ID of associate timer or error code.
 */
timer_id_t timer_register(uint32_t period, void (*function)(void), uint8_t type) {
 8000b06:	b530      	push	{r4, r5, lr}
  //check if there are less than the max number of timers registered
  if (_ge_tim_num_timers == _GE_MAX_TIMERS)
 8000b08:	681c      	ldr	r4, [r3, #0]
 8000b0a:	2c10      	cmp	r4, #16
 8000b0c:	d102      	bne.n	8000b14 <timer_register+0x10>
    return _GE_TIM_ERROR;
 8000b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b12:	bd30      	pop	{r4, r5, pc}

  //if there is a free timer spot place in the first open spot
  _ge_tim_num_timers++;
 8000b14:	681c      	ldr	r4, [r3, #0]
 8000b16:	3401      	adds	r4, #1
 8000b18:	601c      	str	r4, [r3, #0]
  for (int i = 0; i < _GE_MAX_TIMERS; i++) {
 8000b1a:	2300      	movs	r3, #0
    if (_ge_tim_periods[i] == 0) {
 8000b1c:	4d0d      	ldr	r5, [pc, #52]	; (8000b54 <timer_register+0x50>)
 8000b1e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8000b22:	b984      	cbnz	r4, 8000b46 <timer_register+0x42>
      _ge_tim_periods[i] = period;
 8000b24:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
      _ge_tim_callbacks[i] = function;
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <timer_register+0x54>)
 8000b2a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
      _ge_tim_type[i] = type;
 8000b2e:	490b      	ldr	r1, [pc, #44]	; (8000b5c <timer_register+0x58>)
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      _ge_tim_offsets[i] = _ge_tim_count;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <timer_register+0x5c>)
 8000b36:	6811      	ldr	r1, [r2, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <timer_register+0x60>)
 8000b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      _ge_tim_state[i] = false;
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <timer_register+0x64>)

      return i; //return timer id
 8000b40:	4618      	mov	r0, r3
    if (_ge_tim_periods[i] == 0) {
      _ge_tim_periods[i] = period;
      _ge_tim_callbacks[i] = function;
      _ge_tim_type[i] = type;
      _ge_tim_offsets[i] = _ge_tim_count;
      _ge_tim_state[i] = false;
 8000b42:	54d4      	strb	r4, [r2, r3]

      return i; //return timer id
 8000b44:	bd30      	pop	{r4, r5, pc}
  if (_ge_tim_num_timers == _GE_MAX_TIMERS)
    return _GE_TIM_ERROR;

  //if there is a free timer spot place in the first open spot
  _ge_tim_num_timers++;
  for (int i = 0; i < _GE_MAX_TIMERS; i++) {
 8000b46:	3301      	adds	r3, #1
 8000b48:	2b10      	cmp	r3, #16
 8000b4a:	d1e7      	bne.n	8000b1c <timer_register+0x18>
 8000b4c:	e7df      	b.n	8000b0e <timer_register+0xa>
 8000b4e:	bf00      	nop
 8000b50:	200011c4 	.word	0x200011c4
 8000b54:	2000113c 	.word	0x2000113c
 8000b58:	20001180 	.word	0x20001180
 8000b5c:	200011cc 	.word	0x200011cc
 8000b60:	200011c8 	.word	0x200011c8
 8000b64:	2000121c 	.word	0x2000121c
 8000b68:	2000120c 	.word	0x2000120c

08000b6c <timer_start>:
 * 
 * @param timer ID of the timer to start
 * @return 0 on success
 */
int timer_start(timer_id_t timer) {
  _ge_tim_state[timer] = true;
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <timer_start+0x14>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	541a      	strb	r2, [r3, r0]
  _ge_tim_offsets[timer] = _ge_tim_count;
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <timer_start+0x18>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <timer_start+0x1c>)
 8000b78:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

  return 0;
}
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	4770      	bx	lr
 8000b80:	2000120c 	.word	0x2000120c
 8000b84:	200011c8 	.word	0x200011c8
 8000b88:	2000121c 	.word	0x2000121c

08000b8c <timer_stop>:
 * 
 * @param timer ID of the timer to stop and remove
 * @return 0 on success
 */
int timer_stop(timer_id_t timer) {
  _ge_tim_state[timer] = false;
 8000b8c:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <timer_stop+0x24>)
  _ge_tim_offsets[timer] = 0;
  _ge_tim_periods[timer] = 0;
  _ge_tim_callbacks[timer] = NULL;
  _ge_tim_num_timers--;
 8000b8e:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <timer_stop+0x28>)
 * 
 * @param timer ID of the timer to stop and remove
 * @return 0 on success
 */
int timer_stop(timer_id_t timer) {
  _ge_tim_state[timer] = false;
 8000b90:	2300      	movs	r3, #0
 8000b92:	5413      	strb	r3, [r2, r0]
  _ge_tim_offsets[timer] = 0;
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <timer_stop+0x2c>)
 8000b96:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  _ge_tim_periods[timer] = 0;
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <timer_stop+0x30>)
 8000b9c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  _ge_tim_callbacks[timer] = NULL;
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <timer_stop+0x34>)
 8000ba2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  _ge_tim_num_timers--;
 8000ba6:	680a      	ldr	r2, [r1, #0]
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	600a      	str	r2, [r1, #0]

  return 0;
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	4770      	bx	lr
 8000bb0:	2000120c 	.word	0x2000120c
 8000bb4:	200011c4 	.word	0x200011c4
 8000bb8:	2000121c 	.word	0x2000121c
 8000bbc:	2000113c 	.word	0x2000113c
 8000bc0:	20001180 	.word	0x20001180

08000bc4 <timer_set_period>:
 * 
 * @param timer timer ID of the timer to modify
 * @param period new period of the timer (in counts)
 */
void timer_set_period(timer_id_t timer, uint32_t period) {
  _ge_tim_periods[timer] = period;
 8000bc4:	4b01      	ldr	r3, [pc, #4]	; (8000bcc <timer_set_period+0x8>)
 8000bc6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000bca:	4770      	bx	lr
 8000bcc:	2000113c 	.word	0x2000113c

08000bd0 <timer_set_timestep>:
 * @details Sets the minimum timestep for the timers. This is referenced to
 * 72 MHz
 * 
 * @param counts Number of clock counts per period
 */
void timer_set_timestep(uint32_t counts) {
 8000bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  _ge_tim_period = counts;
 8000bd2:	4c14      	ldr	r4, [pc, #80]	; (8000c24 <timer_set_timestep+0x54>)
 8000bd4:	6020      	str	r0, [r4, #0]

  //setup TIM3
  TIM_TimeBaseInitTypeDef TIM3_base;
  TIM_TimeBaseStructInit(&TIM3_base);
 8000bd6:	a801      	add	r0, sp, #4
 8000bd8:	f002 fd80 	bl	80036dc <TIM_TimeBaseStructInit>
  if (_ge_tim_period <= 65535) {
 8000bdc:	6823      	ldr	r3, [r4, #0]
    TIM3_base.TIM_Period = (_ge_tim_period/(presc + 1)) - 1;
  }
  TIM3_base.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM3_base.TIM_CounterMode = TIM_CounterMode_Up;
  TIM3_base.TIM_RepetitionCounter = 0x00;
  TIM_TimeBaseInit(TIM3, &TIM3_base);
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <timer_set_timestep+0x58>)
  _ge_tim_period = counts;

  //setup TIM3
  TIM_TimeBaseInitTypeDef TIM3_base;
  TIM_TimeBaseStructInit(&TIM3_base);
  if (_ge_tim_period <= 65535) {
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    TIM3_base.TIM_Period = _ge_tim_period - 1;
 8000be4:	6823      	ldr	r3, [r4, #0]
    TIM3_base.TIM_Prescaler = 0;
  } else {
    // we want the minimum number of counts to accurately get the correct period
    uint16_t presc = (_ge_tim_period >> 16);
    TIM3_base.TIM_Prescaler = presc;
    TIM3_base.TIM_Period = (_ge_tim_period/(presc + 1)) - 1;
 8000be6:	bf25      	ittet	cs
 8000be8:	6822      	ldrcs	r2, [r4, #0]
  if (_ge_tim_period <= 65535) {
    TIM3_base.TIM_Period = _ge_tim_period - 1;
    TIM3_base.TIM_Prescaler = 0;
  } else {
    // we want the minimum number of counts to accurately get the correct period
    uint16_t presc = (_ge_tim_period >> 16);
 8000bea:	0c1b      	lsrcs	r3, r3, #16

  //setup TIM3
  TIM_TimeBaseInitTypeDef TIM3_base;
  TIM_TimeBaseStructInit(&TIM3_base);
  if (_ge_tim_period <= 65535) {
    TIM3_base.TIM_Period = _ge_tim_period - 1;
 8000bec:	f103 33ff 	addcc.w	r3, r3, #4294967295
    TIM3_base.TIM_Prescaler = 0;
  } else {
    // we want the minimum number of counts to accurately get the correct period
    uint16_t presc = (_ge_tim_period >> 16);
 8000bf0:	f8ad 3004 	strhcs.w	r3, [sp, #4]
    TIM3_base.TIM_Prescaler = presc;
    TIM3_base.TIM_Period = (_ge_tim_period/(presc + 1)) - 1;
 8000bf4:	bf2b      	itete	cs
 8000bf6:	3301      	addcs	r3, #1

  //setup TIM3
  TIM_TimeBaseInitTypeDef TIM3_base;
  TIM_TimeBaseStructInit(&TIM3_base);
  if (_ge_tim_period <= 65535) {
    TIM3_base.TIM_Period = _ge_tim_period - 1;
 8000bf8:	9302      	strcc	r3, [sp, #8]
    TIM3_base.TIM_Prescaler = 0;
  } else {
    // we want the minimum number of counts to accurately get the correct period
    uint16_t presc = (_ge_tim_period >> 16);
    TIM3_base.TIM_Prescaler = presc;
    TIM3_base.TIM_Period = (_ge_tim_period/(presc + 1)) - 1;
 8000bfa:	fbb2 f3f3 	udivcs	r3, r2, r3
  //setup TIM3
  TIM_TimeBaseInitTypeDef TIM3_base;
  TIM_TimeBaseStructInit(&TIM3_base);
  if (_ge_tim_period <= 65535) {
    TIM3_base.TIM_Period = _ge_tim_period - 1;
    TIM3_base.TIM_Prescaler = 0;
 8000bfe:	2300      	movcc	r3, #0
  } else {
    // we want the minimum number of counts to accurately get the correct period
    uint16_t presc = (_ge_tim_period >> 16);
    TIM3_base.TIM_Prescaler = presc;
    TIM3_base.TIM_Period = (_ge_tim_period/(presc + 1)) - 1;
 8000c00:	bf2a      	itet	cs
 8000c02:	f103 33ff 	addcs.w	r3, r3, #4294967295
  //setup TIM3
  TIM_TimeBaseInitTypeDef TIM3_base;
  TIM_TimeBaseStructInit(&TIM3_base);
  if (_ge_tim_period <= 65535) {
    TIM3_base.TIM_Period = _ge_tim_period - 1;
    TIM3_base.TIM_Prescaler = 0;
 8000c06:	f8ad 3004 	strhcc.w	r3, [sp, #4]
  } else {
    // we want the minimum number of counts to accurately get the correct period
    uint16_t presc = (_ge_tim_period >> 16);
    TIM3_base.TIM_Prescaler = presc;
    TIM3_base.TIM_Period = (_ge_tim_period/(presc + 1)) - 1;
 8000c0a:	9302      	strcs	r3, [sp, #8]
  }
  TIM3_base.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM3_base.TIM_CounterMode = TIM_CounterMode_Up;
  TIM3_base.TIM_RepetitionCounter = 0x00;
  TIM_TimeBaseInit(TIM3, &TIM3_base);
 8000c0c:	a901      	add	r1, sp, #4
    // we want the minimum number of counts to accurately get the correct period
    uint16_t presc = (_ge_tim_period >> 16);
    TIM3_base.TIM_Prescaler = presc;
    TIM3_base.TIM_Period = (_ge_tim_period/(presc + 1)) - 1;
  }
  TIM3_base.TIM_ClockDivision = TIM_CKD_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8ad 300c 	strh.w	r3, [sp, #12]
  TIM3_base.TIM_CounterMode = TIM_CounterMode_Up;
 8000c14:	f8ad 3006 	strh.w	r3, [sp, #6]
  TIM3_base.TIM_RepetitionCounter = 0x00;
 8000c18:	f88d 300e 	strb.w	r3, [sp, #14]
  TIM_TimeBaseInit(TIM3, &TIM3_base);
 8000c1c:	f002 fd06 	bl	800362c <TIM_TimeBaseInit>
}
 8000c20:	b004      	add	sp, #16
 8000c22:	bd10      	pop	{r4, pc}
 8000c24:	2000117c 	.word	0x2000117c
 8000c28:	40000400 	.word	0x40000400

08000c2c <timer_get_timestep>:
 * @brief Get the period of the timer
 * @details Get the number of clock pulses per timing unit
 * @return The period of the timer (relative to 72MHz)
 */
uint32_t timer_get_timestep() {
  return _ge_tim_period;
 8000c2c:	4b01      	ldr	r3, [pc, #4]	; (8000c34 <timer_get_timestep+0x8>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	2000117c 	.word	0x2000117c

08000c38 <TIM3_IRQHandler>:
 * @brief Handler for global TIM3 update interrupt
 * @details Interrupt handler for TIM3 update interrupt. This
 * function updates the current interrupt counter and checks
 * whether a timer function should be called.
 */
void TIM3_IRQHandler() {
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) {
 8000c3c:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <TIM3_IRQHandler+0xa8>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	f003 fa44 	bl	80040cc <TIM_GetITStatus>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d048      	beq.n	8000cda <TIM3_IRQHandler+0xa2>
    TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8000c48:	4825      	ldr	r0, [pc, #148]	; (8000ce0 <TIM3_IRQHandler+0xa8>)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	f003 fa48 	bl	80040e0 <TIM_ClearITPendingBit>

    if (_ge_tim_num_timers != 0) {
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <TIM3_IRQHandler+0xac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d040      	beq.n	8000cda <TIM3_IRQHandler+0xa2>

      //check if should call one of the registered callbacks
      _ge_tim_count++;
 8000c58:	4d23      	ldr	r5, [pc, #140]	; (8000ce8 <TIM3_IRQHandler+0xb0>)
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	602b      	str	r3, [r5, #0]
      for (int i = 0; i < _GE_MAX_TIMERS; i++) {
 8000c60:	2400      	movs	r4, #0
        if (_ge_tim_state[i] 
 8000c62:	f8df a090 	ldr.w	sl, [pc, #144]	; 8000cf4 <TIM3_IRQHandler+0xbc>
 8000c66:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8000c6a:	b39b      	cbz	r3, 8000cd4 <TIM3_IRQHandler+0x9c>
            && _ge_tim_periods[i] != 0 
 8000c6c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8000cf8 <TIM3_IRQHandler+0xc0>
 8000c70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8000c74:	b373      	cbz	r3, 8000cd4 <TIM3_IRQHandler+0x9c>
            && (((int64_t)_ge_tim_count - _ge_tim_offsets[i]) % _ge_tim_periods[i]) == 0
 8000c76:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000cfc <TIM3_IRQHandler+0xc4>
 8000c7a:	6828      	ldr	r0, [r5, #0]
 8000c7c:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 8000c80:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8000c84:	1ac0      	subs	r0, r0, r3
 8000c86:	f04f 0100 	mov.w	r1, #0
 8000c8a:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f004 fa08 	bl	80050a4 <__aeabi_ldivmod>
 8000c94:	4313      	orrs	r3, r2
 8000c96:	d11d      	bne.n	8000cd4 <TIM3_IRQHandler+0x9c>
            && ((int64_t)_ge_tim_count - _ge_tim_offsets[i]) != 0) {
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <TIM3_IRQHandler+0xb0>)
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	17d3      	asrs	r3, r2, #31
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	bf08      	it	eq
 8000ca8:	4290      	cmpeq	r0, r2
 8000caa:	d013      	beq.n	8000cd4 <TIM3_IRQHandler+0x9c>
          //check if single shot
          if (_ge_tim_type[i] == GE_SINGLESHOT) {
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <TIM3_IRQHandler+0xb4>)
 8000cae:	4f10      	ldr	r7, [pc, #64]	; (8000cf0 <TIM3_IRQHandler+0xb8>)
 8000cb0:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8000cb4:	b95e      	cbnz	r6, 8000cce <TIM3_IRQHandler+0x96>
            _ge_tim_state[i] = false;
 8000cb6:	f80a 6004 	strb.w	r6, [sl, r4]
            _ge_tim_offsets[i] = 0;
            _ge_tim_periods[i] = 0;

            (*_ge_tim_callbacks[i])(); //call appropriate callback
 8000cba:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
            && (((int64_t)_ge_tim_count - _ge_tim_offsets[i]) % _ge_tim_periods[i]) == 0
            && ((int64_t)_ge_tim_count - _ge_tim_offsets[i]) != 0) {
          //check if single shot
          if (_ge_tim_type[i] == GE_SINGLESHOT) {
            _ge_tim_state[i] = false;
            _ge_tim_offsets[i] = 0;
 8000cbe:	f849 6024 	str.w	r6, [r9, r4, lsl #2]
            _ge_tim_periods[i] = 0;
 8000cc2:	f848 6024 	str.w	r6, [r8, r4, lsl #2]

            (*_ge_tim_callbacks[i])(); //call appropriate callback
 8000cc6:	4798      	blx	r3

            _ge_tim_callbacks[i] = NULL;
 8000cc8:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
 8000ccc:	e002      	b.n	8000cd4 <TIM3_IRQHandler+0x9c>
          } else {
            (*_ge_tim_callbacks[i])(); //call appropriate callback        
 8000cce:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8000cd2:	4798      	blx	r3

    if (_ge_tim_num_timers != 0) {

      //check if should call one of the registered callbacks
      _ge_tim_count++;
      for (int i = 0; i < _GE_MAX_TIMERS; i++) {
 8000cd4:	3401      	adds	r4, #1
 8000cd6:	2c10      	cmp	r4, #16
 8000cd8:	d1c3      	bne.n	8000c62 <TIM3_IRQHandler+0x2a>
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	bf00      	nop
 8000ce0:	40000400 	.word	0x40000400
 8000ce4:	200011c4 	.word	0x200011c4
 8000ce8:	200011c8 	.word	0x200011c8
 8000cec:	200011cc 	.word	0x200011cc
 8000cf0:	20001180 	.word	0x20001180
 8000cf4:	2000120c 	.word	0x2000120c
 8000cf8:	2000113c 	.word	0x2000113c
 8000cfc:	2000121c 	.word	0x2000121c

08000d00 <ge_uart_init>:
 * initialization as well as the necessary GPIO init structures
 * and interrupts.
 * 
 * @param baud Baud rate for serial communication
 */
void ge_uart_init(uint32_t baud) {
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	4606      	mov	r6, r0
 8000d04:	b08e      	sub	sp, #56	; 0x38
  #ifdef BUFFERED
  // initialize circular FIFO buffers
  BufferInit(&U1Rx);
 8000d06:	4830      	ldr	r0, [pc, #192]	; (8000dc8 <ge_uart_init+0xc8>)
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d08:	4d30      	ldr	r5, [pc, #192]	; (8000dcc <ge_uart_init+0xcc>)
 * @param baud Baud rate for serial communication
 */
void ge_uart_init(uint32_t baud) {
  #ifdef BUFFERED
  // initialize circular FIFO buffers
  BufferInit(&U1Rx);
 8000d0a:	f000 fa13 	bl	8001134 <BufferInit>
  BufferInit(&U1Tx);
 8000d0e:	4830      	ldr	r0, [pc, #192]	; (8000dd0 <ge_uart_init+0xd0>)
 8000d10:	f000 fa10 	bl	8001134 <BufferInit>
  GPIO_InitTypeDef GPIO_InitStructure;
  USART_InitTypeDef USART_InitStructure;

  USART_ClockInitTypeDef USART_ClockInitStructure;
  //enable bus clocks
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000d14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d18:	2101      	movs	r1, #1
 8000d1a:	f002 fa9f 	bl	800325c <RCC_AHBPeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d22:	2101      	movs	r1, #1
 8000d24:	f002 faa6 	bl	8003274 <RCC_APB2PeriphClockCmd>

  // Initialize GPIO
  //Set USART1 Tx (PC.4) as AF push-pull
  //Set USART1 Rx (PC.5) as input floating
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8000d28:	2330      	movs	r3, #48	; 0x30
 8000d2a:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000d2c:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d2e:	2400      	movs	r4, #0

  // Initialize GPIO
  //Set USART1 Tx (PC.4) as AF push-pull
  //Set USART1 Rx (PC.5) as input floating
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000d30:	f88d 300c 	strb.w	r3, [sp, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d34:	4628      	mov	r0, r5
  //Set USART1 Tx (PC.4) as AF push-pull
  //Set USART1 Rx (PC.5) as input floating
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d36:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d38:	a902      	add	r1, sp, #8
  //Set USART1 Tx (PC.4) as AF push-pull
  //Set USART1 Rx (PC.5) as input floating
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d3a:	f88d 300d 	strb.w	r3, [sp, #13]
  // Initialize GPIO
  //Set USART1 Tx (PC.4) as AF push-pull
  //Set USART1 Rx (PC.5) as input floating
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d3e:	f88d 400e 	strb.w	r4, [sp, #14]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d42:	f88d 400f 	strb.w	r4, [sp, #15]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d46:	f001 ff01 	bl	8002b4c <GPIO_Init>

  // set alternate functions
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource4, GPIO_AF_7);
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	2207      	movs	r2, #7
 8000d50:	f001 ff8c 	bl	8002c6c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource5, GPIO_AF_7);
 8000d54:	2207      	movs	r2, #7
 8000d56:	2105      	movs	r1, #5
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f001 ff87 	bl	8002c6c <GPIO_PinAFConfig>
  
  // Initialize USART1
  USART_StructInit(&USART_InitStructure);
  USART_ClockStructInit(&USART_ClockInitStructure);
  USART_ClockInit(USART1, &USART_ClockInitStructure);
 8000d5e:	4d1d      	ldr	r5, [pc, #116]	; (8000dd4 <ge_uart_init+0xd4>)
  // set alternate functions
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource4, GPIO_AF_7);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource5, GPIO_AF_7);
  
  // Initialize USART1
  USART_StructInit(&USART_InitStructure);
 8000d60:	a808      	add	r0, sp, #32
 8000d62:	f003 fb67 	bl	8004434 <USART_StructInit>
  USART_ClockStructInit(&USART_ClockInitStructure);
 8000d66:	a804      	add	r0, sp, #16
 8000d68:	f003 fb80 	bl	800446c <USART_ClockStructInit>
  USART_ClockInit(USART1, &USART_ClockInitStructure);
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	a904      	add	r1, sp, #16
 8000d70:	f003 fb6c 	bl	800444c <USART_ClockInit>
  
  USART_InitStructure.USART_BaudRate = baud;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No ;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000d74:	230c      	movs	r3, #12
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;

  //Write USART1 parameters
  USART_Init(USART1, &USART_InitStructure);
 8000d76:	4628      	mov	r0, r5
 8000d78:	a908      	add	r1, sp, #32
  
  USART_InitStructure.USART_BaudRate = baud;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No ;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000d7a:	930c      	str	r3, [sp, #48]	; 0x30
  // Initialize USART1
  USART_StructInit(&USART_InitStructure);
  USART_ClockStructInit(&USART_ClockInitStructure);
  USART_ClockInit(USART1, &USART_ClockInitStructure);
  
  USART_InitStructure.USART_BaudRate = baud;
 8000d7c:	9608      	str	r6, [sp, #32]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000d7e:	9409      	str	r4, [sp, #36]	; 0x24
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000d80:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStructure.USART_Parity = USART_Parity_No ;
 8000d82:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000d84:	940d      	str	r4, [sp, #52]	; 0x34

  //Write USART1 parameters
  USART_Init(USART1, &USART_InitStructure);
 8000d86:	f003 faf9 	bl	800437c <USART_Init>

  //Enable USART1
  USART_Cmd(USART1, ENABLE);
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	f003 fb73 	bl	8004478 <USART_Cmd>

  #ifdef BUFFERED
  //configure NVIC
  NVIC_InitTypeDef NVIC_InitStructure;
  //select NVIC channel to configure
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8000d92:	2325      	movs	r3, #37	; 0x25
 8000d94:	f88d 3004 	strb.w	r3, [sp, #4]
  //set priority to lowest
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
  //set subpriority to lowest
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
  //enable IRQ channel
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000d98:	2601      	movs	r6, #1
  //configure NVIC
  NVIC_InitTypeDef NVIC_InitStructure;
  //select NVIC channel to configure
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
  //set priority to lowest
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000d9a:	230f      	movs	r3, #15
  //set subpriority to lowest
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
  //enable IRQ channel
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  //update NVIC registers
  NVIC_Init(&NVIC_InitStructure);
 8000d9c:	a801      	add	r0, sp, #4
  //configure NVIC
  NVIC_InitTypeDef NVIC_InitStructure;
  //select NVIC channel to configure
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
  //set priority to lowest
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000d9e:	f88d 3005 	strb.w	r3, [sp, #5]
  //set subpriority to lowest
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000da2:	f88d 3006 	strb.w	r3, [sp, #6]
  //enable IRQ channel
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000da6:	f88d 6007 	strb.w	r6, [sp, #7]
  //update NVIC registers
  NVIC_Init(&NVIC_InitStructure);
 8000daa:	f001 ff7d 	bl	8002ca8 <NVIC_Init>
  //disable Transmit Data Register empty interrupt
  USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8000dae:	4628      	mov	r0, r5
 8000db0:	4622      	mov	r2, r4
 8000db2:	4909      	ldr	r1, [pc, #36]	; (8000dd8 <ge_uart_init+0xd8>)
 8000db4:	f003 fcb4 	bl	8004720 <USART_ITConfig>
  //enable Receive Data register not empty interrupt
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8000db8:	4628      	mov	r0, r5
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <ge_uart_init+0xdc>)
 8000dbc:	4632      	mov	r2, r6
 8000dbe:	f003 fcaf 	bl	8004720 <USART_ITConfig>
  // NVIC_EnableIRQ(USART1_IRQn);
  #endif
}
 8000dc2:	b00e      	add	sp, #56	; 0x38
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000125c 	.word	0x2000125c
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	200012df 	.word	0x200012df
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	00070107 	.word	0x00070107
 8000ddc:	00050105 	.word	0x00050105

08000de0 <ge_uart_put>:
 * @details Sends a single character over the serial port. This
 * method will block if it is not buffered.
 * 
 * @param ch Character to send
 */
void ge_uart_put(uint8_t ch) {
 8000de0:	b508      	push	{r3, lr}
 8000de2:	4601      	mov	r1, r0
  #ifdef BUFFERED
    //put char to the buffer
    BufferPut(&U1Tx, ch);
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <ge_uart_put+0x18>)
 8000de6:	f000 f9aa 	bl	800113e <BufferPut>
    //enable Transmit Data Register empty interrupt
    USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8000dea:	4804      	ldr	r0, [pc, #16]	; (8000dfc <ge_uart_put+0x1c>)
 8000dec:	4904      	ldr	r1, [pc, #16]	; (8000e00 <ge_uart_put+0x20>)
 8000dee:	2201      	movs	r2, #1
    //Loop until the end of transmission
    while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
    {
    }
  #endif
}
 8000df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void ge_uart_put(uint8_t ch) {
  #ifdef BUFFERED
    //put char to the buffer
    BufferPut(&U1Tx, ch);
    //enable Transmit Data Register empty interrupt
    USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8000df4:	f003 bc94 	b.w	8004720 <USART_ITConfig>
 8000df8:	200012df 	.word	0x200012df
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	00070107 	.word	0x00070107

08000e04 <ge_uart_get>:
 * @details Returns the recieved character from the serial port.
 * This method will block if there is no character in the RX buffer
 * or wait until a character is recieved if no buffer is used.
 * @return Character recieved
 */
uint8_t ge_uart_get(void) {
 8000e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e08:	b0a0      	sub	sp, #128	; 0x80
  #ifdef BUFFERED
    uint8_t ch;
    //check if buffer is empty
    while (BufferIsEmpty(U1Rx) ==SUCCESS);
 8000e0a:	4c0f      	ldr	r4, [pc, #60]	; (8000e48 <ge_uart_get+0x44>)
 8000e0c:	f8d4 8000 	ldr.w	r8, [r4]
 8000e10:	6867      	ldr	r7, [r4, #4]
 8000e12:	68a6      	ldr	r6, [r4, #8]
 8000e14:	68e5      	ldr	r5, [r4, #12]
 8000e16:	f104 0110 	add.w	r1, r4, #16
 8000e1a:	2273      	movs	r2, #115	; 0x73
 8000e1c:	4668      	mov	r0, sp
 8000e1e:	f004 fc13 	bl	8005648 <memcpy>
 8000e22:	4640      	mov	r0, r8
 8000e24:	4639      	mov	r1, r7
 8000e26:	4632      	mov	r2, r6
 8000e28:	462b      	mov	r3, r5
 8000e2a:	f000 f9ba 	bl	80011a2 <BufferIsEmpty>
 8000e2e:	2801      	cmp	r0, #1
 8000e30:	d0eb      	beq.n	8000e0a <ge_uart_get+0x6>
    BufferGet(&U1Rx, &ch);
 8000e32:	4620      	mov	r0, r4
 8000e34:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8000e38:	f000 f999 	bl	800116e <BufferGet>
    return ch;
  #else
     while ( USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
        return (uint8_t)USART_ReceiveData(USART1);
  #endif
}
 8000e3c:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
 8000e40:	b020      	add	sp, #128	; 0x80
 8000e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e46:	bf00      	nop
 8000e48:	2000125c 	.word	0x2000125c

08000e4c <ge_uart_available>:
 * In the buffered mode, this checks if the buffer is not empty. In
 * the non-buffered mode, the method checks if the USART has
 * recieved a character
 * @return 1 if character available.
 */
int ge_uart_available() {
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  #ifdef BUFFERED
    return !(BufferIsEmpty(U1Rx));
 8000e4e:	490b      	ldr	r1, [pc, #44]	; (8000e7c <ge_uart_available+0x30>)
 * In the buffered mode, this checks if the buffer is not empty. In
 * the non-buffered mode, the method checks if the USART has
 * recieved a character
 * @return 1 if character available.
 */
int ge_uart_available() {
 8000e50:	b09f      	sub	sp, #124	; 0x7c
  #ifdef BUFFERED
    return !(BufferIsEmpty(U1Rx));
 8000e52:	680f      	ldr	r7, [r1, #0]
 8000e54:	684e      	ldr	r6, [r1, #4]
 8000e56:	688d      	ldr	r5, [r1, #8]
 8000e58:	68cc      	ldr	r4, [r1, #12]
 8000e5a:	4668      	mov	r0, sp
 8000e5c:	3110      	adds	r1, #16
 8000e5e:	2273      	movs	r2, #115	; 0x73
 8000e60:	f004 fbf2 	bl	8005648 <memcpy>
 8000e64:	4638      	mov	r0, r7
 8000e66:	4631      	mov	r1, r6
 8000e68:	462a      	mov	r2, r5
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	f000 f999 	bl	80011a2 <BufferIsEmpty>
  #else
    return !(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
  #endif
}
 8000e70:	fab0 f080 	clz	r0, r0
 8000e74:	0940      	lsrs	r0, r0, #5
 8000e76:	b01f      	add	sp, #124	; 0x7c
 8000e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000125c 	.word	0x2000125c

08000e80 <ge_uart_write>:
 * @details Sends each character individually over the serial port
 * 
 * @param str String to send
 * @param len Length of string
 */
void ge_uart_write(char *str, int len) {
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	4605      	mov	r5, r0
 8000e84:	460e      	mov	r6, r1
  for (int i = 0; i < len; i++) {
 8000e86:	4604      	mov	r4, r0
 8000e88:	1b63      	subs	r3, r4, r5
 8000e8a:	42b3      	cmp	r3, r6
 8000e8c:	da04      	bge.n	8000e98 <ge_uart_write+0x18>
    ge_uart_put(str[i]);
 8000e8e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000e92:	f7ff ffa5 	bl	8000de0 <ge_uart_put>
 8000e96:	e7f7      	b.n	8000e88 <ge_uart_write+0x8>
  }
}
 8000e98:	bd70      	pop	{r4, r5, r6, pc}

08000e9a <USART1_IRQHandler>:
 * @brief USART1 handler
 * @details Interrupt handler stores recieved data in RX buffer
 * and sends data from TX buffer if it is available.
 */
void USART1_IRQHandler(void)
{
 8000e9a:	b507      	push	{r0, r1, r2, lr}
  uint8_t ch;
  //if Receive interrupt
  if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <USART1_IRQHandler+0x52>)
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <USART1_IRQHandler+0x56>)
 8000ea0:	f003 fc76 	bl	8004790 <USART_GetITStatus>
 8000ea4:	b140      	cbz	r0, 8000eb8 <USART1_IRQHandler+0x1e>
  {
    ch=(uint8_t)USART_ReceiveData(USART1);
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <USART1_IRQHandler+0x52>)
 8000ea8:	f003 fb7a 	bl	80045a0 <USART_ReceiveData>
 8000eac:	b2c1      	uxtb	r1, r0
  #ifdef BUFFERED
      //put char to the buffer
      BufferPut(&U1Rx, ch);
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <USART1_IRQHandler+0x5a>)
{
  uint8_t ch;
  //if Receive interrupt
  if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
  {
    ch=(uint8_t)USART_ReceiveData(USART1);
 8000eb0:	f88d 1007 	strb.w	r1, [sp, #7]
  #ifdef BUFFERED
      //put char to the buffer
      BufferPut(&U1Rx, ch);
 8000eb4:	f000 f943 	bl	800113e <BufferPut>
  #endif
  }
  if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <USART1_IRQHandler+0x52>)
 8000eba:	490f      	ldr	r1, [pc, #60]	; (8000ef8 <USART1_IRQHandler+0x5e>)
 8000ebc:	f003 fc68 	bl	8004790 <USART_GetITStatus>
 8000ec0:	b180      	cbz	r0, 8000ee4 <USART1_IRQHandler+0x4a>
  {
  #ifdef BUFFERED
      if (BufferGet(&U1Tx, &ch) == SUCCESS)//if buffer read
 8000ec2:	480e      	ldr	r0, [pc, #56]	; (8000efc <USART1_IRQHandler+0x62>)
 8000ec4:	f10d 0107 	add.w	r1, sp, #7
 8000ec8:	f000 f951 	bl	800116e <BufferGet>
 8000ecc:	2801      	cmp	r0, #1
      {
        USART_SendData(USART1, ch);
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <USART1_IRQHandler+0x52>)
  #endif
  }
  if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
  {
  #ifdef BUFFERED
      if (BufferGet(&U1Tx, &ch) == SUCCESS)//if buffer read
 8000ed0:	d104      	bne.n	8000edc <USART1_IRQHandler+0x42>
      {
        USART_SendData(USART1, ch);
 8000ed2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000ed6:	f003 fb5f 	bl	8004598 <USART_SendData>
 8000eda:	e003      	b.n	8000ee4 <USART1_IRQHandler+0x4a>
      }
      else//if buffer empty
  #endif
      {
        //disable Transmit Data Register empty interrupt
        USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8000edc:	4906      	ldr	r1, [pc, #24]	; (8000ef8 <USART1_IRQHandler+0x5e>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f003 fc1e 	bl	8004720 <USART_ITConfig>
      }
  }
}
 8000ee4:	b003      	add	sp, #12
 8000ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eea:	bf00      	nop
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	00050105 	.word	0x00050105
 8000ef4:	2000125c 	.word	0x2000125c
 8000ef8:	00070107 	.word	0x00070107
 8000efc:	200012df 	.word	0x200012df

08000f00 <hd44780_wr_hi_nibble>:
#define hd44780_write_char( c )                   hd44780_wr_data( c & 0xff )

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble( unsigned char data )
{
 8000f00:	b510      	push	{r4, lr}
 8000f02:	4604      	mov	r4, r0
	if ( data & 0x10 ) {
 8000f04:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <hd44780_wr_hi_nibble+0x74>)
 8000f08:	f04f 0110 	mov.w	r1, #16

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble( unsigned char data )
{
	if ( data & 0x10 ) {
 8000f0c:	d502      	bpl.n	8000f14 <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000f0e:	f001 fea1 	bl	8002c54 <GPIO_SetBits>
 8000f12:	e001      	b.n	8000f18 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000f14:	f001 fea0 	bl	8002c58 <GPIO_ResetBits>
	}
	if ( data & 0x20 ) {
 8000f18:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000f1a:	4816      	ldr	r0, [pc, #88]	; (8000f74 <hd44780_wr_hi_nibble+0x74>)
 8000f1c:	f04f 0120 	mov.w	r1, #32
	if ( data & 0x10 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x20 ) {
 8000f20:	d502      	bpl.n	8000f28 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000f22:	f001 fe97 	bl	8002c54 <GPIO_SetBits>
 8000f26:	e001      	b.n	8000f2c <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000f28:	f001 fe96 	bl	8002c58 <GPIO_ResetBits>
	}
	if ( data & 0x40 ) {
 8000f2c:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <hd44780_wr_hi_nibble+0x74>)
 8000f30:	f04f 0140 	mov.w	r1, #64	; 0x40
	if ( data & 0x20 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x40 ) {
 8000f34:	d502      	bpl.n	8000f3c <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000f36:	f001 fe8d 	bl	8002c54 <GPIO_SetBits>
 8000f3a:	e001      	b.n	8000f40 <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000f3c:	f001 fe8c 	bl	8002c58 <GPIO_ResetBits>
	}
	if ( data & 0x80 ) {
 8000f40:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <hd44780_wr_hi_nibble+0x74>)
 8000f44:	f04f 0180 	mov.w	r1, #128	; 0x80
	if ( data & 0x40 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x80 ) {
 8000f48:	d502      	bpl.n	8000f50 <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000f4a:	f001 fe83 	bl	8002c54 <GPIO_SetBits>
 8000f4e:	e001      	b.n	8000f54 <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000f50:	f001 fe82 	bl	8002c58 <GPIO_ResetBits>
	}

    /* set the EN signal */
    hd44780_EN_On();
 8000f54:	2104      	movs	r1, #4
 8000f56:	2201      	movs	r2, #1
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <hd44780_wr_hi_nibble+0x74>)
 8000f5a:	f001 fe7f 	bl	8002c5c <GPIO_WriteBit>

    /* wait */
    hd44780_EN_high_delay();
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f7ff fd48 	bl	80009f4 <delay_ms>

    /* reset the EN signal */
    hd44780_EN_Off();
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <hd44780_wr_hi_nibble+0x74>)
 8000f66:	2104      	movs	r1, #4
 8000f68:	2200      	movs	r2, #0
}
 8000f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* wait */
    hd44780_EN_high_delay();

    /* reset the EN signal */
    hd44780_EN_Off();
 8000f6e:	f001 be75 	b.w	8002c5c <GPIO_WriteBit>
 8000f72:	bf00      	nop
 8000f74:	48000c00 	.word	0x48000c00

08000f78 <hd44780_wr_lo_nibble>:


#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble( unsigned char data )
{
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	4604      	mov	r4, r0
	if ( data & 0x01 ) {
 8000f7c:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000f7e:	481b      	ldr	r0, [pc, #108]	; (8000fec <hd44780_wr_lo_nibble+0x74>)
 8000f80:	f04f 0110 	mov.w	r1, #16

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble( unsigned char data )
{
	if ( data & 0x01 ) {
 8000f84:	d502      	bpl.n	8000f8c <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000f86:	f001 fe65 	bl	8002c54 <GPIO_SetBits>
 8000f8a:	e001      	b.n	8000f90 <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000f8c:	f001 fe64 	bl	8002c58 <GPIO_ResetBits>
	}
	if ( data & 0x02 ) {
 8000f90:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000f92:	4816      	ldr	r0, [pc, #88]	; (8000fec <hd44780_wr_lo_nibble+0x74>)
 8000f94:	f04f 0120 	mov.w	r1, #32
	if ( data & 0x01 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x02 ) {
 8000f98:	d502      	bpl.n	8000fa0 <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000f9a:	f001 fe5b 	bl	8002c54 <GPIO_SetBits>
 8000f9e:	e001      	b.n	8000fa4 <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000fa0:	f001 fe5a 	bl	8002c58 <GPIO_ResetBits>
	}
	if ( data & 0x04 ) {
 8000fa4:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <hd44780_wr_lo_nibble+0x74>)
 8000fa8:	f04f 0140 	mov.w	r1, #64	; 0x40
	if ( data & 0x02 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x04 ) {
 8000fac:	d502      	bpl.n	8000fb4 <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000fae:	f001 fe51 	bl	8002c54 <GPIO_SetBits>
 8000fb2:	e001      	b.n	8000fb8 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000fb4:	f001 fe50 	bl	8002c58 <GPIO_ResetBits>
	}
	if ( data & 0x08 ) {
 8000fb8:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <hd44780_wr_lo_nibble+0x74>)
 8000fbc:	f04f 0180 	mov.w	r1, #128	; 0x80
	if ( data & 0x04 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x08 ) {
 8000fc0:	d502      	bpl.n	8000fc8 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000fc2:	f001 fe47 	bl	8002c54 <GPIO_SetBits>
 8000fc6:	e001      	b.n	8000fcc <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000fc8:	f001 fe46 	bl	8002c58 <GPIO_ResetBits>
	}

    /* set the EN signal */
    hd44780_EN_On();
 8000fcc:	2104      	movs	r1, #4
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <hd44780_wr_lo_nibble+0x74>)
 8000fd2:	f001 fe43 	bl	8002c5c <GPIO_WriteBit>

    /* wait */
    hd44780_EN_high_delay();
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff fd0c 	bl	80009f4 <delay_ms>

    /* reset the EN signal */
    hd44780_EN_Off();
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <hd44780_wr_lo_nibble+0x74>)
 8000fde:	2104      	movs	r1, #4
 8000fe0:	2200      	movs	r2, #0
}
 8000fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* wait */
    hd44780_EN_high_delay();

    /* reset the EN signal */
    hd44780_EN_Off();
 8000fe6:	f001 be39 	b.w	8002c5c <GPIO_WriteBit>
 8000fea:	bf00      	nop
 8000fec:	48000c00 	.word	0x48000c00

08000ff0 <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write( unsigned char data )
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
 8000ff4:	f7ff ff84 	bl	8000f00 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble( data );
 8000ff8:	4620      	mov	r0, r4
}
 8000ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/* 4bit bus version */
void hd44780_write( unsigned char data )
{
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
	hd44780_wr_lo_nibble( data );
 8000ffe:	f7ff bfbb 	b.w	8000f78 <hd44780_wr_lo_nibble>

08001002 <hd44780_wr_cmd>:
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */


void hd44780_wr_cmd( unsigned char cmd )
{
 8001002:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 8001004:	2101      	movs	r1, #1
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */


void hd44780_wr_cmd( unsigned char cmd )
{
 8001006:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8001008:	2200      	movs	r2, #0
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <hd44780_wr_cmd+0x1a>)
 800100c:	f001 fe26 	bl	8002c5c <GPIO_WriteBit>
	hd44780_write( cmd );
 8001010:	4620      	mov	r0, r4
}
 8001012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void hd44780_wr_cmd( unsigned char cmd )
{
	hd44780_RS_Off();
	hd44780_write( cmd );
 8001016:	f7ff bfeb 	b.w	8000ff0 <hd44780_write>
 800101a:	bf00      	nop
 800101c:	48000c00 	.word	0x48000c00

08001020 <hd44780_wr_data>:
}


void hd44780_wr_data( unsigned char data )
{
 8001020:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8001022:	2101      	movs	r1, #1
	hd44780_write( cmd );
}


void hd44780_wr_data( unsigned char data )
{
 8001024:	4604      	mov	r4, r0
	hd44780_RS_On();
 8001026:	460a      	mov	r2, r1
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <hd44780_wr_data+0x18>)
 800102a:	f001 fe17 	bl	8002c5c <GPIO_WriteBit>
	hd44780_write( data );
 800102e:	4620      	mov	r0, r4
}
 8001030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void hd44780_wr_data( unsigned char data )
{
	hd44780_RS_On();
	hd44780_write( data );
 8001034:	f7ff bfdc 	b.w	8000ff0 <hd44780_write>
 8001038:	48000c00 	.word	0x48000c00

0800103c <hd44780_Delay>:

Parameters			: del		-	32-bit value to represent the delay cycles
Return value		: NONE
*********************************************************************************************/
void hd44780_Delay(unsigned long del)
{
 800103c:	4770      	bx	lr

0800103e <HD44780_Init>:

Parameters			: NONE
Return value		: NONE
*********************************************************************************************/
void HD44780_Init(void)
{
 800103e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8001040:	4e29      	ldr	r6, [pc, #164]	; (80010e8 <HD44780_Init+0xaa>)
void HD44780_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;	
	
	/* Configure the peripheral clocks for the HD44780 data and control lines */
	RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
 8001042:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001046:	2101      	movs	r1, #1
 8001048:	f002 f908 	bl	800325c <RCC_AHBPeriphClockCmd>

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
 800104c:	2401      	movs	r4, #1
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800104e:	2500      	movs	r5, #0
	
	/* Configure the peripheral clocks for the HD44780 data and control lines */
	RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
 8001050:	23f0      	movs	r3, #240	; 0xf0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001052:	2703      	movs	r7, #3
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8001054:	4630      	mov	r0, r6
 8001056:	4669      	mov	r1, sp
	
	/* Configure the peripheral clocks for the HD44780 data and control lines */
	RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
 8001058:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
 800105a:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800105e:	f88d 5006 	strb.w	r5, [sp, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001062:	f88d 7005 	strb.w	r7, [sp, #5]
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8001066:	f001 fd71 	bl	8002b4c <GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 800106a:	2307      	movs	r3, #7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 800106c:	4630      	mov	r0, r6
 800106e:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 8001070:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
 8001072:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001076:	f88d 5006 	strb.w	r5, [sp, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800107a:	f88d 7005 	strb.w	r7, [sp, #5]
	GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 800107e:	f001 fd65 	bl	8002b4c <GPIO_Init>

  /* clear control bits */
	hd44780_EN_Off();
 8001082:	4630      	mov	r0, r6
 8001084:	462a      	mov	r2, r5
 8001086:	2104      	movs	r1, #4
 8001088:	f001 fde8 	bl	8002c5c <GPIO_WriteBit>
	hd44780_RS_Off();
 800108c:	4630      	mov	r0, r6
 800108e:	4621      	mov	r1, r4
 8001090:	462a      	mov	r2, r5
 8001092:	f001 fde3 	bl	8002c5c <GPIO_WriteBit>
	hd44780_RW_Off();
 8001096:	2102      	movs	r1, #2
 8001098:	462a      	mov	r2, r5
 800109a:	4630      	mov	r0, r6
 800109c:	f001 fdde 	bl	8002c5c <GPIO_WriteBit>
	
	/* wait initial delay for LCD to settle */
  /* reset procedure - 3 function calls resets the device */
  hd44780_init_delay();
 80010a0:	2010      	movs	r0, #16
 80010a2:	f7ff fca7 	bl	80009f4 <delay_ms>
  hd44780_wr_hi_nibble( HD44780_CMD_RESET );
 80010a6:	2030      	movs	r0, #48	; 0x30
 80010a8:	f7ff ff2a 	bl	8000f00 <hd44780_wr_hi_nibble>
  hd44780_init_delay2();
 80010ac:	2005      	movs	r0, #5
 80010ae:	f7ff fca1 	bl	80009f4 <delay_ms>
  hd44780_wr_hi_nibble( HD44780_CMD_RESET );
 80010b2:	2030      	movs	r0, #48	; 0x30
 80010b4:	f7ff ff24 	bl	8000f00 <hd44780_wr_hi_nibble>
  hd44780_init_delay3();
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff fc9b 	bl	80009f4 <delay_ms>
  hd44780_wr_hi_nibble( HD44780_CMD_RESET );
 80010be:	2030      	movs	r0, #48	; 0x30
 80010c0:	f7ff ff1e 	bl	8000f00 <hd44780_wr_hi_nibble>
		
	#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
    /* 4bit interface */
  hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION );
 80010c4:	2020      	movs	r0, #32
 80010c6:	f7ff ff1b 	bl	8000f00 <hd44780_wr_hi_nibble>
  #endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

  /* sets the configured values - can be set again only after reset */
  hd44780_function( HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT );
 80010ca:	2028      	movs	r0, #40	; 0x28
 80010cc:	f7ff ff99 	bl	8001002 <hd44780_wr_cmd>

  /* turn the display on with no cursor or blinking */
	hd44780_display( HD44780_DISP_ON, HD44780_DISP_CURS_OFF, HD44780_DISP_BLINK_OFF );
 80010d0:	200c      	movs	r0, #12
 80010d2:	f7ff ff96 	bl	8001002 <hd44780_wr_cmd>
	
  /* clear the display */
  hd44780_clear();
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff ff93 	bl	8001002 <hd44780_wr_cmd>

  /* addr increment, shift cursor */
	hd44780_entry( HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS );
 80010dc:	2006      	movs	r0, #6
 80010de:	f7ff ff90 	bl	8001002 <hd44780_wr_cmd>

}
 80010e2:	b003      	add	sp, #12
 80010e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e6:	bf00      	nop
 80010e8:	48000c00 	.word	0x48000c00

080010ec <HD44780_PutChar>:

Return value		: NONE
*********************************************************************************************/
void HD44780_PutChar(unsigned char c)
{
	hd44780_wr_data(c & 0xff);
 80010ec:	f7ff bf98 	b.w	8001020 <hd44780_wr_data>

080010f0 <HD44780_GotoXY>:
	
  if(x > (HD44780_DISP_LENGTH-1))
		x = 0;

	if(y > (HD44780_DISP_ROWS-1))
		y = 0;
 80010f0:	2903      	cmp	r1, #3
 80010f2:	bf88      	it	hi
 80010f4:	2100      	movhi	r1, #0
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HD44780_GotoXY+0x18>)
		case 0:  copy_y = 0x80; break;
		case 1:  copy_y = 0xc0; break;
		case 2:  copy_y = 0x94; break;
		case 3:  copy_y = 0xd4; break;
  }
	hd44780_wr_cmd(x + copy_y);
 80010f8:	5c5b      	ldrb	r3, [r3, r1]
void HD44780_GotoXY(unsigned char x, unsigned char y)
{
  unsigned char copy_y=0;
	
  if(x > (HD44780_DISP_LENGTH-1))
		x = 0;
 80010fa:	2813      	cmp	r0, #19
 80010fc:	bf88      	it	hi
 80010fe:	2000      	movhi	r0, #0
		case 0:  copy_y = 0x80; break;
		case 1:  copy_y = 0xc0; break;
		case 2:  copy_y = 0x94; break;
		case 3:  copy_y = 0xd4; break;
  }
	hd44780_wr_cmd(x + copy_y);
 8001100:	4418      	add	r0, r3
 8001102:	b2c0      	uxtb	r0, r0
 8001104:	f7ff bf7d 	b.w	8001002 <hd44780_wr_cmd>
 8001108:	08009ccc 	.word	0x08009ccc

0800110c <HD44780_PutStr>:
Parameters			: str			-	string (char array) to print

Return value		: NONE
*********************************************************************************************/
void HD44780_PutStr(char *str)
{
 800110c:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i=0;
 800110e:	2300      	movs	r3, #0
Parameters			: str			-	string (char array) to print

Return value		: NONE
*********************************************************************************************/
void HD44780_PutStr(char *str)
{
 8001110:	4604      	mov	r4, r0
	__IO unsigned int i=0;
 8001112:	9301      	str	r3, [sp, #4]

	do
	{
		HD44780_PutChar(str[i]);
 8001114:	9b01      	ldr	r3, [sp, #4]

Return value		: NONE
*********************************************************************************************/
void HD44780_PutChar(unsigned char c)
{
	hd44780_wr_data(c & 0xff);
 8001116:	5ce0      	ldrb	r0, [r4, r3]
 8001118:	f7ff ff82 	bl	8001020 <hd44780_wr_data>
	__IO unsigned int i=0;

	do
	{
		HD44780_PutChar(str[i]);
		i++;
 800111c:	9b01      	ldr	r3, [sp, #4]
 800111e:	3301      	adds	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
	}while(str[i]!='\0');
 8001122:	9b01      	ldr	r3, [sp, #4]
 8001124:	5ce3      	ldrb	r3, [r4, r3]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f4      	bne.n	8001114 <HD44780_PutStr+0x8>
}
 800112a:	b002      	add	sp, #8
 800112c:	bd10      	pop	{r4, pc}

0800112e <HD44780_ClrScr>:
Parameters			: NONE
Return value		: NONE
*********************************************************************************************/
void HD44780_ClrScr(void)
{
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff bf67 	b.w	8001002 <hd44780_wr_cmd>

08001134 <BufferInit>:
#include "buffer.h"

//typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
void BufferInit(__IO FIFO_TypeDef *buffer)
{
buffer->count = 0;//0 bytes in buffer
 8001134:	2300      	movs	r3, #0
 8001136:	7083      	strb	r3, [r0, #2]
buffer->in = 0;//index points to start
 8001138:	7003      	strb	r3, [r0, #0]
buffer->out = 0;//index points to start
 800113a:	7043      	strb	r3, [r0, #1]
 800113c:	4770      	bx	lr

0800113e <BufferPut>:
}

ErrorStatus BufferPut(__IO FIFO_TypeDef *buffer, uint8_t ch)
{
if(buffer->count==USARTBUFFSIZE)
 800113e:	7883      	ldrb	r3, [r0, #2]
 8001140:	2b80      	cmp	r3, #128	; 0x80
 8001142:	d010      	beq.n	8001166 <BufferPut+0x28>
    return ERROR;//buffer full
buffer->buff[buffer->in++]=ch;
 8001144:	7803      	ldrb	r3, [r0, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	4403      	add	r3, r0
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	7002      	strb	r2, [r0, #0]
 8001150:	70d9      	strb	r1, [r3, #3]
buffer->count++;
 8001152:	7883      	ldrb	r3, [r0, #2]
 8001154:	3301      	adds	r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	7083      	strb	r3, [r0, #2]
if(buffer->in==USARTBUFFSIZE)
 800115a:	7803      	ldrb	r3, [r0, #0]
 800115c:	2b80      	cmp	r3, #128	; 0x80
 800115e:	d104      	bne.n	800116a <BufferPut+0x2c>
    buffer->in=0;//start from beginning
 8001160:	2300      	movs	r3, #0
 8001162:	7003      	strb	r3, [r0, #0]
 8001164:	e001      	b.n	800116a <BufferPut+0x2c>
}

ErrorStatus BufferPut(__IO FIFO_TypeDef *buffer, uint8_t ch)
{
if(buffer->count==USARTBUFFSIZE)
    return ERROR;//buffer full
 8001166:	2000      	movs	r0, #0
 8001168:	4770      	bx	lr
buffer->buff[buffer->in++]=ch;
buffer->count++;
if(buffer->in==USARTBUFFSIZE)
    buffer->in=0;//start from beginning
return SUCCESS;
 800116a:	2001      	movs	r0, #1
}
 800116c:	4770      	bx	lr

0800116e <BufferGet>:

ErrorStatus BufferGet(__IO FIFO_TypeDef *buffer, uint8_t *ch)
{
if(buffer->count==0)
 800116e:	7882      	ldrb	r2, [r0, #2]
 8001170:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001174:	b18a      	cbz	r2, 800119a <BufferGet+0x2c>
    return ERROR;//buffer empty
*ch=buffer->buff[buffer->out++];
 8001176:	7843      	ldrb	r3, [r0, #1]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	4403      	add	r3, r0
 8001180:	7042      	strb	r2, [r0, #1]
 8001182:	78db      	ldrb	r3, [r3, #3]
 8001184:	700b      	strb	r3, [r1, #0]
buffer->count--;
 8001186:	7883      	ldrb	r3, [r0, #2]
 8001188:	3b01      	subs	r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	7083      	strb	r3, [r0, #2]
if(buffer->out==USARTBUFFSIZE)
 800118e:	7843      	ldrb	r3, [r0, #1]
 8001190:	2b80      	cmp	r3, #128	; 0x80
 8001192:	d104      	bne.n	800119e <BufferGet+0x30>
    buffer->out=0;//start from beginning
 8001194:	2300      	movs	r3, #0
 8001196:	7043      	strb	r3, [r0, #1]
 8001198:	e001      	b.n	800119e <BufferGet+0x30>
}

ErrorStatus BufferGet(__IO FIFO_TypeDef *buffer, uint8_t *ch)
{
if(buffer->count==0)
    return ERROR;//buffer empty
 800119a:	4618      	mov	r0, r3
 800119c:	4770      	bx	lr
*ch=buffer->buff[buffer->out++];
buffer->count--;
if(buffer->out==USARTBUFFSIZE)
    buffer->out=0;//start from beginning
return SUCCESS;
 800119e:	2001      	movs	r0, #1
}
 80011a0:	4770      	bx	lr

080011a2 <BufferIsEmpty>:
ErrorStatus BufferIsEmpty(__IO FIFO_TypeDef buffer)
{
 80011a2:	b084      	sub	sp, #16
 80011a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    if(buffer.count==0)
 80011a8:	f89d 0002 	ldrb.w	r0, [sp, #2]
        return SUCCESS;//buffer full
    return ERROR;
}
 80011ac:	fab0 f080 	clz	r0, r0
 80011b0:	b004      	add	sp, #16
 80011b2:	0940      	lsrs	r0, r0, #5
 80011b4:	4770      	bx	lr

080011b6 <eeprom_init>:
/**
 * @brief Initialize EEPROM
 * @details Sets aside FLASH memory and prepares for EEPROM
 * emulation
 */
void eeprom_init() {
 80011b6:	b508      	push	{r3, lr}
  //Unlock flash program erase controller
  FLASH_Unlock();
 80011b8:	f001 f9b2 	bl	8002520 <FLASH_Unlock>
  //Initialize EEPROM
  EE_Init();
}
 80011bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void eeprom_init() {
  //Unlock flash program erase controller
  FLASH_Unlock();
  //Initialize EEPROM
  EE_Init();
 80011c0:	f000 baba 	b.w	8001738 <EE_Init>

080011c4 <eeprom_read>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t eeprom_read(uint16_t addr, uint16_t *data) {
  return EE_ReadVariable(addr, data);
 80011c4:	f000 ba90 	b.w	80016e8 <EE_ReadVariable>

080011c8 <eeprom_write>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
 */
uint16_t eeprom_write(uint16_t addr, uint16_t data) {
  return EE_WriteVariable(addr, data);
 80011c8:	f000 bb52 	b.w	8001870 <EE_WriteVariable>
 80011cc:	0000      	movs	r0, r0
	...

080011d0 <ic_int_init>:
/**
 * @brief Initialize input capture timer
 * @details Initializes TIM4 for the input capture library and
 * sets PB10 as an input.
 */
void ic_int_init() {
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  //initialize variables
  _ge_ic_int_count = 0;
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <ic_int_init+0xec>)
  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBase_InitStructure.TIM_Period = 0xffff;
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0x001ff; // 72 Mhz / 512 = 140.625 kHz
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM4, &TIM_TimeBase_InitStructure);
 80011d4:	4e3a      	ldr	r6, [pc, #232]	; (80012c0 <ic_int_init+0xf0>)
/**
 * @brief Initialize input capture timer
 * @details Initializes TIM4 for the input capture library and
 * sets PB10 as an input.
 */
void ic_int_init() {
 80011d6:	b08d      	sub	sp, #52	; 0x34
  //initialize variables
  _ge_ic_int_count = 0;
 80011d8:	2500      	movs	r5, #0
  _ge_ic_int_last_count = 0;
  _ge_ic_int_ovf = false;


  //enable clocks for TIM4 and GPIOB
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80011da:	2101      	movs	r1, #1
 80011dc:	2004      	movs	r0, #4
 * @details Initializes TIM4 for the input capture library and
 * sets PB10 as an input.
 */
void ic_int_init() {
  //initialize variables
  _ge_ic_int_count = 0;
 80011de:	601d      	str	r5, [r3, #0]
  _ge_ic_int_last_count = 0;
 80011e0:	605d      	str	r5, [r3, #4]
  _ge_ic_int_ovf = false;
 80011e2:	721d      	strb	r5, [r3, #8]


  //enable clocks for TIM4 and GPIOB
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80011e4:	f002 f852 	bl	800328c <RCC_APB1PeriphClockCmd>

  //enable GPIO
  gpio_init();
 80011e8:	f7ff fb40 	bl	800086c <gpio_init>
  TIM_TimeBaseInitTypeDef TIM_TimeBase_InitStructure;
  TIM_ICInitTypeDef TIM_IC_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  //setup TIM4
  TIM_TimeBaseStructInit(&TIM_TimeBase_InitStructure);
 80011ec:	a809      	add	r0, sp, #36	; 0x24
 80011ee:	f002 fa75 	bl	80036dc <TIM_TimeBaseStructInit>
  TIM_ICStructInit(&TIM_IC_InitStructure);
 80011f2:	a806      	add	r0, sp, #24
 80011f4:	f002 fe28 	bl	8003e48 <TIM_ICStructInit>

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBase_InitStructure.TIM_Period = 0xffff;
 80011f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fc:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0x001ff; // 72 Mhz / 512 = 140.625 kHz
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM4, &TIM_TimeBase_InitStructure);
 80011fe:	4630      	mov	r0, r6
  TIM_ICStructInit(&TIM_IC_InitStructure);

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBase_InitStructure.TIM_Period = 0xffff;
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0x001ff; // 72 Mhz / 512 = 140.625 kHz
 8001200:	f240 13ff 	movw	r3, #511	; 0x1ff
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM4, &TIM_TimeBase_InitStructure);
 8001204:	a909      	add	r1, sp, #36	; 0x24
  TIM_ICStructInit(&TIM_IC_InitStructure);

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBase_InitStructure.TIM_Period = 0xffff;
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0x001ff; // 72 Mhz / 512 = 140.625 kHz
 8001206:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

  //setup TIM4
  TIM_TimeBaseStructInit(&TIM_TimeBase_InitStructure);
  TIM_ICStructInit(&TIM_IC_InitStructure);

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800120a:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800120e:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
  TIM_TimeBase_InitStructure.TIM_Period = 0xffff;
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0x001ff; // 72 Mhz / 512 = 140.625 kHz
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
 8001212:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  TIM_TimeBaseInit(TIM4, &TIM_TimeBase_InitStructure);
 8001216:	f002 fa09 	bl	800362c <TIM_TimeBaseInit>

  TIM_ClearFlag(TIM4, TIM_FLAG_Update);
 800121a:	4630      	mov	r0, r6
 800121c:	2101      	movs	r1, #1

  //setup NVIC for TIM4
  NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800121e:	2401      	movs	r4, #1
  TIM_TimeBase_InitStructure.TIM_Period = 0xffff;
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0x001ff; // 72 Mhz / 512 = 140.625 kHz
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM4, &TIM_TimeBase_InitStructure);

  TIM_ClearFlag(TIM4, TIM_FLAG_Update);
 8001220:	f002 ff50 	bl	80040c4 <TIM_ClearFlag>

  //setup NVIC for TIM4
  NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8001224:	2703      	movs	r7, #3
  TIM_TimeBaseInit(TIM4, &TIM_TimeBase_InitStructure);

  TIM_ClearFlag(TIM4, TIM_FLAG_Update);

  //setup NVIC for TIM4
  NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8001226:	231e      	movs	r3, #30
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

  NVIC_Init(&NVIC_InitStructure);
 8001228:	a801      	add	r0, sp, #4
  TIM_TimeBaseInit(TIM4, &TIM_TimeBase_InitStructure);

  TIM_ClearFlag(TIM4, TIM_FLAG_Update);

  //setup NVIC for TIM4
  NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 800122a:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800122e:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8001232:	f88d 7006 	strb.w	r7, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001236:	f88d 4007 	strb.w	r4, [sp, #7]

  NVIC_Init(&NVIC_InitStructure);
 800123a:	f001 fd35 	bl	8002ca8 <NVIC_Init>

  //enable interrupts
  TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 800123e:	4622      	mov	r2, r4
 8001240:	4621      	mov	r1, r4
 8001242:	4630      	mov	r0, r6
 8001244:	f002 ff2a 	bl	800409c <TIM_ITConfig>

  //enable PB10 as input capture pin
  GPIO_InitTypeDef gpio_struct;
  GPIO_StructInit(&gpio_struct);
 8001248:	a802      	add	r0, sp, #8
 800124a:	f001 fcdd 	bl	8002c08 <GPIO_StructInit>

  gpio_struct.GPIO_Mode = GPIO_Mode_IN;
  gpio_struct.GPIO_Pin = _ge_pin_num[PB10];
 800124e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  gpio_struct.GPIO_Speed = GPIO_Speed_50MHz;

  GPIO_Init(_ge_pin_port[PB10], &gpio_struct);
 8001252:	a902      	add	r1, sp, #8
 8001254:	481b      	ldr	r0, [pc, #108]	; (80012c4 <ic_int_init+0xf4>)
  //enable PB10 as input capture pin
  GPIO_InitTypeDef gpio_struct;
  GPIO_StructInit(&gpio_struct);

  gpio_struct.GPIO_Mode = GPIO_Mode_IN;
  gpio_struct.GPIO_Pin = _ge_pin_num[PB10];
 8001256:	9302      	str	r3, [sp, #8]

  //enable PB10 as input capture pin
  GPIO_InitTypeDef gpio_struct;
  GPIO_StructInit(&gpio_struct);

  gpio_struct.GPIO_Mode = GPIO_Mode_IN;
 8001258:	f88d 500c 	strb.w	r5, [sp, #12]
  gpio_struct.GPIO_Pin = _ge_pin_num[PB10];
  gpio_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800125c:	f88d 700d 	strb.w	r7, [sp, #13]

  GPIO_Init(_ge_pin_port[PB10], &gpio_struct);
 8001260:	f001 fc74 	bl	8002b4c <GPIO_Init>

  //Attach interrupt to PB10
  EXTI_InitTypeDef EXTI_InitStruct;

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001264:	4620      	mov	r0, r4
 8001266:	4621      	mov	r1, r4
 8001268:	f002 f804 	bl	8003274 <RCC_APB2PeriphClockCmd>

  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource10);
 800126c:	210a      	movs	r1, #10
 800126e:	4620      	mov	r0, r4
 8001270:	f002 f8fe 	bl	8003470 <SYSCFG_EXTILineConfig>

  //setup NVIC for External interrupt
  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 8001274:	2328      	movs	r3, #40	; 0x28
 8001276:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

  NVIC_Init(&NVIC_InitStructure);
 800127a:	a801      	add	r0, sp, #4
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource10);

  //setup NVIC for External interrupt
  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	f88d 3006 	strb.w	r3, [sp, #6]

  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource10);

  //setup NVIC for External interrupt
  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8001282:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001286:	f88d 4007 	strb.w	r4, [sp, #7]

  NVIC_Init(&NVIC_InitStructure);
 800128a:	f001 fd0d 	bl	8002ca8 <NVIC_Init>

  EXTI_StructInit(&EXTI_InitStruct);
 800128e:	a804      	add	r0, sp, #16
 8001290:	f001 f8cc 	bl	800242c <EXTI_StructInit>
  /* PB10 is connected to EXTI_Line10 */
  EXTI_InitStruct.EXTI_Line = EXTI_Line10;
 8001294:	230a      	movs	r3, #10
 8001296:	9304      	str	r3, [sp, #16]
  /* Enable interrupt */
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
  /* Interrupt mode */
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
  /* Triggers on rising and falling edge */
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8001298:	2310      	movs	r3, #16
  /* Add to EXTI */
  EXTI_Init(&EXTI_InitStruct);
 800129a:	eb0d 0003 	add.w	r0, sp, r3
  /* Enable interrupt */
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
  /* Interrupt mode */
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
  /* Triggers on rising and falling edge */
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800129e:	f88d 3015 	strb.w	r3, [sp, #21]

  EXTI_StructInit(&EXTI_InitStruct);
  /* PB10 is connected to EXTI_Line10 */
  EXTI_InitStruct.EXTI_Line = EXTI_Line10;
  /* Enable interrupt */
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80012a2:	f88d 4016 	strb.w	r4, [sp, #22]
  /* Interrupt mode */
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80012a6:	f88d 5014 	strb.w	r5, [sp, #20]
  /* Triggers on rising and falling edge */
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
  /* Add to EXTI */
  EXTI_Init(&EXTI_InitStruct);
 80012aa:	f001 f835 	bl	8002318 <EXTI_Init>

  //enable timer
  TIM_Cmd(TIM4, ENABLE);
 80012ae:	4630      	mov	r0, r6
 80012b0:	4621      	mov	r1, r4
 80012b2:	f002 fa83 	bl	80037bc <TIM_Cmd>
}
 80012b6:	b00d      	add	sp, #52	; 0x34
 80012b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200009b8 	.word	0x200009b8
 80012c0:	40000800 	.word	0x40000800
 80012c4:	48000400 	.word	0x48000400

080012c8 <ic_int_read_freq>:
 * corrupted if the prescaler just changed.
 * 
 * @param pin Input capture pin to look at
 * @return The frequency in Hz
 */
float ic_int_read_freq() {
 80012c8:	b513      	push	{r0, r1, r4, lr}
  // copy result so it isn't updated during frequency calculation
  uint32_t count;
  memcpy(&count, (const void *)&_ge_ic_int_count, 4);
 80012ca:	4c0f      	ldr	r4, [pc, #60]	; (8001308 <ic_int_read_freq+0x40>)
 80012cc:	a801      	add	r0, sp, #4
 80012ce:	4621      	mov	r1, r4
 80012d0:	2204      	movs	r2, #4
 80012d2:	f004 f9b9 	bl	8005648 <memcpy>

  if (count == 0 || _ge_ic_int_ovf)
 80012d6:	9801      	ldr	r0, [sp, #4]
 80012d8:	b168      	cbz	r0, 80012f6 <ic_int_read_freq+0x2e>
 80012da:	7a23      	ldrb	r3, [r4, #8]
 80012dc:	b95b      	cbnz	r3, 80012f6 <ic_int_read_freq+0x2e>
    return 0.0;

  //magic number - 72MHz/512/2 prescaler
  return 140625.0 / 2.0 / (count);
 80012de:	f003 fbc1 	bl	8004a64 <__aeabi_ui2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	a106      	add	r1, pc, #24	; (adr r1, 8001300 <ic_int_read_freq+0x38>)
 80012e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ec:	f003 fd5a 	bl	8004da4 <__aeabi_ddiv>
 80012f0:	f003 fe88 	bl	8005004 <__aeabi_d2f>
 80012f4:	e000      	b.n	80012f8 <ic_int_read_freq+0x30>
  // copy result so it isn't updated during frequency calculation
  uint32_t count;
  memcpy(&count, (const void *)&_ge_ic_int_count, 4);

  if (count == 0 || _ge_ic_int_ovf)
    return 0.0;
 80012f6:	2000      	movs	r0, #0

  //magic number - 72MHz/512/2 prescaler
  return 140625.0 / 2.0 / (count);
}
 80012f8:	ee00 0a10 	vmov	s0, r0
 80012fc:	b002      	add	sp, #8
 80012fe:	bd10      	pop	{r4, pc}
 8001300:	00000000 	.word	0x00000000
 8001304:	40f12a88 	.word	0x40f12a88
 8001308:	200009b8 	.word	0x200009b8

0800130c <ic_int_set_maxf>:


void ic_int_set_maxf(float f) {
 800130c:	b508      	push	{r3, lr}
  // calculate how many counts corresponds to maximum expected frequency
  _ge_ic_min_count = (int)(140625.0 / 2.0 /f);
 800130e:	ee10 0a10 	vmov	r0, s0
 8001312:	f003 fbc9 	bl	8004aa8 <__aeabi_f2d>
 8001316:	460b      	mov	r3, r1
 8001318:	4602      	mov	r2, r0
 800131a:	a106      	add	r1, pc, #24	; (adr r1, 8001334 <ic_int_set_maxf+0x28>)
 800131c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001320:	f003 fd40 	bl	8004da4 <__aeabi_ddiv>
 8001324:	f003 fe26 	bl	8004f74 <__aeabi_d2iz>
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <ic_int_set_maxf+0x24>)
 800132a:	60d8      	str	r0, [r3, #12]
 800132c:	bd08      	pop	{r3, pc}
 800132e:	bf00      	nop
 8001330:	200009b8 	.word	0x200009b8
 8001334:	00000000 	.word	0x00000000
 8001338:	40f12a88 	.word	0x40f12a88

0800133c <TIM4_IRQHandler>:
/**
 * @brief Handler for TIM4 global interrupt
 * @details TIM4 handler. Sets minimum frequency that can be
 * measured.
 */
void TIM4_IRQHandler(void) {
 800133c:	b508      	push	{r3, lr}

  if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <TIM4_IRQHandler+0x20>)
 8001340:	2101      	movs	r1, #1
 8001342:	f002 fec3 	bl	80040cc <TIM_GetITStatus>
 8001346:	b138      	cbz	r0, 8001358 <TIM4_IRQHandler+0x1c>
    //if the count overflows assume frequency is 0
    _ge_ic_int_ovf = true;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <TIM4_IRQHandler+0x24>)
    TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <TIM4_IRQHandler+0x20>)
 */
void TIM4_IRQHandler(void) {

  if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
    //if the count overflows assume frequency is 0
    _ge_ic_int_ovf = true;
 800134c:	2101      	movs	r1, #1
 800134e:	7219      	strb	r1, [r3, #8]
    TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
  }
}
 8001350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void TIM4_IRQHandler(void) {

  if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
    //if the count overflows assume frequency is 0
    _ge_ic_int_ovf = true;
    TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8001354:	f002 bec4 	b.w	80040e0 <TIM_ClearITPendingBit>
 8001358:	bd08      	pop	{r3, pc}
 800135a:	bf00      	nop
 800135c:	40000800 	.word	0x40000800
 8001360:	200009b8 	.word	0x200009b8

08001364 <EXTI15_10_IRQHandler>:
 * @brief Handler for external interrupt
 * @details Handler calculates how many timer ticks have occured
 * since last external interrupt event. Resets the timer count
 * to 0 after interrupt.
 */
void EXTI15_10_IRQHandler(void) {
 8001364:	b538      	push	{r3, r4, r5, lr}
  /* Make sure that interrupt flag is set */
  if (EXTI_GetITStatus(EXTI_Line10) != RESET) {
 8001366:	200a      	movs	r0, #10
 8001368:	f001 f894 	bl	8002494 <EXTI_GetITStatus>
 800136c:	b330      	cbz	r0, 80013bc <EXTI15_10_IRQHandler+0x58>
    /* Do your stuff when PB10 is changed */
    //check if overflowed
    if (_ge_ic_int_ovf) {
 800136e:	4c14      	ldr	r4, [pc, #80]	; (80013c0 <EXTI15_10_IRQHandler+0x5c>)
 8001370:	7a23      	ldrb	r3, [r4, #8]
 8001372:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8001376:	b12b      	cbz	r3, 8001384 <EXTI15_10_IRQHandler+0x20>
      //set count as 0
      _ge_ic_int_count = 0;
 8001378:	2100      	movs	r1, #0
 800137a:	6021      	str	r1, [r4, #0]
      _ge_ic_int_last_count = 0;
      //clear overflow flag
      _ge_ic_int_ovf = false;
      //reset count
      TIM_SetCounter(TIM4, 0);
 800137c:	4811      	ldr	r0, [pc, #68]	; (80013c4 <EXTI15_10_IRQHandler+0x60>)
    /* Do your stuff when PB10 is changed */
    //check if overflowed
    if (_ge_ic_int_ovf) {
      //set count as 0
      _ge_ic_int_count = 0;
      _ge_ic_int_last_count = 0;
 800137e:	6061      	str	r1, [r4, #4]
      //clear overflow flag
      _ge_ic_int_ovf = false;
 8001380:	7221      	strb	r1, [r4, #8]
 8001382:	e00c      	b.n	800139e <EXTI15_10_IRQHandler+0x3a>
      //reset count
      TIM_SetCounter(TIM4, 0);
    } else {
      //get count
      uint32_t count = TIM_GetCounter(TIM4);
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <EXTI15_10_IRQHandler+0x60>)
 8001386:	f002 f9c3 	bl	8003710 <TIM_GetCounter>
      if (count >= _ge_ic_min_count) {
 800138a:	68e2      	ldr	r2, [r4, #12]
 800138c:	4290      	cmp	r0, r2
      _ge_ic_int_ovf = false;
      //reset count
      TIM_SetCounter(TIM4, 0);
    } else {
      //get count
      uint32_t count = TIM_GetCounter(TIM4);
 800138e:	4603      	mov	r3, r0
      if (count >= _ge_ic_min_count) {
 8001390:	d308      	bcc.n	80013a4 <EXTI15_10_IRQHandler+0x40>
        _ge_ic_int_last_count = _ge_ic_int_count;
 8001392:	6822      	ldr	r2, [r4, #0]
 8001394:	6062      	str	r2, [r4, #4]
        _ge_ic_int_count = count;
 8001396:	6020      	str	r0, [r4, #0]
        //clear overflow flag
        _ge_ic_int_ovf = false;
        //reset count
        TIM_SetCounter(TIM4, 0);
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <EXTI15_10_IRQHandler+0x60>)
      uint32_t count = TIM_GetCounter(TIM4);
      if (count >= _ge_ic_min_count) {
        _ge_ic_int_last_count = _ge_ic_int_count;
        _ge_ic_int_count = count;
        //clear overflow flag
        _ge_ic_int_ovf = false;
 800139a:	7225      	strb	r5, [r4, #8]
        //reset count
        TIM_SetCounter(TIM4, 0);
 800139c:	4629      	mov	r1, r5
 800139e:	f002 f9b3 	bl	8003708 <TIM_SetCounter>
 80013a2:	e006      	b.n	80013b2 <EXTI15_10_IRQHandler+0x4e>
      } else {
        TIM_SetCounter(TIM4, _ge_ic_int_count + count);
 80013a4:	6821      	ldr	r1, [r4, #0]
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <EXTI15_10_IRQHandler+0x60>)
 80013a8:	4419      	add	r1, r3
 80013aa:	f002 f9ad 	bl	8003708 <TIM_SetCounter>
        _ge_ic_int_count = _ge_ic_int_last_count;
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	6023      	str	r3, [r4, #0]
      }
    }

    /* Clear interrupt flag */
    EXTI_ClearITPendingBit(EXTI_Line10);
 80013b2:	200a      	movs	r0, #10
  }
 80013b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _ge_ic_int_count = _ge_ic_int_last_count;
      }
    }

    /* Clear interrupt flag */
    EXTI_ClearITPendingBit(EXTI_Line10);
 80013b8:	f001 b880 	b.w	80024bc <EXTI_ClearITPendingBit>
 80013bc:	bd38      	pop	{r3, r4, r5, pc}
 80013be:	bf00      	nop
 80013c0:	200009b8 	.word	0x200009b8
 80013c4:	40000800 	.word	0x40000800

080013c8 <pwm_init>:
 * @brief Initialize PWM library
 * @details Initializes the PWM library. This includes setting
 * up TIM1 as the PWM timer and enabling the output compare
 * channels on TIM1.
 */
void pwm_init(void) {
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  // initialize PWM period
  _ge_pwm_period = 65535;
 80013ca:	4c32      	ldr	r4, [pc, #200]	; (8001494 <pwm_init+0xcc>)
 * @brief Initialize PWM library
 * @details Initializes the PWM library. This includes setting
 * up TIM1 as the PWM timer and enabling the output compare
 * channels on TIM1.
 */
void pwm_init(void) {
 80013cc:	b089      	sub	sp, #36	; 0x24
  // initialize PWM period
  _ge_pwm_period = 65535;
 80013ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseInitTypeDef TIM_TimeBase_InitStructure;
  TIM_OCInitTypeDef TIM_OC_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  // Setup TIM1
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80013d2:	2101      	movs	r1, #1
 80013d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 * up TIM1 as the PWM timer and enabling the output compare
 * channels on TIM1.
 */
void pwm_init(void) {
  // initialize PWM period
  _ge_pwm_period = 65535;
 80013d8:	6023      	str	r3, [r4, #0]
  TIM_TimeBaseInitTypeDef TIM_TimeBase_InitStructure;
  TIM_OCInitTypeDef TIM_OC_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  // Setup TIM1
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80013da:	f001 ff4b 	bl	8003274 <RCC_APB2PeriphClockCmd>

  TIM_TimeBaseStructInit(&TIM_TimeBase_InitStructure);
 80013de:	4668      	mov	r0, sp
 80013e0:	f002 f97c 	bl	80036dc <TIM_TimeBaseStructInit>
  TIM_OCStructInit(&TIM_OC_InitStructure);
 80013e4:	a803      	add	r0, sp, #12
 80013e6:	f002 fb51 	bl	8003a8c <TIM_OCStructInit>

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBase_InitStructure.TIM_Period = _ge_pwm_period;
 80013ea:	6823      	ldr	r3, [r4, #0]
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0; // 72 Mhz
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &TIM_TimeBase_InitStructure);
 80013ec:	4c2a      	ldr	r4, [pc, #168]	; (8001498 <pwm_init+0xd0>)
  TIM_TimeBaseStructInit(&TIM_TimeBase_InitStructure);
  TIM_OCStructInit(&TIM_OC_InitStructure);

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBase_InitStructure.TIM_Period = _ge_pwm_period;
 80013ee:	9301      	str	r3, [sp, #4]
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

  TIM_TimeBaseStructInit(&TIM_TimeBase_InitStructure);
  TIM_OCStructInit(&TIM_OC_InitStructure);

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80013f0:	2500      	movs	r5, #0
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBase_InitStructure.TIM_Period = _ge_pwm_period;
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0; // 72 Mhz
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &TIM_TimeBase_InitStructure);
 80013f2:	4620      	mov	r0, r4
 80013f4:	4669      	mov	r1, sp
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

  TIM_TimeBaseStructInit(&TIM_TimeBase_InitStructure);
  TIM_OCStructInit(&TIM_OC_InitStructure);

  TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80013f6:	f8ad 5008 	strh.w	r5, [sp, #8]
  TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80013fa:	f8ad 5002 	strh.w	r5, [sp, #2]
  TIM_TimeBase_InitStructure.TIM_Period = _ge_pwm_period;
  TIM_TimeBase_InitStructure.TIM_Prescaler = 0; // 72 Mhz
 80013fe:	f8ad 5000 	strh.w	r5, [sp]
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
 8001402:	f88d 500a 	strb.w	r5, [sp, #10]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBase_InitStructure);
 8001406:	f002 f911 	bl	800362c <TIM_TimeBaseInit>

  // Enable OC channels
  TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800140a:	2360      	movs	r3, #96	; 0x60
 800140c:	9303      	str	r3, [sp, #12]
  TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OC_InitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800140e:	2304      	movs	r3, #4
 8001410:	f8ad 3012 	strh.w	r3, [sp, #18]
  TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC_InitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
  TIM_OC_InitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
  // Enable OC channels
  TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OC_InitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
  TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC_InitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8001418:	2608      	movs	r6, #8
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &TIM_TimeBase_InitStructure);

  // Enable OC channels
  TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800141a:	2701      	movs	r7, #1
  TIM_OC_InitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
  TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC_InitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
  TIM_OC_InitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800141c:	f8ad 301c 	strh.w	r3, [sp, #28]
  TIM_OC_InitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
  TIM_OC_InitStructure.TIM_Pulse = 65536/2 - 1;

  // enable channels 1, 2, 3, and 4
  TIM_OC1Init(TIM1, &TIM_OC_InitStructure);
 8001420:	4620      	mov	r0, r4
  TIM_OC_InitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
  TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC_InitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
  TIM_OC_InitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
  TIM_OC_InitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
  TIM_OC_InitStructure.TIM_Pulse = 65536/2 - 1;
 8001422:	f647 73ff 	movw	r3, #32767	; 0x7fff

  // enable channels 1, 2, 3, and 4
  TIM_OC1Init(TIM1, &TIM_OC_InitStructure);
 8001426:	a903      	add	r1, sp, #12
  TIM_OC_InitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
  TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC_InitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
  TIM_OC_InitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
  TIM_OC_InitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
  TIM_OC_InitStructure.TIM_Pulse = 65536/2 - 1;
 8001428:	9305      	str	r3, [sp, #20]
  TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &TIM_TimeBase_InitStructure);

  // Enable OC channels
  TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800142a:	f8ad 7010 	strh.w	r7, [sp, #16]
  TIM_OC_InitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
  TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800142e:	f8ad 5018 	strh.w	r5, [sp, #24]
  TIM_OC_InitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8001432:	f8ad 601a 	strh.w	r6, [sp, #26]
  TIM_OC_InitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
  TIM_OC_InitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8001436:	f8ad 501e 	strh.w	r5, [sp, #30]
  TIM_OC_InitStructure.TIM_Pulse = 65536/2 - 1;

  // enable channels 1, 2, 3, and 4
  TIM_OC1Init(TIM1, &TIM_OC_InitStructure);
 800143a:	f002 f9cd 	bl	80037d8 <TIM_OC1Init>
  TIM_OC1PreloadConfig (TIM1, TIM_OCPreload_Enable);
 800143e:	4620      	mov	r0, r4
 8001440:	4631      	mov	r1, r6
 8001442:	f002 fb91 	bl	8003b68 <TIM_OC1PreloadConfig>

  TIM_OC2Init(TIM1, &TIM_OC_InitStructure);
 8001446:	4620      	mov	r0, r4
 8001448:	a903      	add	r1, sp, #12
 800144a:	f002 fa0d 	bl	8003868 <TIM_OC2Init>
  TIM_OC2PreloadConfig (TIM1, TIM_OCPreload_Enable);
 800144e:	4620      	mov	r0, r4
 8001450:	4631      	mov	r1, r6
 8001452:	f002 fb8f 	bl	8003b74 <TIM_OC2PreloadConfig>

  TIM_OC3Init(TIM1, &TIM_OC_InitStructure);
 8001456:	4620      	mov	r0, r4
 8001458:	a903      	add	r1, sp, #12
 800145a:	f002 fa3f 	bl	80038dc <TIM_OC3Init>
  TIM_OC3PreloadConfig (TIM1, TIM_OCPreload_Enable);
 800145e:	4620      	mov	r0, r4
 8001460:	4631      	mov	r1, r6
 8001462:	f002 fb8f 	bl	8003b84 <TIM_OC3PreloadConfig>

  TIM_OC4Init(TIM1, &TIM_OC_InitStructure);
 8001466:	4620      	mov	r0, r4
 8001468:	a903      	add	r1, sp, #12
 800146a:	f002 fa6f 	bl	800394c <TIM_OC4Init>
  TIM_OC4PreloadConfig (TIM1, TIM_OCPreload_Enable);
 800146e:	4620      	mov	r0, r4
 8001470:	4631      	mov	r1, r6
 8001472:	f002 fb8d 	bl	8003b90 <TIM_OC4PreloadConfig>

  TIM_ARRPreloadConfig(TIM1, DISABLE);
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f002 f979 	bl	8003770 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM1, ENABLE);
 800147e:	4620      	mov	r0, r4
 8001480:	4639      	mov	r1, r7
 8001482:	f002 f99b 	bl	80037bc <TIM_Cmd>

  TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8001486:	4620      	mov	r0, r4
 8001488:	4639      	mov	r1, r7
 800148a:	f002 fde5 	bl	8004058 <TIM_CtrlPWMOutputs>
}
 800148e:	b009      	add	sp, #36	; 0x24
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001492:	bf00      	nop
 8001494:	20001364 	.word	0x20001364
 8001498:	40012c00 	.word	0x40012c00

0800149c <pwm_set_pin>:
 * @return The associated timer channel for the pin. Or PWM_PIN_INVALID
 * if the pin is not a valid PWM pin.
 */
int pwm_set_pin(int pin) {
  //check if valid pin
  if (!IS_PWM_PIN(pin))
 800149c:	f1a0 0308 	sub.w	r3, r0, #8
 80014a0:	2b03      	cmp	r3, #3
 * 
 * @param pin Pin name to connect to. @ref ge_pins.h
 * @return The associated timer channel for the pin. Or PWM_PIN_INVALID
 * if the pin is not a valid PWM pin.
 */
int pwm_set_pin(int pin) {
 80014a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014a6:	4604      	mov	r4, r0
  //check if valid pin
  if (!IS_PWM_PIN(pin))
 80014a8:	d909      	bls.n	80014be <pwm_set_pin+0x22>
 80014aa:	2849      	cmp	r0, #73	; 0x49
 80014ac:	d016      	beq.n	80014dc <pwm_set_pin+0x40>
 80014ae:	284b      	cmp	r0, #75	; 0x4b
 80014b0:	d016      	beq.n	80014e0 <pwm_set_pin+0x44>
 80014b2:	284d      	cmp	r0, #77	; 0x4d
 80014b4:	d016      	beq.n	80014e4 <pwm_set_pin+0x48>
 80014b6:	284e      	cmp	r0, #78	; 0x4e
 80014b8:	d13b      	bne.n	8001532 <pwm_set_pin+0x96>
      pin_af = GPIO_AF_2;
      chan = PWM_CHAN3;
      break;
    case PE14:
      pin_af = GPIO_AF_2;
      chan = PWM_CHAN4;
 80014ba:	2504      	movs	r5, #4
 80014bc:	e013      	b.n	80014e6 <pwm_set_pin+0x4a>
    return PWM_PIN_INVALID;

  //select appropriate alternate function
  uint8_t pin_af;
  int chan;
  switch (pin) {
 80014be:	280a      	cmp	r0, #10
 80014c0:	d006      	beq.n	80014d0 <pwm_set_pin+0x34>
 80014c2:	280b      	cmp	r0, #11
 80014c4:	d007      	beq.n	80014d6 <pwm_set_pin+0x3a>
    case PA8:
      pin_af = GPIO_AF_6;
      chan = PWM_CHAN1;
 80014c6:	2809      	cmp	r0, #9
 80014c8:	bf0c      	ite	eq
 80014ca:	2502      	moveq	r5, #2
 80014cc:	2501      	movne	r5, #1
 80014ce:	e000      	b.n	80014d2 <pwm_set_pin+0x36>
      pin_af = GPIO_AF_6;
      chan = PWM_CHAN2;
      break;
    case PA10:
      pin_af = GPIO_AF_6;
      chan = PWM_CHAN3;
 80014d0:	2503      	movs	r5, #3
    case PA9:
      pin_af = GPIO_AF_6;
      chan = PWM_CHAN2;
      break;
    case PA10:
      pin_af = GPIO_AF_6;
 80014d2:	2606      	movs	r6, #6
      chan = PWM_CHAN3;
      break;
 80014d4:	e008      	b.n	80014e8 <pwm_set_pin+0x4c>
    case PA11:
      pin_af = GPIO_AF_11;
      chan = PWM_CHAN4;
 80014d6:	2504      	movs	r5, #4
    case PA10:
      pin_af = GPIO_AF_6;
      chan = PWM_CHAN3;
      break;
    case PA11:
      pin_af = GPIO_AF_11;
 80014d8:	4606      	mov	r6, r0
      chan = PWM_CHAN4;
      break;
 80014da:	e005      	b.n	80014e8 <pwm_set_pin+0x4c>
    case PE9:
      pin_af = GPIO_AF_2;
      chan = PWM_CHAN1;
 80014dc:	2501      	movs	r5, #1
 80014de:	e002      	b.n	80014e6 <pwm_set_pin+0x4a>
      break;
    case PE11:
      pin_af = GPIO_AF_2;
      chan = PWM_CHAN2;
 80014e0:	2502      	movs	r5, #2
 80014e2:	e000      	b.n	80014e6 <pwm_set_pin+0x4a>
      break;
    case PE13:
      pin_af = GPIO_AF_2;
      chan = PWM_CHAN3;
 80014e4:	2503      	movs	r5, #3
    case PE11:
      pin_af = GPIO_AF_2;
      chan = PWM_CHAN2;
      break;
    case PE13:
      pin_af = GPIO_AF_2;
 80014e6:	2602      	movs	r6, #2

  //Initialize associate GPIO
  GPIO_InitTypeDef pwm_pin_struct;
  GPIO_StructInit(&pwm_pin_struct);

  pwm_pin_struct.GPIO_Pin = _ge_pin_num[pin];
 80014e8:	4f14      	ldr	r7, [pc, #80]	; (800153c <pwm_set_pin+0xa0>)
      break;  
  }

  //Initialize associate GPIO
  GPIO_InitTypeDef pwm_pin_struct;
  GPIO_StructInit(&pwm_pin_struct);
 80014ea:	4668      	mov	r0, sp
 80014ec:	f001 fb8c 	bl	8002c08 <GPIO_StructInit>

  pwm_pin_struct.GPIO_Pin = _ge_pin_num[pin];
 80014f0:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 80014f4:	9300      	str	r3, [sp, #0]
  pwm_pin_struct.GPIO_OType = GPIO_OType_PP;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f88d 3006 	strb.w	r3, [sp, #6]
  pwm_pin_struct.GPIO_PuPd = GPIO_PuPd_UP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f88d 3007 	strb.w	r3, [sp, #7]
  pwm_pin_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8001502:	2303      	movs	r3, #3
 8001504:	f88d 3005 	strb.w	r3, [sp, #5]
  pwm_pin_struct.GPIO_Mode = GPIO_Mode_AF;
 8001508:	2302      	movs	r3, #2
 800150a:	f88d 3004 	strb.w	r3, [sp, #4]

  GPIO_Init(_ge_pin_port[pin], &pwm_pin_struct);
 800150e:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  //set alternate function
  GPIO_PinAFConfig(_ge_pin_port[pin], _ge_pin_source[pin], pin_af);
 8001512:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  pwm_pin_struct.GPIO_OType = GPIO_OType_PP;
  pwm_pin_struct.GPIO_PuPd = GPIO_PuPd_UP;
  pwm_pin_struct.GPIO_Speed = GPIO_Speed_50MHz;
  pwm_pin_struct.GPIO_Mode = GPIO_Mode_AF;

  GPIO_Init(_ge_pin_port[pin], &pwm_pin_struct);
 8001516:	f8d3 80b0 	ldr.w	r8, [r3, #176]	; 0xb0
 800151a:	4669      	mov	r1, sp
 800151c:	4640      	mov	r0, r8
 800151e:	f001 fb15 	bl	8002b4c <GPIO_Init>
  //set alternate function
  GPIO_PinAFConfig(_ge_pin_port[pin], _ge_pin_source[pin], pin_af);
 8001522:	4640      	mov	r0, r8
 8001524:	f8b4 120c 	ldrh.w	r1, [r4, #524]	; 0x20c
 8001528:	4632      	mov	r2, r6
 800152a:	f001 fb9f 	bl	8002c6c <GPIO_PinAFConfig>

  //return the connected channel
  return chan;
 800152e:	4628      	mov	r0, r5
 8001530:	e001      	b.n	8001536 <pwm_set_pin+0x9a>
 * if the pin is not a valid PWM pin.
 */
int pwm_set_pin(int pin) {
  //check if valid pin
  if (!IS_PWM_PIN(pin))
    return PWM_PIN_INVALID;
 8001532:	f04f 30ff 	mov.w	r0, #4294967295
  //set alternate function
  GPIO_PinAFConfig(_ge_pin_port[pin], _ge_pin_source[pin], pin_af);

  //return the connected channel
  return chan;
}
 8001536:	b002      	add	sp, #8
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800153c:	08009cd0 	.word	0x08009cd0

08001540 <pwm_get_max_int>:
 * @return Max integer for output compare
 */
int pwm_get_max_int()
{
	return _ge_pwm_period;
}
 8001540:	4b01      	ldr	r3, [pc, #4]	; (8001548 <pwm_get_max_int+0x8>)
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20001364 	.word	0x20001364

0800154c <pwm_set_int>:
 * @param chan Channel to set (between 1-4)
 * @param compare_val Integer value to set register
 */
void pwm_set_int(int chan, int compare_val)
{
	 switch(chan) {
 800154c:	3801      	subs	r0, #1
 800154e:	2803      	cmp	r0, #3
 8001550:	d80f      	bhi.n	8001572 <pwm_set_int+0x26>
 8001552:	e8df f000 	tbb	[pc, r0]
 8001556:	0502      	.short	0x0502
 8001558:	0b08      	.short	0x0b08
	    case 1:
	      TIM_SetCompare1(TIM1, compare_val);
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <pwm_set_int+0x28>)
 800155c:	f002 baca 	b.w	8003af4 <TIM_SetCompare1>
	      break;
	    case 2:
	      TIM_SetCompare2(TIM1, compare_val);
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <pwm_set_int+0x28>)
 8001562:	f002 bac9 	b.w	8003af8 <TIM_SetCompare2>
	      break;
	    case 3:
	      TIM_SetCompare3(TIM1, compare_val);
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <pwm_set_int+0x28>)
 8001568:	f002 bac8 	b.w	8003afc <TIM_SetCompare3>
	      break;
	    case 4:
	      TIM_SetCompare4(TIM1, compare_val);
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <pwm_set_int+0x28>)
 800156e:	f002 bac7 	b.w	8003b00 <TIM_SetCompare4>
 8001572:	4770      	bx	lr
 8001574:	40012c00 	.word	0x40012c00

08001578 <pwm_set>:
 * 
 * @param chan Channel to set (between 1-4)
 * @param duty Duty cycle for PWM pin (between 0-1.0)
 */
void pwm_set(int chan, float duty) {
  int compare_val = (int)(duty*(float)_ge_pwm_period);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <pwm_set+0x1c>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	ee20 0a27 	vmul.f32	s0, s0, s15
  pwm_set_int(chan,compare_val);
 8001586:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800158a:	ee17 1a90 	vmov	r1, s15
 800158e:	f7ff bfdd 	b.w	800154c <pwm_set_int>
 8001592:	bf00      	nop
 8001594:	20001364 	.word	0x20001364

08001598 <pwm_freq>:
 * frequency of the PWM signal.
 * 
 * @param freq Frequency to set in Hz as a float
 * @return The actual achieved frequency
 */
float pwm_freq(float freq) {
 8001598:	b510      	push	{r4, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
  float base_freq = 72000000.0; //arm clock frequency
  float actual_freq = 0.0;

  //calculate period relative to master clock
  float master_period = base_freq/freq;
 800159e:	eddf 8a25 	vldr	s17, [pc, #148]	; 8001634 <pwm_freq+0x9c>

  int prescaler = 0;

  // handle high frequency cases where we must shorten our period
  if (master_period <= 65536) {
 80015a2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001638 <pwm_freq+0xa0>
 80015a6:	4c25      	ldr	r4, [pc, #148]	; (800163c <pwm_freq+0xa4>)
float pwm_freq(float freq) {
  float base_freq = 72000000.0; //arm clock frequency
  float actual_freq = 0.0;

  //calculate period relative to master clock
  float master_period = base_freq/freq;
 80015a8:	eec8 7a80 	vdiv.f32	s15, s17, s0
 * frequency of the PWM signal.
 * 
 * @param freq Frequency to set in Hz as a float
 * @return The actual achieved frequency
 */
float pwm_freq(float freq) {
 80015ac:	eeb0 8a40 	vmov.f32	s16, s0
  float master_period = base_freq/freq;

  int prescaler = 0;

  // handle high frequency cases where we must shorten our period
  if (master_period <= 65536) {
 80015b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	d80d      	bhi.n	80015d6 <pwm_freq+0x3e>
    _ge_pwm_period = (int)master_period - 1;
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  float actual_freq = 0.0;

  //calculate period relative to master clock
  float master_period = base_freq/freq;

  int prescaler = 0;
 80015be:	2100      	movs	r1, #0

  // handle high frequency cases where we must shorten our period
  if (master_period <= 65536) {
    _ge_pwm_period = (int)master_period - 1;
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	3b01      	subs	r3, #1
    actual_freq = base_freq/(float)_ge_pwm_period;
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  int prescaler = 0;

  // handle high frequency cases where we must shorten our period
  if (master_period <= 65536) {
    _ge_pwm_period = (int)master_period - 1;
 80015ce:	6023      	str	r3, [r4, #0]
    actual_freq = base_freq/(float)_ge_pwm_period;
 80015d0:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 80015d4:	e01f      	b.n	8001616 <pwm_freq+0x7e>
  } else {
    prescaler = (int)((master_period/65536.0));
 80015d6:	ee17 0a90 	vmov	r0, s15
 80015da:	f003 fa65 	bl	8004aa8 <__aeabi_f2d>
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <pwm_freq+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f003 fab5 	bl	8004b50 <__aeabi_dmul>
 80015e6:	f003 fcc5 	bl	8004f74 <__aeabi_d2iz>
    float new_freq = base_freq/((float)(prescaler + 1));
 80015ea:	1c43      	adds	r3, r0, #1
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  // handle high frequency cases where we must shorten our period
  if (master_period <= 65536) {
    _ge_pwm_period = (int)master_period - 1;
    actual_freq = base_freq/(float)_ge_pwm_period;
  } else {
    prescaler = (int)((master_period/65536.0));
 80015f4:	4601      	mov	r1, r0
    float new_freq = base_freq/((float)(prescaler + 1));
 80015f6:	eec8 8aa7 	vdiv.f32	s17, s17, s15
    _ge_pwm_period = (int)(new_freq/freq) - 1;
 80015fa:	ee88 8a88 	vdiv.f32	s16, s17, s16
 80015fe:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8001602:	ee18 3a10 	vmov	r3, s16
 8001606:	3b01      	subs	r3, #1
    actual_freq = new_freq/(float)_ge_pwm_period;
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    _ge_pwm_period = (int)master_period - 1;
    actual_freq = base_freq/(float)_ge_pwm_period;
  } else {
    prescaler = (int)((master_period/65536.0));
    float new_freq = base_freq/((float)(prescaler + 1));
    _ge_pwm_period = (int)(new_freq/freq) - 1;
 8001610:	6023      	str	r3, [r4, #0]
    actual_freq = new_freq/(float)_ge_pwm_period;
 8001612:	ee88 8a88 	vdiv.f32	s16, s17, s16
  }

  TIM_PrescalerConfig(TIM1, prescaler, TIM_PSCReloadMode_Update);
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <pwm_freq+0xac>)
 8001618:	b289      	uxth	r1, r1
 800161a:	2200      	movs	r2, #0
 800161c:	f002 f868 	bl	80036f0 <TIM_PrescalerConfig>
  TIM_SetAutoreload(TIM1, _ge_pwm_period);
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <pwm_freq+0xac>)
 8001622:	6821      	ldr	r1, [r4, #0]
 8001624:	f002 f872 	bl	800370c <TIM_SetAutoreload>

  return actual_freq;
}
 8001628:	eeb0 0a48 	vmov.f32	s0, s16
 800162c:	ecbd 8b02 	vpop	{d8}
 8001630:	bd10      	pop	{r4, pc}
 8001632:	bf00      	nop
 8001634:	4c895440 	.word	0x4c895440
 8001638:	47800000 	.word	0x47800000
 800163c:	20001364 	.word	0x20001364
 8001640:	3ef00000 	.word	0x3ef00000
 8001644:	40012c00 	.word	0x40012c00

08001648 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001648:	b538      	push	{r3, r4, r5, lr}

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800164a:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <EE_VerifyPageFullWriteVariable+0x68>)
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <EE_VerifyPageFullWriteVariable+0x6c>)
 800164e:	881b      	ldrh	r3, [r3, #0]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001650:	8812      	ldrh	r2, [r2, #0]
 8001652:	b292      	uxth	r2, r2
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001654:	4605      	mov	r5, r0
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001656:	b29b      	uxth	r3, r3

  /* Write or read operation */
  switch (Operation)
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001658:	b92a      	cbnz	r2, 8001666 <EE_VerifyPageFullWriteVariable+0x1e>
      else if (PageStatus0 == VALID_PAGE)
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
        {
          return PAGE1;         /* Page1 valid */
 800165a:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	bf18      	it	ne
 8001662:	2301      	movne	r3, #1
 8001664:	e008      	b.n	8001678 <EE_VerifyPageFullWriteVariable+0x30>
        else
        {
          return PAGE1;         /* Page1 valid */
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001666:	b92b      	cbnz	r3, 8001674 <EE_VerifyPageFullWriteVariable+0x2c>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
        {
          return PAGE1;         /* Page1 valid */
 8001668:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	4253      	negs	r3, r2
 8001670:	4153      	adcs	r3, r2
 8001672:	e001      	b.n	8001678 <EE_VerifyPageFullWriteVariable+0x30>
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
  {
    return  NO_VALID_PAGE;
 8001674:	20ab      	movs	r0, #171	; 0xab
 8001676:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001678:	02db      	lsls	r3, r3, #11

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <EE_VerifyPageFullWriteVariable+0x70>)
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800167c:	f103 6400 	add.w	r4, r3, #134217728	; 0x8000000
 8001680:	f504 3480 	add.w	r4, r4, #65536	; 0x10000

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001684:	441a      	add	r2, r3

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8001686:	4294      	cmp	r4, r2
 8001688:	d20f      	bcs.n	80016aa <EE_VerifyPageFullWriteVariable+0x62>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	d10a      	bne.n	80016a6 <EE_VerifyPageFullWriteVariable+0x5e>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 8001690:	4620      	mov	r0, r4
 8001692:	f001 f845 	bl	8002720 <FLASH_ProgramHalfWord>
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 8001696:	2804      	cmp	r0, #4
 8001698:	d103      	bne.n	80016a2 <EE_VerifyPageFullWriteVariable+0x5a>
      {
        return FlashStatus;
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 800169a:	1ca0      	adds	r0, r4, #2
 800169c:	4629      	mov	r1, r5
 800169e:	f001 f83f 	bl	8002720 <FLASH_ProgramHalfWord>
      /* Return program operation status */
      return FlashStatus;
 80016a2:	b280      	uxth	r0, r0
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80016a6:	3404      	adds	r4, #4
 80016a8:	e7ed      	b.n	8001686 <EE_VerifyPageFullWriteVariable+0x3e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80016aa:	2080      	movs	r0, #128	; 0x80
 80016ac:	bd38      	pop	{r3, r4, r5, pc}
 80016ae:	bf00      	nop
 80016b0:	08010800 	.word	0x08010800
 80016b4:	08010000 	.word	0x08010000
 80016b8:	080107fe 	.word	0x080107fe

080016bc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 80016bc:	b508      	push	{r3, lr}
  FLASH_Status FlashStatus = FLASH_COMPLETE;

  /* Erase Page0 */
  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <EE_Format+0x24>)
 80016c0:	f000 ffc2 	bl	8002648 <FLASH_ErasePage>

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80016c4:	2804      	cmp	r0, #4
 80016c6:	d10a      	bne.n	80016de <EE_Format+0x22>
  {
    return FlashStatus;
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <EE_Format+0x24>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	f001 f828 	bl	8002720 <FLASH_ProgramHalfWord>

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80016d0:	2804      	cmp	r0, #4
 80016d2:	d104      	bne.n	80016de <EE_Format+0x22>
  {
    return FlashStatus;
  }

  /* Erase Page1 */
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <EE_Format+0x28>)

  /* Return Page1 erase operation status */
  return FlashStatus;
}
 80016d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    return FlashStatus;
  }

  /* Erase Page1 */
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80016da:	f000 bfb5 	b.w	8002648 <FLASH_ErasePage>

  /* Return Page1 erase operation status */
  return FlashStatus;
}
 80016de:	bd08      	pop	{r3, pc}
 80016e0:	08010000 	.word	0x08010000
 80016e4:	08010800 	.word	0x08010800

080016e8 <EE_ReadVariable>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <EE_ReadVariable+0x40>)

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <EE_ReadVariable+0x44>)
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80016ec:	881b      	ldrh	r3, [r3, #0]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80016ee:	8812      	ldrh	r2, [r2, #0]
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80016f0:	b29b      	uxth	r3, r3
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80016f2:	b510      	push	{r4, lr}

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80016f4:	b292      	uxth	r2, r2
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80016f6:	b11b      	cbz	r3, 8001700 <EE_ReadVariable+0x18>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (PageStatus1 == VALID_PAGE)
 80016f8:	b10a      	cbz	r2, 80016fe <EE_ReadVariable+0x16>
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
  {
    return  NO_VALID_PAGE;
 80016fa:	20ab      	movs	r0, #171	; 0xab
 80016fc:	bd10      	pop	{r4, pc}
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (PageStatus1 == VALID_PAGE)
      {
        return PAGE1;           /* Page1 valid */
 80016fe:	2301      	movs	r3, #1

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <EE_ReadVariable+0x48>)
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001702:	02db      	lsls	r3, r3, #11

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001704:	441a      	add	r2, r3

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001706:	4c0b      	ldr	r4, [pc, #44]	; (8001734 <EE_ReadVariable+0x4c>)
 8001708:	441c      	add	r4, r3
 800170a:	42a2      	cmp	r2, r4
 800170c:	d90a      	bls.n	8001724 <EE_ReadVariable+0x3c>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800170e:	8814      	ldrh	r4, [r2, #0]
 8001710:	b2a4      	uxth	r4, r4

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001712:	4284      	cmp	r4, r0
 8001714:	d104      	bne.n	8001720 <EE_ReadVariable+0x38>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8001716:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800171a:	800b      	strh	r3, [r1, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800171c:	2000      	movs	r0, #0

      break;
 800171e:	bd10      	pop	{r4, pc}
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8001720:	3a04      	subs	r2, #4
 8001722:	e7f0      	b.n	8001706 <EE_ReadVariable+0x1e>
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
  uint16_t ValidPage = PAGE0;
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001724:	2001      	movs	r0, #1
 8001726:	bd10      	pop	{r4, pc}
 8001728:	08010000 	.word	0x08010000
 800172c:	08010800 	.word	0x08010800
 8001730:	080107fe 	.word	0x080107fe
 8001734:	08010002 	.word	0x08010002

08001738 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t EepromStatus = 0, ReadStatus = 0;
  int16_t x = -1;
  uint16_t  FlashStatus;

  //Initialize virtual address table
  for (int i = 0; i < NB_OF_VAR; i++) {
 800173c:	2300      	movs	r3, #0
    VirtAddVarTab[i] = i;
 800173e:	4d47      	ldr	r5, [pc, #284]	; (800185c <EE_Init+0x124>)
 8001740:	f825 3013 	strh.w	r3, [r5, r3, lsl #1]
  uint16_t EepromStatus = 0, ReadStatus = 0;
  int16_t x = -1;
  uint16_t  FlashStatus;

  //Initialize virtual address table
  for (int i = 0; i < NB_OF_VAR; i++) {
 8001744:	3301      	adds	r3, #1
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d1f9      	bne.n	800173e <EE_Init+0x6>
    VirtAddVarTab[i] = i;
  }

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800174a:	4f45      	ldr	r7, [pc, #276]	; (8001860 <EE_Init+0x128>)
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800174c:	4e45      	ldr	r6, [pc, #276]	; (8001864 <EE_Init+0x12c>)
  for (int i = 0; i < NB_OF_VAR; i++) {
    VirtAddVarTab[i] = i;
  }

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800174e:	883c      	ldrh	r4, [r7, #0]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001750:	8833      	ldrh	r3, [r6, #0]
  for (int i = 0; i < NB_OF_VAR; i++) {
    VirtAddVarTab[i] = i;
  }

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001752:	b2a4      	uxth	r4, r4
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001754:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8001758:	428c      	cmp	r4, r1
  }

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800175a:	b29b      	uxth	r3, r3
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001760:	d011      	beq.n	8001786 <EE_Init+0x4e>
 8001762:	4294      	cmp	r4, r2
 8001764:	d002      	beq.n	800176c <EE_Init+0x34>
 8001766:	2c00      	cmp	r4, #0
 8001768:	d173      	bne.n	8001852 <EE_Init+0x11a>
 800176a:	e043      	b.n	80017f4 <EE_Init+0xbc>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800176c:	b90b      	cbnz	r3, 8001772 <EE_Init+0x3a>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800176e:	4638      	mov	r0, r7
 8001770:	e06c      	b.n	800184c <EE_Init+0x114>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001772:	428b      	cmp	r3, r1
 8001774:	d16d      	bne.n	8001852 <EE_Init+0x11a>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8001776:	4638      	mov	r0, r7
 8001778:	f000 ff66 	bl	8002648 <FLASH_ErasePage>
 800177c:	b280      	uxth	r0, r0
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800177e:	2804      	cmp	r0, #4
 8001780:	d16a      	bne.n	8001858 <EE_Init+0x120>
        {
          return FlashStatus;
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001782:	4630      	mov	r0, r6
 8001784:	e032      	b.n	80017ec <EE_Init+0xb4>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001786:	bb43      	cbnz	r3, 80017da <EE_Init+0xa2>
 8001788:	461c      	mov	r4, r3
 800178a:	4616      	mov	r6, r2
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <EE_Init+0x130>)
 800178e:	f835 7014 	ldrh.w	r7, [r5, r4, lsl #1]
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	42bb      	cmp	r3, r7
          {
            x = VarIdx;
 8001798:	bf08      	it	eq
 800179a:	b2a6      	uxtheq	r6, r4
          }
          if (VarIdx != x)
 800179c:	b233      	sxth	r3, r6
 800179e:	429c      	cmp	r4, r3
 80017a0:	d00f      	beq.n	80017c2 <EE_Init+0x8a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80017a2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800185c <EE_Init+0x124>
 80017a6:	4638      	mov	r0, r7
 80017a8:	f508 71ff 	add.w	r1, r8, #510	; 0x1fe
 80017ac:	f7ff ff9c 	bl	80016e8 <EE_ReadVariable>
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80017b0:	2801      	cmp	r0, #1
 80017b2:	d006      	beq.n	80017c2 <EE_Init+0x8a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80017b4:	4638      	mov	r0, r7
 80017b6:	f8b8 11fe 	ldrh.w	r1, [r8, #510]	; 0x1fe
 80017ba:	f7ff ff45 	bl	8001648 <EE_VerifyPageFullWriteVariable>
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 80017be:	2804      	cmp	r0, #4
 80017c0:	d14a      	bne.n	8001858 <EE_Init+0x120>
 80017c2:	3401      	adds	r4, #1

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80017c4:	2cff      	cmp	r4, #255	; 0xff
 80017c6:	d1e1      	bne.n	800178c <EE_Init+0x54>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80017c8:	4825      	ldr	r0, [pc, #148]	; (8001860 <EE_Init+0x128>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	f000 ffa8 	bl	8002720 <FLASH_ProgramHalfWord>
 80017d0:	b280      	uxth	r0, r0
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 80017d2:	2804      	cmp	r0, #4
 80017d4:	d140      	bne.n	8001858 <EE_Init+0x120>
        {
          return FlashStatus;
        }
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80017d6:	4823      	ldr	r0, [pc, #140]	; (8001864 <EE_Init+0x12c>)
 80017d8:	e038      	b.n	800184c <EE_Init+0x114>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80017da:	4293      	cmp	r3, r2
 80017dc:	d139      	bne.n	8001852 <EE_Init+0x11a>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80017de:	4630      	mov	r0, r6
 80017e0:	f000 ff32 	bl	8002648 <FLASH_ErasePage>
 80017e4:	b280      	uxth	r0, r0
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 80017e6:	2804      	cmp	r0, #4
 80017e8:	d136      	bne.n	8001858 <EE_Init+0x120>
        {
          return FlashStatus;
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80017ea:	4638      	mov	r0, r7
 80017ec:	2100      	movs	r1, #0
 80017ee:	f000 ff97 	bl	8002720 <FLASH_ProgramHalfWord>
 80017f2:	e030      	b.n	8001856 <EE_Init+0x11e>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80017f4:	b36b      	cbz	r3, 8001852 <EE_Init+0x11a>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <EE_Init+0xc6>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 80017fa:	4630      	mov	r0, r6
 80017fc:	e026      	b.n	800184c <EE_Init+0x114>
 80017fe:	4616      	mov	r6, r2
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <EE_Init+0x134>)
 8001802:	f835 7014 	ldrh.w	r7, [r5, r4, lsl #1]
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	42bb      	cmp	r3, r7
          {
            x = VarIdx;
 800180c:	bf08      	it	eq
 800180e:	b2a6      	uxtheq	r6, r4
          }
          if (VarIdx != x)
 8001810:	b233      	sxth	r3, r6
 8001812:	429c      	cmp	r4, r3
 8001814:	d00f      	beq.n	8001836 <EE_Init+0xfe>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001816:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800185c <EE_Init+0x124>
 800181a:	4638      	mov	r0, r7
 800181c:	f508 71ff 	add.w	r1, r8, #510	; 0x1fe
 8001820:	f7ff ff62 	bl	80016e8 <EE_ReadVariable>
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001824:	2801      	cmp	r0, #1
 8001826:	d006      	beq.n	8001836 <EE_Init+0xfe>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001828:	4638      	mov	r0, r7
 800182a:	f8b8 11fe 	ldrh.w	r1, [r8, #510]	; 0x1fe
 800182e:	f7ff ff0b 	bl	8001648 <EE_VerifyPageFullWriteVariable>
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 8001832:	2804      	cmp	r0, #4
 8001834:	d110      	bne.n	8001858 <EE_Init+0x120>
 8001836:	3401      	adds	r4, #1
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001838:	2cff      	cmp	r4, #255	; 0xff
 800183a:	d1e1      	bne.n	8001800 <EE_Init+0xc8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <EE_Init+0x12c>)
 800183e:	2100      	movs	r1, #0
 8001840:	f000 ff6e 	bl	8002720 <FLASH_ProgramHalfWord>
 8001844:	b280      	uxth	r0, r0
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001846:	2804      	cmp	r0, #4
 8001848:	d106      	bne.n	8001858 <EE_Init+0x120>
        {
          return FlashStatus;
        }
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <EE_Init+0x128>)
 800184c:	f000 fefc 	bl	8002648 <FLASH_ErasePage>
 8001850:	e001      	b.n	8001856 <EE_Init+0x11e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001852:	f7ff ff33 	bl	80016bc <EE_Format>
 8001856:	b280      	uxth	r0, r0
      }
      break;
  }

  return FLASH_COMPLETE;
}
 8001858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800185c:	200009c8 	.word	0x200009c8
 8001860:	08010000 	.word	0x08010000
 8001864:	08010800 	.word	0x08010800
 8001868:	08010006 	.word	0x08010006
 800186c:	08010806 	.word	0x08010806

08001870 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001874:	4682      	mov	sl, r0
 8001876:	460e      	mov	r6, r1
  uint16_t Status = 0;

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001878:	f7ff fee6 	bl	8001648 <EE_VerifyPageFullWriteVariable>

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800187c:	2880      	cmp	r0, #128	; 0x80
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
  uint16_t Status = 0;

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800187e:	4604      	mov	r4, r0

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001880:	d140      	bne.n	8001904 <EE_WriteVariable+0x94>
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001882:	4d22      	ldr	r5, [pc, #136]	; (800190c <EE_WriteVariable+0x9c>)

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <EE_WriteVariable+0xa0>)
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001886:	8829      	ldrh	r1, [r5, #0]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001888:	881a      	ldrh	r2, [r3, #0]
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800188a:	b289      	uxth	r1, r1

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800188c:	b292      	uxth	r2, r2
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800188e:	b111      	cbz	r1, 8001896 <EE_WriteVariable+0x26>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (PageStatus1 == VALID_PAGE)
 8001890:	bbaa      	cbnz	r2, 80018fe <EE_WriteVariable+0x8e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 8001892:	4699      	mov	r9, r3
 8001894:	e001      	b.n	800189a <EE_WriteVariable+0x2a>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 8001896:	46a9      	mov	r9, r5
    OldPageAddress = PAGE1_BASE_ADDRESS;
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001898:	461d      	mov	r5, r3
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 800189a:	4628      	mov	r0, r5
 800189c:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80018a0:	f000 ff3e 	bl	8002720 <FLASH_ProgramHalfWord>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80018a4:	2804      	cmp	r0, #4
 80018a6:	d128      	bne.n	80018fa <EE_WriteVariable+0x8a>
  {
    return FlashStatus;
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80018a8:	4650      	mov	r0, sl
 80018aa:	4631      	mov	r1, r6
 80018ac:	f7ff fecc 	bl	8001648 <EE_VerifyPageFullWriteVariable>
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 80018b0:	2804      	cmp	r0, #4
  {
    return FlashStatus;
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80018b2:	4604      	mov	r4, r0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 80018b4:	d126      	bne.n	8001904 <EE_WriteVariable+0x94>
 80018b6:	2600      	movs	r6, #0
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80018b8:	4f16      	ldr	r7, [pc, #88]	; (8001914 <EE_WriteVariable+0xa4>)
 80018ba:	f837 8016 	ldrh.w	r8, [r7, r6, lsl #1]
 80018be:	45d0      	cmp	r8, sl
 80018c0:	d00d      	beq.n	80018de <EE_WriteVariable+0x6e>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80018c2:	4640      	mov	r0, r8
 80018c4:	f507 71ff 	add.w	r1, r7, #510	; 0x1fe
 80018c8:	f7ff ff0e 	bl	80016e8 <EE_ReadVariable>
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80018cc:	2801      	cmp	r0, #1
 80018ce:	d006      	beq.n	80018de <EE_WriteVariable+0x6e>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80018d0:	4640      	mov	r0, r8
 80018d2:	f8b7 11fe 	ldrh.w	r1, [r7, #510]	; 0x1fe
 80018d6:	f7ff feb7 	bl	8001648 <EE_VerifyPageFullWriteVariable>
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 80018da:	2804      	cmp	r0, #4
 80018dc:	d111      	bne.n	8001902 <EE_WriteVariable+0x92>
 80018de:	3601      	adds	r6, #1
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80018e0:	2eff      	cmp	r6, #255	; 0xff
 80018e2:	d1e9      	bne.n	80018b8 <EE_WriteVariable+0x48>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = FLASH_ErasePage(OldPageAddress);
 80018e4:	4648      	mov	r0, r9
 80018e6:	f000 feaf 	bl	8002648 <FLASH_ErasePage>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80018ea:	2804      	cmp	r0, #4
 80018ec:	d105      	bne.n	80018fa <EE_WriteVariable+0x8a>
  {
    return FlashStatus;
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 80018ee:	4628      	mov	r0, r5
 80018f0:	2100      	movs	r1, #0
 80018f2:	f000 ff15 	bl	8002720 <FLASH_ProgramHalfWord>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80018f6:	2804      	cmp	r0, #4
 80018f8:	d004      	beq.n	8001904 <EE_WriteVariable+0x94>
  {
    return FlashStatus;
 80018fa:	b284      	uxth	r4, r0
 80018fc:	e002      	b.n	8001904 <EE_WriteVariable+0x94>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80018fe:	24ab      	movs	r4, #171	; 0xab
 8001900:	e000      	b.n	8001904 <EE_WriteVariable+0x94>
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 8001902:	4604      	mov	r4, r0
    Status = EE_PageTransfer(VirtAddress, Data);
  }

  /* Return last operation status */
  return Status;
}
 8001904:	4620      	mov	r0, r4
 8001906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800190a:	bf00      	nop
 800190c:	08010000 	.word	0x08010000
 8001910:	08010800 	.word	0x08010800
 8001914:	200009c8 	.word	0x200009c8

08001918 <ADC_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));


  if((ADCx == ADC1) || (ADCx == ADC2))
 8001918:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2,3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 800191c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));


  if((ADCx == ADC1) || (ADCx == ADC2))
 800191e:	d016      	beq.n	800194e <ADC_DeInit+0x36>
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <ADC_DeInit+0x50>)
 8001922:	4298      	cmp	r0, r3
 8001924:	d013      	beq.n	800194e <ADC_DeInit+0x36>
    /* Enable ADC1/ADC2 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, ENABLE);
    /* Release ADC1/ADC2 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, DISABLE);
  }
  else if((ADCx == ADC3) || (ADCx == ADC4))
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <ADC_DeInit+0x54>)
 8001928:	4298      	cmp	r0, r3
 800192a:	d004      	beq.n	8001936 <ADC_DeInit+0x1e>
 800192c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001930:	4298      	cmp	r0, r3
 8001932:	d000      	beq.n	8001936 <ADC_DeInit+0x1e>
 8001934:	bd08      	pop	{r3, pc}
  {
    /* Enable ADC3/ADC4 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, ENABLE);
 8001936:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800193a:	2101      	movs	r1, #1
 800193c:	f001 fcb2 	bl	80032a4 <RCC_AHBPeriphResetCmd>
    /* Release ADC3/ADC4 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, DISABLE);
 8001940:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001944:	2100      	movs	r1, #0
  }
}
 8001946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if((ADCx == ADC3) || (ADCx == ADC4))
  {
    /* Enable ADC3/ADC4 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, ENABLE);
    /* Release ADC3/ADC4 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, DISABLE);
 800194a:	f001 bcab 	b.w	80032a4 <RCC_AHBPeriphResetCmd>


  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    /* Enable ADC1/ADC2 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, ENABLE);
 800194e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001952:	2101      	movs	r1, #1
 8001954:	f001 fca6 	bl	80032a4 <RCC_AHBPeriphResetCmd>
    /* Release ADC1/ADC2 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, DISABLE);
 8001958:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800195c:	2100      	movs	r1, #0
    /* Enable ADC3/ADC4 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, ENABLE);
    /* Release ADC3/ADC4 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, DISABLE);
  }
}
 800195e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    /* Enable ADC1/ADC2 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, ENABLE);
    /* Release ADC1/ADC2 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, DISABLE);
 8001962:	f001 bc9f 	b.w	80032a4 <RCC_AHBPeriphResetCmd>
 8001966:	bf00      	nop
 8001968:	50000100 	.word	0x50000100
 800196c:	50000400 	.word	0x50000400

08001970 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b083      	sub	sp, #12
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 8001974:	698b      	ldr	r3, [r1, #24]
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8001976:	680f      	ldr	r7, [r1, #0]
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 8001978:	9301      	str	r3, [sp, #4]
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800197a:	684b      	ldr	r3, [r1, #4]
  ADC_InitStruct->ADC_Resolution|                 
 800197c:	688e      	ldr	r6, [r1, #8]
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 800197e:	68cd      	ldr	r5, [r1, #12]
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8001980:	690c      	ldr	r4, [r1, #16]
  ADC_InitStruct->ADC_DataAlign|                 
 8001982:	694a      	ldr	r2, [r1, #20]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8001984:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8001988:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80019b8 <ADC_Init+0x48>
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800198c:	431f      	orrs	r7, r3
  ADC_InitStruct->ADC_Resolution|                 
 800198e:	433e      	orrs	r6, r7
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8001990:	4335      	orrs	r5, r6
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8001992:	432c      	orrs	r4, r5
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 8001994:	9b01      	ldr	r3, [sp, #4]
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
 8001996:	4322      	orrs	r2, r4
  ADC_InitStruct->ADC_OverrunMode|        
 8001998:	4313      	orrs	r3, r2

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 800199a:	ea0c 0e0e 	and.w	lr, ip, lr
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800199e:	ea43 030e 	orr.w	r3, r3, lr
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
  ADC_InitStruct->ADC_AutoInjMode;
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 80019a2:	60c3      	str	r3, [r0, #12]
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 80019a4:	7f0a      	ldrb	r2, [r1, #28]
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80019a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 80019a8:	3a01      	subs	r2, #1
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 80019aa:	f023 030f 	bic.w	r3, r3, #15
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 80019ae:	4313      	orrs	r3, r2
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 80019b0:	6303      	str	r3, [r0, #48]	; 0x30
   
}  
 80019b2:	b003      	add	sp, #12
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	fdffc007 	.word	0xfdffc007

080019bc <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80019bc:	2300      	movs	r3, #0
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 80019be:	2201      	movs	r2, #1
 80019c0:	7702      	strb	r2, [r0, #28]
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80019c2:	6003      	str	r3, [r0, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 80019c4:	6043      	str	r3, [r0, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 80019c6:	6083      	str	r3, [r0, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 80019c8:	60c3      	str	r3, [r0, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 80019ca:	6103      	str	r3, [r0, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 80019cc:	6143      	str	r3, [r0, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 80019ce:	6183      	str	r3, [r0, #24]
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <ADC_InjectedInit>:
  * @param  ADC_InjectInitStruct: pointer to an ADC_InjecInitTypeDef structure that contains
  *         the configuration information for the specified ADC injected channel.
  * @retval None
  */
void ADC_InjectedInit(ADC_TypeDef* ADCx, ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	e891 4010 	ldmia.w	r1, {r4, lr}
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 80019da:	68ca      	ldr	r2, [r1, #12]
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
 80019dc:	694b      	ldr	r3, [r1, #20]
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 80019de:	690f      	ldr	r7, [r1, #16]
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
 80019e0:	698e      	ldr	r6, [r1, #24]
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 80019e2:	7a0d      	ldrb	r5, [r1, #8]
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence3));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence4));
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  /* Get the ADCx JSQR value */
  tmpreg1 = ADCx->JSQR;
 80019e4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80019e6:	ea4e 0104 	orr.w	r1, lr, r4
 80019ea:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80019ee:	ea41 3287 	orr.w	r2, r1, r7, lsl #14
 80019f2:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
 80019f6:	ea42 6386 	orr.w	r3, r2, r6, lsl #26
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 80019fa:	1e6a      	subs	r2, r5, #1
 80019fc:	4313      	orrs	r3, r2
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
  /* Write to ADCx SQR1 */
  ADCx->JSQR = tmpreg1;  
 80019fe:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a02:	bf00      	nop

08001a04 <ADC_InjectedStructInit>:
  */
void ADC_InjectedStructInit(ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent = ADC_ExternalTrigInjecConvEvent_0;    
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge = ADC_ExternalTrigInjecEventEdge_None;     
  ADC_InjectedInitStruct->ADC_NbrOfInjecChannel = 1;                                                             
 8001a04:	2301      	movs	r3, #1
  * @param  ADC_InjectedInitStruct : pointer to an ADC_InjectedInitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_InjectedStructInit(ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent = ADC_ExternalTrigInjecConvEvent_0;    
 8001a06:	2200      	movs	r2, #0
 8001a08:	6002      	str	r2, [r0, #0]
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge = ADC_ExternalTrigInjecEventEdge_None;     
 8001a0a:	6042      	str	r2, [r0, #4]
  ADC_InjectedInitStruct->ADC_NbrOfInjecChannel = 1;                                                             
 8001a0c:	7203      	strb	r3, [r0, #8]
  ADC_InjectedInitStruct->ADC_InjecSequence1 = ADC_InjectedChannel_1; 
 8001a0e:	60c3      	str	r3, [r0, #12]
  ADC_InjectedInitStruct->ADC_InjecSequence2 = ADC_InjectedChannel_1;
 8001a10:	6103      	str	r3, [r0, #16]
  ADC_InjectedInitStruct->ADC_InjecSequence3 = ADC_InjectedChannel_1;
 8001a12:	6143      	str	r3, [r0, #20]
  ADC_InjectedInitStruct->ADC_InjecSequence4 = ADC_InjectedChannel_1; 
 8001a14:	6183      	str	r3, [r0, #24]
 8001a16:	4770      	bx	lr

08001a18 <ADC_CommonInit>:
  assert_param(IS_ADC_CLOCKMODE(ADC_CommonInitStruct->ADC_Clock));
  assert_param(IS_ADC_DMA_MODE(ADC_CommonInitStruct->ADC_DMAMode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001a18:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_TypeDef* ADCx, ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_CLOCKMODE(ADC_CommonInitStruct->ADC_Clock));
  assert_param(IS_ADC_DMA_MODE(ADC_CommonInitStruct->ADC_DMAMode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001a1e:	d015      	beq.n	8001a4c <ADC_CommonInit+0x34>
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <ADC_CommonInit+0x68>)
 8001a22:	4298      	cmp	r0, r3
 8001a24:	d012      	beq.n	8001a4c <ADC_CommonInit+0x34>
    tmpreg1 &= CCR_CLEAR_MASK;
  }
  else
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC3_4->CCR;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <ADC_CommonInit+0x6c>)
 8001a28:	6888      	ldr	r0, [r1, #8]
 8001a2a:	689d      	ldr	r5, [r3, #8]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <ADC_CommonInit+0x70>)
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
 8001a2e:	68cc      	ldr	r4, [r1, #12]
 8001a30:	e891 0044 	ldmia.w	r1, {r2, r6}
 8001a34:	4332      	orrs	r2, r6
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC3_4->CCR;
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8001a36:	402b      	ands	r3, r5
 8001a38:	4302      	orrs	r2, r0
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));
 8001a3a:	7c09      	ldrb	r1, [r1, #16]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	ea42 3304 	orr.w	r3, r2, r4, lsl #12
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001a42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ADC1_2->CCR = tmpreg1;
  }
  else
  {
    /* Write to ADC CCR */
    ADC3_4->CCR = tmpreg1;
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <ADC_CommonInit+0x6c>)
 8001a48:	6093      	str	r3, [r2, #8]
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC1_2->CCR;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <ADC_CommonInit+0x74>)
 8001a4e:	688c      	ldr	r4, [r1, #8]
 8001a50:	689f      	ldr	r7, [r3, #8]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8001a52:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <ADC_CommonInit+0x70>)
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
 8001a54:	68cb      	ldr	r3, [r1, #12]
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));
 8001a56:	7c0e      	ldrb	r6, [r1, #16]
 8001a58:	e891 4020 	ldmia.w	r1, {r5, lr}
 8001a5c:	ea4e 0105 	orr.w	r1, lr, r5
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC1_2->CCR;
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8001a60:	403a      	ands	r2, r7
 8001a62:	4321      	orrs	r1, r4
 8001a64:	430a      	orrs	r2, r1
 8001a66:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001a6a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001a6e:	ea42 2306 	orr.w	r3, r2, r6, lsl #8
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001a72:	d002      	beq.n	8001a7a <ADC_CommonInit+0x62>
 8001a74:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <ADC_CommonInit+0x68>)
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d1e5      	bne.n	8001a46 <ADC_CommonInit+0x2e>
  {                        
    /* Write to ADC CCR */
    ADC1_2->CCR = tmpreg1;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <ADC_CommonInit+0x74>)
 8001a7c:	6093      	str	r3, [r2, #8]
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a80:	50000100 	.word	0x50000100
 8001a84:	50000700 	.word	0x50000700
 8001a88:	fffc10e0 	.word	0xfffc10e0
 8001a8c:	50000300 	.word	0x50000300

08001a90 <ADC_CommonStructInit>:
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001a90:	2300      	movs	r3, #0
 8001a92:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_Clock member */
  ADC_CommonInitStruct->ADC_Clock = ADC_Clock_AsynClkMode;
 8001a94:	6043      	str	r3, [r0, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001a96:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_DMAMode member */
  ADC_CommonInitStruct->ADC_DMAMode = ADC_DMAMode_OneShot;
 8001a98:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = 0;
 8001a9a:	7403      	strb	r3, [r0, #16]
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <ADC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8001aa0:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001aa2:	b919      	cbnz	r1, 8001aac <ADC_Cmd+0xc>
    ADCx->CR |= ADC_CR_ADEN;
  }
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6083      	str	r3, [r0, #8]
 8001aaa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6083      	str	r3, [r0, #8]
 8001ab2:	4770      	bx	lr

08001ab4 <ADC_StartCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8001ab4:	6883      	ldr	r3, [r0, #8]
 8001ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aba:	6083      	str	r3, [r0, #8]
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <ADC_GetCalibrationValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC calibration value */
  return (uint32_t)ADCx->CALFACT;
 8001ac0:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <ADC_SetCalibrationValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADC calibration register value */
  ADCx->CALFACT = ADC_Calibration;
 8001ac8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <ADC_SelectCalibrationMode>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8001ad0:	6883      	ldr	r3, [r0, #8]
 8001ad2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ad6:	6083      	str	r3, [r0, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8001ad8:	6883      	ldr	r3, [r0, #8]
 8001ada:	4319      	orrs	r1, r3
 8001adc:	6081      	str	r1, [r0, #8]
 8001ade:	4770      	bx	lr

08001ae0 <ADC_GetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8001ae0:	6880      	ldr	r0, [r0, #8]
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
  }
  /* Return the CAL bit status */
  return  bitstatus;
}
 8001ae2:	0fc0      	lsrs	r0, r0, #31
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop

08001ae8 <ADC_DisableCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADDIS bit */
  ADCx->CR |= ADC_CR_ADDIS;
 8001ae8:	6883      	ldr	r3, [r0, #8]
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	6083      	str	r3, [r0, #8]
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <ADC_GetDisableCmdStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8001af4:	6880      	ldr	r0, [r0, #8]
    /* ADDIS bit is reset */
    bitstatus = RESET;
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
}
 8001af6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001afa:	4770      	bx	lr

08001afc <ADC_VoltageRegulatorCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8001afc:	6883      	ldr	r3, [r0, #8]
 8001afe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b02:	6083      	str	r3, [r0, #8]
  
  if (NewState != DISABLE)
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8001b04:	6883      	ldr	r3, [r0, #8]

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
  
  if (NewState != DISABLE)
 8001b06:	b919      	cbnz	r1, 8001b10 <ADC_VoltageRegulatorCmd+0x14>
    ADCx->CR |= ADC_CR_ADVREGEN_0;
  }
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8001b08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b0c:	6083      	str	r3, [r0, #8]
 8001b0e:	4770      	bx	lr
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
  
  if (NewState != DISABLE)
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6083      	str	r3, [r0, #8]
 8001b16:	4770      	bx	lr

08001b18 <ADC_SelectDifferentialMode>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the DIFSEL bit */
   ADCx->DIFSEL |= (uint32_t)(1 << ADC_Channel );
 8001b18:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_ADC_DIFFCHANNEL(ADC_Channel)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b1a:	b93a      	cbnz	r2, 8001b2c <ADC_SelectDifferentialMode+0x14>
   ADCx->DIFSEL |= (uint32_t)(1 << ADC_Channel );
  }
  else
  {
    /* Reset the DIFSEL bit */
   ADCx->DIFSEL &= ~(uint32_t)(1 << ADC_Channel);
 8001b1c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001b20:	408b      	lsls	r3, r1
 8001b22:	ea22 0303 	bic.w	r3, r2, r3
 8001b26:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 8001b2a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the DIFSEL bit */
   ADCx->DIFSEL |= (uint32_t)(1 << ADC_Channel );
 8001b2c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001b30:	408b      	lsls	r3, r1
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop

08001b3c <ADC_SelectQueueOfContextMode>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the JQM bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_JQM );
 8001b3c:	68c3      	ldr	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b3e:	b919      	cbnz	r1, 8001b48 <ADC_SelectQueueOfContextMode+0xc>
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_JQM );
  }
  else
  {
    /* Reset the JQM bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_JQM);
 8001b40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b44:	60c3      	str	r3, [r0, #12]
 8001b46:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the JQM bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_JQM );
 8001b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b4c:	60c3      	str	r3, [r0, #12]
 8001b4e:	4770      	bx	lr

08001b50 <ADC_AutoDelayCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the AUTDLY bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_AUTDLY );
 8001b50:	68c3      	ldr	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b52:	b919      	cbnz	r1, 8001b5c <ADC_AutoDelayCmd+0xc>
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_AUTDLY );
  }
  else
  {
    /* Reset the AUTDLY bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_AUTDLY);
 8001b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b58:	60c3      	str	r3, [r0, #12]
 8001b5a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the AUTDLY bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_AUTDLY );
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	60c3      	str	r3, [r0, #12]
 8001b62:	4770      	bx	lr

08001b64 <ADC_AnalogWatchdogCmd>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 8001b64:	68c3      	ldr	r3, [r0, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= ~(uint32_t)(ADC_CFGR_AWD1SGL|ADC_CFGR_AWD1EN|ADC_CFGR_JAWD1EN);
 8001b66:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8001b6a:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8001b6c:	60c1      	str	r1, [r0, #12]
 8001b6e:	4770      	bx	lr

08001b70 <ADC_AnalogWatchdog1ThresholdsConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_HT1;
 8001b70:	6a03      	ldr	r3, [r0, #32]
 8001b72:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8001b76:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001b7a:	6203      	str	r3, [r0, #32]
  ADCx->TR1 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8001b7c:	6a03      	ldr	r3, [r0, #32]
 8001b7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001b82:	6201      	str	r1, [r0, #32]

  /* Set the ADCx low threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_LT1;
 8001b84:	6a03      	ldr	r3, [r0, #32]
 8001b86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001b8a:	f023 030f 	bic.w	r3, r3, #15
 8001b8e:	6203      	str	r3, [r0, #32]
  ADCx->TR1 |= LowThreshold;
 8001b90:	6a03      	ldr	r3, [r0, #32]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	6202      	str	r2, [r0, #32]
 8001b96:	4770      	bx	lr

08001b98 <ADC_AnalogWatchdog2ThresholdsConfig>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADCx high threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_HT2;
 8001b98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b9a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001b9e:	6243      	str	r3, [r0, #36]	; 0x24
  ADCx->TR2 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8001ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ba2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001ba6:	6241      	str	r1, [r0, #36]	; 0x24

  /* Set the ADCx low threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_LT2;
 8001ba8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bae:	6243      	str	r3, [r0, #36]	; 0x24
  ADCx->TR2 |= LowThreshold;
 8001bb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	6242      	str	r2, [r0, #36]	; 0x24
 8001bb6:	4770      	bx	lr

08001bb8 <ADC_AnalogWatchdog3ThresholdsConfig>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCx high threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_HT3;
 8001bb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bba:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001bbe:	6283      	str	r3, [r0, #40]	; 0x28
  ADCx->TR3 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8001bc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001bc6:	6281      	str	r1, [r0, #40]	; 0x28

  /* Set the ADCx low threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_LT3;
 8001bc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bce:	6283      	str	r3, [r0, #40]	; 0x28
  ADCx->TR3 |= LowThreshold;
 8001bd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	6282      	str	r2, [r0, #40]	; 0x28
 8001bd6:	4770      	bx	lr

08001bd8 <ADC_AnalogWatchdog1SingleChannelConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 8001bd8:	68c3      	ldr	r3, [r0, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_CFGR_AWD1CH;
 8001bda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)((uint32_t)ADC_Channel << 26);
 8001bde:	ea43 6181 	orr.w	r1, r3, r1, lsl #26
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8001be2:	60c1      	str	r1, [r0, #12]
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <ADC_AnalogWatchdog2SingleChannelConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD2CR;
 8001be8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD2CR_AWD2CH;
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
  /* Store the new register value */
  ADCx->AWD2CR |= tmpreg;
 8001bec:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog2SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8001bf0:	b410      	push	{r4}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD2CR;
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD2CR_AWD2CH;
 8001bf2:	4c05      	ldr	r4, [pc, #20]	; (8001c08 <ADC_AnalogWatchdog2SingleChannelConfig+0x20>)
 8001bf4:	401c      	ands	r4, r3
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	4322      	orrs	r2, r4
 8001bfa:	408b      	lsls	r3, r1
  /* Store the new register value */
  ADCx->AWD2CR |= tmpreg;
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 8001c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	fff80001 	.word	0xfff80001

08001c0c <ADC_AnalogWatchdog3SingleChannelConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD3CR;
 8001c0c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD3CR_AWD3CH;
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
  /* Store the new register value */
  ADCx->AWD3CR |= tmpreg;
 8001c10:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog3SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8001c14:	b410      	push	{r4}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD3CR;
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD3CR_AWD3CH;
 8001c16:	4c05      	ldr	r4, [pc, #20]	; (8001c2c <ADC_AnalogWatchdog3SingleChannelConfig+0x20>)
 8001c18:	401c      	ands	r4, r3
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	4322      	orrs	r2, r4
 8001c1e:	408b      	lsls	r3, r1
  /* Store the new register value */
  ADCx->AWD3CR |= tmpreg;
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
 8001c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	fff80001 	.word	0xfff80001

08001c30 <ADC_TempSensorCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001c30:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001c34:	d009      	beq.n	8001c4a <ADC_TempSensorCmd+0x1a>
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <ADC_TempSensorCmd+0x2c>)
 8001c38:	4298      	cmp	r0, r3
 8001c3a:	d006      	beq.n	8001c4a <ADC_TempSensorCmd+0x1a>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the temperature sensor channel*/
      ADC3_4->CCR |= ADC34_CCR_TSEN;
 8001c3c:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <ADC_TempSensorCmd+0x30>)
 8001c3e:	6893      	ldr	r3, [r2, #8]
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8001c40:	b939      	cbnz	r1, 8001c52 <ADC_TempSensorCmd+0x22>
      ADC3_4->CCR |= ADC34_CCR_TSEN;
    }
    else
    {
      /* Disable the temperature sensor channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_TSEN;
 8001c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c46:	6093      	str	r3, [r2, #8]
 8001c48:	4770      	bx	lr
  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
    {
      /* Enable the temperature sensor channel*/
      ADC1_2->CCR |= ADC12_CCR_TSEN;
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <ADC_TempSensorCmd+0x34>)
 8001c4c:	6893      	ldr	r3, [r2, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8001c4e:	2900      	cmp	r1, #0
 8001c50:	d0f7      	beq.n	8001c42 <ADC_TempSensorCmd+0x12>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the temperature sensor channel*/
      ADC3_4->CCR |= ADC34_CCR_TSEN;
 8001c52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c56:	6093      	str	r3, [r2, #8]
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	50000100 	.word	0x50000100
 8001c60:	50000700 	.word	0x50000700
 8001c64:	50000300 	.word	0x50000300

08001c68 <ADC_VrefintCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001c68:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001c6c:	d009      	beq.n	8001c82 <ADC_VrefintCmd+0x1a>
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <ADC_VrefintCmd+0x2c>)
 8001c70:	4298      	cmp	r0, r3
 8001c72:	d006      	beq.n	8001c82 <ADC_VrefintCmd+0x1a>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8001c74:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <ADC_VrefintCmd+0x30>)
 8001c76:	6893      	ldr	r3, [r2, #8]
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8001c78:	b939      	cbnz	r1, 8001c8a <ADC_VrefintCmd+0x22>
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8001c7a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c7e:	6093      	str	r3, [r2, #8]
 8001c80:	4770      	bx	lr
  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 8001c82:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <ADC_VrefintCmd+0x34>)
 8001c84:	6893      	ldr	r3, [r2, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8001c86:	2900      	cmp	r1, #0
 8001c88:	d0f7      	beq.n	8001c7a <ADC_VrefintCmd+0x12>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8001c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c8e:	6093      	str	r3, [r2, #8]
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	50000100 	.word	0x50000100
 8001c98:	50000700 	.word	0x50000700
 8001c9c:	50000300 	.word	0x50000300

08001ca0 <ADC_VbatCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8001ca0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001ca4:	d009      	beq.n	8001cba <ADC_VbatCmd+0x1a>
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <ADC_VbatCmd+0x2c>)
 8001ca8:	4298      	cmp	r0, r3
 8001caa:	d006      	beq.n	8001cba <ADC_VbatCmd+0x1a>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Vbat channel*/
      ADC3_4->CCR |= ADC34_CCR_VBATEN;
 8001cac:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <ADC_VbatCmd+0x30>)
 8001cae:	6893      	ldr	r3, [r2, #8]
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8001cb0:	b939      	cbnz	r1, 8001cc2 <ADC_VbatCmd+0x22>
      ADC3_4->CCR |= ADC34_CCR_VBATEN;
    }
    else
    {
      /* Disable the Vbat channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VBATEN;
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6093      	str	r3, [r2, #8]
 8001cb8:	4770      	bx	lr
  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
    {
      /* Enable the Vbat channel*/
      ADC1_2->CCR |= ADC12_CCR_VBATEN;
 8001cba:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <ADC_VbatCmd+0x34>)
 8001cbc:	6893      	ldr	r3, [r2, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8001cbe:	2900      	cmp	r1, #0
 8001cc0:	d0f7      	beq.n	8001cb2 <ADC_VbatCmd+0x12>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Vbat channel*/
      ADC3_4->CCR |= ADC34_CCR_VBATEN;
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6093      	str	r3, [r2, #8]
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	50000100 	.word	0x50000100
 8001cd0:	50000700 	.word	0x50000700
 8001cd4:	50000300 	.word	0x50000300

08001cd8 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8001cd8:	2a04      	cmp	r2, #4
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001cda:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8001cdc:	d81e      	bhi.n	8001d1c <ADC_RegularChannelConfig+0x44>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8001cde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ce2:	0052      	lsls	r2, r2, #1
  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8001ce4:	6b05      	ldr	r5, [r0, #48]	; 0x30
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8001ce6:	261f      	movs	r6, #31
 8001ce8:	4096      	lsls	r6, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8001cea:	fa01 f402 	lsl.w	r4, r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001cee:	ea25 0206 	bic.w	r2, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001cf2:	4322      	orrs	r2, r4
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001cf4:	6302      	str	r2, [r0, #48]	; 0x30
    ADCx->SQR4 = tmpreg1;
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001cf6:	2909      	cmp	r1, #9
 8001cf8:	d821      	bhi.n	8001d3e <ADC_RegularChannelConfig+0x66>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8001cfa:	3901      	subs	r1, #1

  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001cfc:	6942      	ldr	r2, [r0, #20]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
 8001cfe:	6944      	ldr	r4, [r0, #20]
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8001d00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d04:	2238      	movs	r2, #56	; 0x38
 8001d06:	408a      	lsls	r2, r1
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
 8001d08:	ea24 0202 	bic.w	r2, r4, r2
 8001d0c:	6142      	str	r2, [r0, #20]
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8001d0e:	6942      	ldr	r2, [r0, #20]
 8001d10:	3103      	adds	r1, #3
 8001d12:	408b      	lsls	r3, r1
 8001d14:	4313      	orrs	r3, r2
 8001d16:	6143      	str	r3, [r0, #20]
  }
}
 8001d18:	bc70      	pop	{r4, r5, r6}
 8001d1a:	4770      	bx	lr
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8001d1c:	2a09      	cmp	r2, #9
 8001d1e:	d81e      	bhi.n	8001d5e <ADC_RegularChannelConfig+0x86>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8001d20:	3a05      	subs	r2, #5
 8001d22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d26:	0052      	lsls	r2, r2, #1
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8001d28:	6b45      	ldr	r5, [r0, #52]	; 0x34
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8001d2a:	261f      	movs	r6, #31
 8001d2c:	4096      	lsls	r6, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8001d2e:	fa01 f402 	lsl.w	r4, r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001d32:	ea25 0206 	bic.w	r2, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001d36:	4322      	orrs	r2, r4
    ADCx->SQR4 = tmpreg1;
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001d38:	2909      	cmp	r1, #9
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001d3a:	6342      	str	r2, [r0, #52]	; 0x34
    ADCx->SQR4 = tmpreg1;
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001d3c:	d9dd      	bls.n	8001cfa <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001d3e:	390a      	subs	r1, #10
  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001d40:	6982      	ldr	r2, [r0, #24]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001d42:	6984      	ldr	r4, [r0, #24]
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001d44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d48:	2207      	movs	r2, #7
 8001d4a:	408a      	lsls	r2, r1
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001d4c:	ea24 0202 	bic.w	r2, r4, r2
 8001d50:	6182      	str	r2, [r0, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001d52:	6982      	ldr	r2, [r0, #24]
 8001d54:	408b      	lsls	r3, r1
 8001d56:	4313      	orrs	r3, r2
 8001d58:	6183      	str	r3, [r0, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8001d5a:	bc70      	pop	{r4, r5, r6}
 8001d5c:	4770      	bx	lr
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8001d5e:	2a0e      	cmp	r2, #14
 8001d60:	d80d      	bhi.n	8001d7e <ADC_RegularChannelConfig+0xa6>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8001d62:	3a0a      	subs	r2, #10
 8001d64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d68:	0052      	lsls	r2, r2, #1
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001d6a:	6b85      	ldr	r5, [r0, #56]	; 0x38
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8001d6c:	261f      	movs	r6, #31
 8001d6e:	4096      	lsls	r6, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8001d70:	fa01 f402 	lsl.w	r4, r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001d74:	ea25 0206 	bic.w	r2, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001d78:	4322      	orrs	r2, r4
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001d7a:	6382      	str	r2, [r0, #56]	; 0x38
 8001d7c:	e7bb      	b.n	8001cf6 <ADC_RegularChannelConfig+0x1e>
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8001d7e:	3a0f      	subs	r2, #15
 8001d80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d84:	0052      	lsls	r2, r2, #1
    ADCx->SQR3 = tmpreg1;
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8001d86:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8001d88:	261f      	movs	r6, #31
 8001d8a:	4096      	lsls	r6, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8001d8c:	fa01 f402 	lsl.w	r4, r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001d90:	ea25 0206 	bic.w	r2, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001d94:	4322      	orrs	r2, r4
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8001d96:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001d98:	e7ad      	b.n	8001cf6 <ADC_RegularChannelConfig+0x1e>
 8001d9a:	bf00      	nop

08001d9c <ADC_RegularChannelSequencerLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Configure the ADC sequence lenght */  
  ADCx->SQR1 &= ~(uint32_t)ADC_SQR1_L;
 8001d9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d9e:	f023 030f 	bic.w	r3, r3, #15
 8001da2:	6303      	str	r3, [r0, #48]	; 0x30
  ADCx->SQR1 |= (uint32_t)(SequencerLength - 1);   
 8001da4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001da6:	3901      	subs	r1, #1
 8001da8:	4319      	orrs	r1, r3
 8001daa:	6301      	str	r1, [r0, #48]	; 0x30
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop

08001db0 <ADC_ExternalTriggerConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_TRIG(ADC_ExternalTrigConvEvent));
  assert_param(IS_EXTERNALTRIG_EDGE(ADC_ExternalTrigEventEdge));

  /* Disable the selected ADC conversion on external event */
  ADCx->CFGR &= ~(ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL);
 8001db0:	68c3      	ldr	r3, [r0, #12]
 8001db2:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8001db6:	60c3      	str	r3, [r0, #12]
  ADCx->CFGR |= (uint32_t)(ADC_ExternalTrigEventEdge | ADC_ExternalTrigConvEvent);
 8001db8:	68c3      	ldr	r3, [r0, #12]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	60c2      	str	r2, [r0, #12]
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

08001dc4 <ADC_StartConversion>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8001dc4:	6883      	ldr	r3, [r0, #8]
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6083      	str	r3, [r0, #8]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop

08001dd0 <ADC_GetStartConversionStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of ADSTART bit */
  if ((ADCx->CR & ADC_CR_ADSTART) != (uint32_t)RESET)
 8001dd0:	6880      	ldr	r0, [r0, #8]
    /* ADSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the ADSTART bit status */
  return  bitstatus;
}
 8001dd2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001dd6:	4770      	bx	lr

08001dd8 <ADC_StopConversion>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTP bit */
   ADCx->CR |= ADC_CR_ADSTP;
 8001dd8:	6883      	ldr	r3, [r0, #8]
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6083      	str	r3, [r0, #8]
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <ADC_DiscModeChannelCountConfig>:
  uint32_t tmpreg2 = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CFGR;
 8001de4:	68c3      	ldr	r3, [r0, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= ~(uint32_t)(ADC_CFGR_DISCNUM);
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8001de6:	3901      	subs	r1, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CFGR;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= ~(uint32_t)(ADC_CFGR_DISCNUM);
 8001de8:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 17;
 8001dec:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
  /* Store the new register value */
  ADCx->CFGR = tmpreg1;
 8001df0:	60c1      	str	r1, [r0, #12]
 8001df2:	4770      	bx	lr

08001df4 <ADC_DiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_DISCEN;
 8001df4:	68c3      	ldr	r3, [r0, #12]
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001df6:	b919      	cbnz	r1, 8001e00 <ADC_DiscModeCmd+0xc>
    ADCx->CFGR |= ADC_CFGR_DISCEN;
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_DISCEN);
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfc:	60c3      	str	r3, [r0, #12]
 8001dfe:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_DISCEN;
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	60c3      	str	r3, [r0, #12]
 8001e06:	4770      	bx	lr

08001e08 <ADC_GetConversionValue>:
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001e08:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001e0a:	b280      	uxth	r0, r0
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop

08001e10 <ADC_GetDualModeConversionValue>:
  uint32_t tmpreg1 = 0;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if((ADCx == ADC1) || (ADCx== ADC2))
 8001e10:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001e14:	d005      	beq.n	8001e22 <ADC_GetDualModeConversionValue+0x12>
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <ADC_GetDualModeConversionValue+0x18>)
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	d002      	beq.n	8001e22 <ADC_GetDualModeConversionValue+0x12>
    tmpreg1 = ADC1_2->CDR;
  }
  else
  {	
    /* Get the dual mode conversion value */
    tmpreg1 = ADC3_4->CDR;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <ADC_GetDualModeConversionValue+0x1c>)
 8001e1e:	68d8      	ldr	r0, [r3, #12]
  }
  /* Return the dual mode conversion value */
  return (uint32_t) tmpreg1;
}
 8001e20:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if((ADCx == ADC1) || (ADCx== ADC2))
  {
    /* Get the dual mode conversion value */
    tmpreg1 = ADC1_2->CDR;
 8001e22:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <ADC_GetDualModeConversionValue+0x20>)
 8001e24:	68d8      	ldr	r0, [r3, #12]
 8001e26:	4770      	bx	lr
 8001e28:	50000100 	.word	0x50000100
 8001e2c:	50000700 	.word	0x50000700
 8001e30:	50000300 	.word	0x50000300

08001e34 <ADC_SetChannelOffset1>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1_CH;
 8001e34:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001e36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e3a:	6603      	str	r3, [r0, #96]	; 0x60
  ADCx->OFR1 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8001e3c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001e3e:	ea43 6181 	orr.w	r1, r3, r1, lsl #26
 8001e42:	6601      	str	r1, [r0, #96]	; 0x60

  /* Set the data offset */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1;
 8001e44:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001e46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001e4a:	f023 030f 	bic.w	r3, r3, #15
 8001e4e:	6603      	str	r3, [r0, #96]	; 0x60
  ADCx->OFR1 |= (uint32_t)Offset;
 8001e50:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001e52:	431a      	orrs	r2, r3
 8001e54:	6602      	str	r2, [r0, #96]	; 0x60
 8001e56:	4770      	bx	lr

08001e58 <ADC_SetChannelOffset2>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2_CH;
 8001e58:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001e5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e5e:	6643      	str	r3, [r0, #100]	; 0x64
  ADCx->OFR2 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8001e60:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001e62:	ea43 6181 	orr.w	r1, r3, r1, lsl #26
 8001e66:	6641      	str	r1, [r0, #100]	; 0x64

  /* Set the data offset */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2;
 8001e68:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001e6a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001e6e:	f023 030f 	bic.w	r3, r3, #15
 8001e72:	6643      	str	r3, [r0, #100]	; 0x64
  ADCx->OFR2 |= (uint32_t)Offset;
 8001e74:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001e76:	431a      	orrs	r2, r3
 8001e78:	6642      	str	r2, [r0, #100]	; 0x64
 8001e7a:	4770      	bx	lr

08001e7c <ADC_SetChannelOffset3>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3_CH;
 8001e7c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001e7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e82:	6683      	str	r3, [r0, #104]	; 0x68
  ADCx->OFR3 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8001e84:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001e86:	ea43 6181 	orr.w	r1, r3, r1, lsl #26
 8001e8a:	6681      	str	r1, [r0, #104]	; 0x68

  /* Set the data offset */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3;
 8001e8c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001e8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001e92:	f023 030f 	bic.w	r3, r3, #15
 8001e96:	6683      	str	r3, [r0, #104]	; 0x68
  ADCx->OFR3 |= (uint32_t)Offset;
 8001e98:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	6682      	str	r2, [r0, #104]	; 0x68
 8001e9e:	4770      	bx	lr

08001ea0 <ADC_SetChannelOffset4>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4_CH;
 8001ea0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001ea2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ea6:	66c3      	str	r3, [r0, #108]	; 0x6c
  ADCx->OFR4 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8001ea8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001eaa:	ea43 6181 	orr.w	r1, r3, r1, lsl #26
 8001eae:	66c1      	str	r1, [r0, #108]	; 0x6c

  /* Set the data offset */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4;
 8001eb0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001eb2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001eb6:	f023 030f 	bic.w	r3, r3, #15
 8001eba:	66c3      	str	r3, [r0, #108]	; 0x6c
  ADCx->OFR4 |= (uint32_t)Offset;
 8001ebc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001ec2:	4770      	bx	lr

08001ec4 <ADC_ChannelOffset1Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR1 |= ADC_OFR1_OFFSET1_EN;
 8001ec4:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ec6:	b919      	cbnz	r1, 8001ed0 <ADC_ChannelOffset1Cmd+0xc>
    ADCx->OFR1 |= ADC_OFR1_OFFSET1_EN;
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR1 &= ~(ADC_OFR1_OFFSET1_EN);
 8001ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ecc:	6603      	str	r3, [r0, #96]	; 0x60
 8001ece:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR1 |= ADC_OFR1_OFFSET1_EN;
 8001ed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ed4:	6603      	str	r3, [r0, #96]	; 0x60
 8001ed6:	4770      	bx	lr

08001ed8 <ADC_ChannelOffset2Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR2 |= ADC_OFR2_OFFSET2_EN;
 8001ed8:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eda:	b919      	cbnz	r1, 8001ee4 <ADC_ChannelOffset2Cmd+0xc>
    ADCx->OFR2 |= ADC_OFR2_OFFSET2_EN;
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR2 &= ~(ADC_OFR2_OFFSET2_EN);
 8001edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee0:	6643      	str	r3, [r0, #100]	; 0x64
 8001ee2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR2 |= ADC_OFR2_OFFSET2_EN;
 8001ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	6643      	str	r3, [r0, #100]	; 0x64
 8001eea:	4770      	bx	lr

08001eec <ADC_ChannelOffset3Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR3 |= ADC_OFR3_OFFSET3_EN;
 8001eec:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eee:	b919      	cbnz	r1, 8001ef8 <ADC_ChannelOffset3Cmd+0xc>
    ADCx->OFR3 |= ADC_OFR3_OFFSET3_EN;
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR3 &= ~(ADC_OFR3_OFFSET3_EN);
 8001ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ef4:	6683      	str	r3, [r0, #104]	; 0x68
 8001ef6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR3 |= ADC_OFR3_OFFSET3_EN;
 8001ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001efc:	6683      	str	r3, [r0, #104]	; 0x68
 8001efe:	4770      	bx	lr

08001f00 <ADC_ChannelOffset4Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR4 |= ADC_OFR4_OFFSET4_EN;
 8001f00:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f02:	b919      	cbnz	r1, 8001f0c <ADC_ChannelOffset4Cmd+0xc>
    ADCx->OFR4 |= ADC_OFR4_OFFSET4_EN;
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR4 &= ~(ADC_OFR4_OFFSET4_EN);
 8001f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f08:	66c3      	str	r3, [r0, #108]	; 0x6c
 8001f0a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR4 |= ADC_OFR4_OFFSET4_EN;
 8001f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f10:	66c3      	str	r3, [r0, #108]	; 0x6c
 8001f12:	4770      	bx	lr

08001f14 <ADC_DMACmd>:
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR |= ADC_CFGR_DMAEN;
 8001f14:	68c3      	ldr	r3, [r0, #12]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f16:	b919      	cbnz	r1, 8001f20 <ADC_DMACmd+0xc>
    ADCx->CFGR |= ADC_CFGR_DMAEN;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMAEN;
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	60c3      	str	r3, [r0, #12]
 8001f1e:	4770      	bx	lr
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR |= ADC_CFGR_DMAEN;
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	60c3      	str	r3, [r0, #12]
 8001f26:	4770      	bx	lr

08001f28 <ADC_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_ADC_DMA_MODE(ADC_DMAMode));

  /* Set or reset the DMACFG bit */
   ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMACFG;
 8001f28:	68c3      	ldr	r3, [r0, #12]
 8001f2a:	f023 0302 	bic.w	r3, r3, #2
 8001f2e:	60c3      	str	r3, [r0, #12]
   ADCx->CFGR |= ADC_DMAMode;
 8001f30:	68c3      	ldr	r3, [r0, #12]
 8001f32:	4319      	orrs	r1, r3
 8001f34:	60c1      	str	r1, [r0, #12]
 8001f36:	4770      	bx	lr

08001f38 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001f38:	2909      	cmp	r1, #9
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001f3a:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001f3c:	d818      	bhi.n	8001f70 <ADC_InjectedChannelConfig+0x38>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP0 << (3 * ADC_Channel);
 8001f3e:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR2 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001f42:	6945      	ldr	r5, [r0, #20]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP0 << (3 * ADC_Channel);
 8001f44:	2407      	movs	r4, #7
 8001f46:	40b4      	lsls	r4, r6
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001f48:	40b3      	lsls	r3, r6
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP0 << (3 * ADC_Channel);
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8001f4a:	ea25 0404 	bic.w	r4, r5, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001f4e:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001f50:	6143      	str	r3, [r0, #20]

  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Calculate the mask to clear */
  tmpreg2 = ADC_JSQR_JSQ1 << (6 * (Rank - 1));
 8001f52:	3a01      	subs	r2, #1
 8001f54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }

  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001f58:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  /* Calculate the mask to clear */
  tmpreg2 = ADC_JSQR_JSQ1 << (6 * (Rank - 1));
 8001f5a:	0052      	lsls	r2, r2, #1
 8001f5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f60:	4093      	lsls	r3, r2
  /* Clear the old SQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8001f62:	ea24 0303 	bic.w	r3, r4, r3
  /* Calculate the mask to set */
  tmpreg2 = (uint32_t)ADC_Channel << (6 * (Rank - 1));
 8001f66:	4091      	lsls	r1, r2
  /* Set the SQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8001f68:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001f6a:	64c1      	str	r1, [r0, #76]	; 0x4c
}
 8001f6c:	bc70      	pop	{r4, r5, r6}
 8001f6e:	4770      	bx	lr
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001f70:	f1a1 040a 	sub.w	r4, r1, #10
 8001f74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001f78:	6985      	ldr	r5, [r0, #24]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001f7a:	2607      	movs	r6, #7
 8001f7c:	40a6      	lsls	r6, r4
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001f7e:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8001f80:	ea25 0406 	bic.w	r4, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001f84:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001f86:	6183      	str	r3, [r0, #24]
 8001f88:	e7e3      	b.n	8001f52 <ADC_InjectedChannelConfig+0x1a>
 8001f8a:	bf00      	nop

08001f8c <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(SequencerLength));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001f8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= ~(uint32_t)ADC_JSQR_JL;
  /* Set the injected sequnence lenght JL bits */
  tmpreg1 |= (uint32_t)(SequencerLength - 1); 
 8001f8e:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(SequencerLength));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= ~(uint32_t)ADC_JSQR_JL;
 8001f90:	f023 0303 	bic.w	r3, r3, #3
  /* Set the injected sequnence lenght JL bits */
  tmpreg1 |= (uint32_t)(SequencerLength - 1); 
 8001f94:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001f96:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <ADC_ExternalTriggerInjectedConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_EXTERNALTRIGINJ_EDGE(ADC_ExternalTrigInjecEventEdge));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConvEvent));

  /* Disable the selected ADC conversion on external event */
  ADCx->JSQR &= ~(ADC_JSQR_JEXTEN | ADC_JSQR_JEXTSEL);
 8001f9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f9e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001fa2:	64c3      	str	r3, [r0, #76]	; 0x4c
  ADCx->JSQR |= (uint32_t)(ADC_ExternalTrigInjecConvEvent | ADC_ExternalTrigInjecEventEdge); 
 8001fa4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	64c2      	str	r2, [r0, #76]	; 0x4c
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <ADC_StartInjectedConversion>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for injected group on external event and start the selected
     ADC injected conversion */
  ADCx->CR |= ADC_CR_JADSTART;
 8001fb0:	6883      	ldr	r3, [r0, #8]
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6083      	str	r3, [r0, #8]
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <ADC_StopInjectedConversion>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the JADSTP bit */
   ADCx->CR |= ADC_CR_JADSTP;
 8001fbc:	6883      	ldr	r3, [r0, #8]
 8001fbe:	f043 0320 	orr.w	r3, r3, #32
 8001fc2:	6083      	str	r3, [r0, #8]
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <ADC_GetStartInjectedConversionStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JADSTART bit */
  if ((ADCx->CR & ADC_CR_JADSTART) != (uint32_t)RESET)
 8001fc8:	6880      	ldr	r0, [r0, #8]
    /* JADSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JADSTART bit status */
  return  bitstatus;
}
 8001fca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001fce:	4770      	bx	lr

08001fd0 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CFGR |= ADC_CFGR_JAUTO;
 8001fd0:	68c3      	ldr	r3, [r0, #12]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fd2:	b919      	cbnz	r1, 8001fdc <ADC_AutoInjectedConvCmd+0xc>
    ADCx->CFGR |= ADC_CFGR_JAUTO;
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CFGR &= ~ADC_CFGR_JAUTO;
 8001fd4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	60c3      	str	r3, [r0, #12]
 8001fda:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CFGR |= ADC_CFGR_JAUTO;
 8001fdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	60c3      	str	r3, [r0, #12]
 8001fe2:	4770      	bx	lr

08001fe4 <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_JDISCEN;
 8001fe4:	68c3      	ldr	r3, [r0, #12]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fe6:	b919      	cbnz	r1, 8001ff0 <ADC_InjectedDiscModeCmd+0xc>
    ADCx->CFGR |= ADC_CFGR_JDISCEN;
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CFGR &= ~ADC_CFGR_JDISCEN;
 8001fe8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fec:	60c3      	str	r3, [r0, #12]
 8001fee:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_JDISCEN;
 8001ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff4:	60c3      	str	r3, [r0, #12]
 8001ff6:	4770      	bx	lr

08001ff8 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8001ff8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8001ffe:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_Offset;
 8002000:	9b01      	ldr	r3, [sp, #4]
 8002002:	3380      	adds	r3, #128	; 0x80
 8002004:	4419      	add	r1, r3
 8002006:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 8002008:	9b01      	ldr	r3, [sp, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
}
 800200c:	b280      	uxth	r0, r0
 800200e:	b002      	add	sp, #8
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop

08002014 <ADC_ITConfig>:
  assert_param(IS_ADC_IT(ADC_IT));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 8002014:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));

  if (NewState != DISABLE)
 8002016:	b91a      	cbnz	r2, 8002020 <ADC_ITConfig+0xc>
    ADCx->IER |= ADC_IT;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->IER &= (~(uint32_t)ADC_IT);
 8002018:	ea23 0101 	bic.w	r1, r3, r1
 800201c:	6041      	str	r1, [r0, #4]
 800201e:	4770      	bx	lr
  assert_param(IS_ADC_IT(ADC_IT));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 8002020:	4319      	orrs	r1, r3
 8002022:	6041      	str	r1, [r0, #4]
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8002028:	6803      	ldr	r3, [r0, #0]
 800202a:	4219      	tst	r1, r3
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 800202c:	bf14      	ite	ne
 800202e:	2001      	movne	r0, #1
 8002030:	2000      	moveq	r0, #0
 8002032:	4770      	bx	lr

08002034 <ADC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->ISR = (uint32_t)ADC_FLAG;
 8002034:	6001      	str	r1, [r0, #0]
 8002036:	4770      	bx	lr

08002038 <ADC_GetCommonFlagStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8002038:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800203c:	d009      	beq.n	8002052 <ADC_GetCommonFlagStatus+0x1a>
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <ADC_GetCommonFlagStatus+0x20>)
 8002040:	4298      	cmp	r0, r3
 8002042:	d006      	beq.n	8002052 <ADC_GetCommonFlagStatus+0x1a>
  {
    tmpreg1 = ADC1_2->CSR;
  }
  else
  {
    tmpreg1 = ADC3_4->CSR;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <ADC_GetCommonFlagStatus+0x24>)
 8002046:	681b      	ldr	r3, [r3, #0]
  }  
  /* Check the status of the specified ADC flag */
  if ((tmpreg1 & ADC_FLAG) != (uint32_t)RESET)
 8002048:	420b      	tst	r3, r1
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 800204a:	bf14      	ite	ne
 800204c:	2001      	movne	r0, #1
 800204e:	2000      	moveq	r0, #0
 8002050:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    tmpreg1 = ADC1_2->CSR;
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <ADC_GetCommonFlagStatus+0x28>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	e7f7      	b.n	8002048 <ADC_GetCommonFlagStatus+0x10>
 8002058:	50000100 	.word	0x50000100
 800205c:	50000700 	.word	0x50000700
 8002060:	50000300 	.word	0x50000300

08002064 <ADC_ClearCommonFlag>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8002064:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002068:	d007      	beq.n	800207a <ADC_ClearCommonFlag+0x16>
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <ADC_ClearCommonFlag+0x20>)
 800206c:	4298      	cmp	r0, r3
 800206e:	d004      	beq.n	800207a <ADC_ClearCommonFlag+0x16>
    ADC1_2->CSR |= (uint32_t)ADC_FLAG;
  }
  else
  {
    /* Clear the selected ADC flags */
    ADC3_4->CSR |= (uint32_t)ADC_FLAG;
 8002070:	4a05      	ldr	r2, [pc, #20]	; (8002088 <ADC_ClearCommonFlag+0x24>)
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	4319      	orrs	r1, r3
 8002076:	6011      	str	r1, [r2, #0]
 8002078:	4770      	bx	lr
  assert_param(IS_ADC_CLEAR_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    /* Clear the selected ADC flags */
    ADC1_2->CSR |= (uint32_t)ADC_FLAG;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <ADC_ClearCommonFlag+0x28>)
 800207c:	6813      	ldr	r3, [r2, #0]
 800207e:	4319      	orrs	r1, r3
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	4770      	bx	lr
 8002084:	50000100 	.word	0x50000100
 8002088:	50000700 	.word	0x50000700
 800208c:	50000300 	.word	0x50000300

08002090 <ADC_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
   
  itstatus = ADCx->ISR & ADC_IT;
 8002090:	6803      	ldr	r3, [r0, #0]
  
  itenable = ADCx->IER & ADC_IT;
 8002092:	6842      	ldr	r2, [r0, #4]
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
   
  itstatus = ADCx->ISR & ADC_IT;
 8002094:	b289      	uxth	r1, r1
  
  itenable = ADCx->IER & ADC_IT;
  if ((itstatus != (uint32_t)RESET) && (itenable != (uint32_t)RESET))
 8002096:	ea11 0003 	ands.w	r0, r1, r3
 800209a:	d003      	beq.n	80020a4 <ADC_GetITStatus+0x14>
 800209c:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 800209e:	bf14      	ite	ne
 80020a0:	2001      	movne	r0, #1
 80020a2:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <ADC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Clear the selected ADC interrupt pending bit */
  ADCx->ISR |= (uint32_t)ADC_IT;
 80020a8:	6803      	ldr	r3, [r0, #0]
 80020aa:	4319      	orrs	r1, r3
 80020ac:	6001      	str	r1, [r0, #0]
 80020ae:	4770      	bx	lr

080020b0 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 80020b0:	6803      	ldr	r3, [r0, #0]
  DMAy_Channelx->CPAR  = 0;

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;

  if (DMAy_Channelx == DMA1_Channel1)
 80020b2:	493b      	ldr	r1, [pc, #236]	; (80021a0 <DMA_DeInit+0xf0>)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 80020b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020b8:	401a      	ands	r2, r3
  DMAy_Channelx->CPAR  = 0;

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;

  if (DMAy_Channelx == DMA1_Channel1)
 80020ba:	4288      	cmp	r0, r1

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80020bc:	f04f 0300 	mov.w	r3, #0
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 80020c0:	6002      	str	r2, [r0, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80020c2:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80020c4:	6043      	str	r3, [r0, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80020c6:	6083      	str	r3, [r0, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80020c8:	60c3      	str	r3, [r0, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 80020ca:	d027      	beq.n	800211c <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <DMA_DeInit+0xf4>)
 80020ce:	4298      	cmp	r0, r3
 80020d0:	d02a      	beq.n	8002128 <DMA_DeInit+0x78>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 80020d2:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <DMA_DeInit+0xf8>)
 80020d4:	4298      	cmp	r0, r3
 80020d6:	d02d      	beq.n	8002134 <DMA_DeInit+0x84>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <DMA_DeInit+0xfc>)
 80020da:	4298      	cmp	r0, r3
 80020dc:	d030      	beq.n	8002140 <DMA_DeInit+0x90>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <DMA_DeInit+0x100>)
 80020e0:	4298      	cmp	r0, r3
 80020e2:	d039      	beq.n	8002158 <DMA_DeInit+0xa8>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <DMA_DeInit+0x104>)
 80020e6:	4298      	cmp	r0, r3
 80020e8:	d03c      	beq.n	8002164 <DMA_DeInit+0xb4>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <DMA_DeInit+0x108>)
 80020ec:	4298      	cmp	r0, r3
 80020ee:	d00f      	beq.n	8002110 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <DMA_DeInit+0x10c>)
 80020f2:	4298      	cmp	r0, r3
 80020f4:	d03c      	beq.n	8002170 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <DMA_DeInit+0x110>)
 80020f8:	4298      	cmp	r0, r3
 80020fa:	d03f      	beq.n	800217c <DMA_DeInit+0xcc>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <DMA_DeInit+0x114>)
 80020fe:	4298      	cmp	r0, r3
 8002100:	d042      	beq.n	8002188 <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <DMA_DeInit+0x118>)
 8002104:	4298      	cmp	r0, r3
 8002106:	d045      	beq.n	8002194 <DMA_DeInit+0xe4>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <DMA_DeInit+0x11c>)
 800210a:	4298      	cmp	r0, r3
 800210c:	d01e      	beq.n	800214c <DMA_DeInit+0x9c>
 800210e:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <DMA_DeInit+0x120>)
 8002112:	6853      	ldr	r3, [r2, #4]
 8002114:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002118:	6053      	str	r3, [r2, #4]
 800211a:	4770      	bx	lr
  DMAy_Channelx->CMAR = 0;

  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 800211c:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <DMA_DeInit+0x120>)
 800211e:	6853      	ldr	r3, [r2, #4]
 8002120:	f043 030f 	orr.w	r3, r3, #15
 8002124:	6053      	str	r3, [r2, #4]
 8002126:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <DMA_DeInit+0x120>)
 800212a:	6853      	ldr	r3, [r2, #4]
 800212c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002130:	6053      	str	r3, [r2, #4]
 8002132:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <DMA_DeInit+0x120>)
 8002136:	6853      	ldr	r3, [r2, #4]
 8002138:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800213c:	6053      	str	r3, [r2, #4]
 800213e:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <DMA_DeInit+0x120>)
 8002142:	6853      	ldr	r3, [r2, #4]
 8002144:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8002148:	6053      	str	r3, [r2, #4]
 800214a:	4770      	bx	lr
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 800214c:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <DMA_DeInit+0x124>)
 800214e:	6853      	ldr	r3, [r2, #4]
 8002150:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002154:	6053      	str	r3, [r2, #4]
 8002156:	e7da      	b.n	800210e <DMA_DeInit+0x5e>
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <DMA_DeInit+0x120>)
 800215a:	6853      	ldr	r3, [r2, #4]
 800215c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002160:	6053      	str	r3, [r2, #4]
 8002162:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8002164:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <DMA_DeInit+0x120>)
 8002166:	6853      	ldr	r3, [r2, #4]
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	6053      	str	r3, [r2, #4]
 800216e:	4770      	bx	lr
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <DMA_DeInit+0x124>)
 8002172:	6853      	ldr	r3, [r2, #4]
 8002174:	f043 030f 	orr.w	r3, r3, #15
 8002178:	6053      	str	r3, [r2, #4]
 800217a:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <DMA_DeInit+0x124>)
 800217e:	6853      	ldr	r3, [r2, #4]
 8002180:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002184:	6053      	str	r3, [r2, #4]
 8002186:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <DMA_DeInit+0x124>)
 800218a:	6853      	ldr	r3, [r2, #4]
 800218c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002190:	6053      	str	r3, [r2, #4]
 8002192:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA2_Channel4)
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8002194:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <DMA_DeInit+0x124>)
 8002196:	6853      	ldr	r3, [r2, #4]
 8002198:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800219c:	6053      	str	r3, [r2, #4]
 800219e:	4770      	bx	lr
 80021a0:	40020008 	.word	0x40020008
 80021a4:	4002001c 	.word	0x4002001c
 80021a8:	40020030 	.word	0x40020030
 80021ac:	40020044 	.word	0x40020044
 80021b0:	40020058 	.word	0x40020058
 80021b4:	4002006c 	.word	0x4002006c
 80021b8:	40020080 	.word	0x40020080
 80021bc:	40020408 	.word	0x40020408
 80021c0:	4002041c 	.word	0x4002041c
 80021c4:	40020430 	.word	0x40020430
 80021c8:	40020444 	.word	0x40020444
 80021cc:	40020458 	.word	0x40020458
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400

080021d8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80021d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80021dc:	f8d1 b020 	ldr.w	fp, [r1, #32]
 80021e0:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80021e4:	f8d1 9010 	ldr.w	r9, [r1, #16]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80021e8:	698b      	ldr	r3, [r1, #24]
 80021ea:	f8d1 8014 	ldr.w	r8, [r1, #20]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80021ee:	69ce      	ldr	r6, [r1, #28]
 80021f0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80021f2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80021f4:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80021f8:	6802      	ldr	r2, [r0, #0]
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80021fa:	e891 1080 	ldmia.w	r1, {r7, ip}
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80021fe:	ea4b 010a 	orr.w	r1, fp, sl
 8002202:	ea41 0109 	orr.w	r1, r1, r9
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002206:	ea41 0108 	orr.w	r1, r1, r8
 800220a:	4319      	orrs	r1, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800220c:	4331      	orrs	r1, r6
/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 800220e:	f422 43ff 	bic.w	r3, r2, #32640	; 0x7f80
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002212:	4329      	orrs	r1, r5
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8002214:	ea41 0204 	orr.w	r2, r1, r4
/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8002218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800221c:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800221e:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8002220:	f8c0 e004 	str.w	lr, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002224:	6087      	str	r7, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8002226:	f8c0 c00c 	str.w	ip, [r0, #12]
 800222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800222e:	bf00      	nop

08002230 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	6003      	str	r3, [r0, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8002234:	6043      	str	r3, [r0, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8002236:	6083      	str	r3, [r0, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8002238:	8183      	strh	r3, [r0, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800223a:	6103      	str	r3, [r0, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800223c:	6143      	str	r3, [r0, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800223e:	6183      	str	r3, [r0, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002240:	61c3      	str	r3, [r0, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8002242:	6203      	str	r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8002244:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8002246:	6283      	str	r3, [r0, #40]	; 0x28
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop

0800224c <DMA_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800224c:	b929      	cbnz	r1, 800225a <DMA_Cmd+0xe>
    DMAy_Channelx->CCR |= DMA_CCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800224e:	6802      	ldr	r2, [r0, #0]
 8002250:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002254:	4013      	ands	r3, r2
 8002256:	6003      	str	r3, [r0, #0]
 8002258:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6003      	str	r3, [r0, #0]
 8002262:	4770      	bx	lr

08002264 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8002264:	6041      	str	r1, [r0, #4]
 8002266:	4770      	bx	lr

08002268 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8002268:	6840      	ldr	r0, [r0, #4]
}
 800226a:	b280      	uxth	r0, r0
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <DMA_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8002270:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002272:	b91a      	cbnz	r2, 800227c <DMA_ITConfig+0xc>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8002274:	ea23 0101 	bic.w	r1, r3, r1
 8002278:	6001      	str	r1, [r0, #0]
 800227a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 800227c:	4319      	orrs	r1, r3
 800227e:	6001      	str	r1, [r0, #0]
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop

08002284 <DMA_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8002284:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8002286:	bf4c      	ite	mi
 8002288:	4b03      	ldrmi	r3, [pc, #12]	; (8002298 <DMA_GetFlagStatus+0x14>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800228a:	4b04      	ldrpl	r3, [pc, #16]	; (800229c <DMA_GetFlagStatus+0x18>)
 800228c:	681b      	ldr	r3, [r3, #0]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 800228e:	4203      	tst	r3, r0
    bitstatus = RESET;
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
}
 8002290:	bf14      	ite	ne
 8002292:	2001      	movne	r0, #1
 8002294:	2000      	moveq	r0, #0
 8002296:	4770      	bx	lr
 8002298:	40020400 	.word	0x40020400
 800229c:	40020000 	.word	0x40020000

080022a0 <DMA_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80022a0:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80022a2:	bf4c      	ite	mi
 80022a4:	4b01      	ldrmi	r3, [pc, #4]	; (80022ac <DMA_ClearFlag+0xc>)
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 80022a6:	4b02      	ldrpl	r3, [pc, #8]	; (80022b0 <DMA_ClearFlag+0x10>)
 80022a8:	6058      	str	r0, [r3, #4]
 80022aa:	4770      	bx	lr
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020000 	.word	0x40020000

080022b4 <DMA_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80022b4:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 80022b6:	bf4c      	ite	mi
 80022b8:	4b03      	ldrmi	r3, [pc, #12]	; (80022c8 <DMA_GetITStatus+0x14>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 80022ba:	4b04      	ldrpl	r3, [pc, #16]	; (80022cc <DMA_GetITStatus+0x18>)
 80022bc:	681b      	ldr	r3, [r3, #0]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 80022be:	4203      	tst	r3, r0
    /* DMAy_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
}
 80022c0:	bf14      	ite	ne
 80022c2:	2001      	movne	r0, #1
 80022c4:	2000      	moveq	r0, #0
 80022c6:	4770      	bx	lr
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020000 	.word	0x40020000

080022d0 <DMA_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
  
  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80022d0:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80022d2:	bf4c      	ite	mi
 80022d4:	4b01      	ldrmi	r3, [pc, #4]	; (80022dc <DMA_ClearITPendingBit+0xc>)
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80022d6:	4b02      	ldrpl	r3, [pc, #8]	; (80022e0 <DMA_ClearITPendingBit+0x10>)
 80022d8:	6058      	str	r0, [r3, #4]
 80022da:	4770      	bx	lr
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020000 	.word	0x40020000

080022e4 <EXTI_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 80022e4:	b430      	push	{r4, r5}
  EXTI->IMR    = 0x1F800000;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <EXTI_DeInit+0x30>)
  EXTI->EMR    = 0x00000000;
 80022e8:	2200      	movs	r2, #0
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR    = 0x1F800000;
 80022ea:	f04f 55fc 	mov.w	r5, #528482304	; 0x1f800000
  EXTI->EMR    = 0x00000000;
  EXTI->RTSR   = 0x00000000;
  EXTI->FTSR   = 0x00000000;
  EXTI->SWIER  = 0x00000000;
  EXTI->PR     = 0xE07FFFFF;
 80022ee:	f06f 54fc 	mvn.w	r4, #528482304	; 0x1f800000
  EXTI->IMR2   = 0x0000000C;
 80022f2:	200c      	movs	r0, #12
  EXTI->EMR2   = 0x00000000;
  EXTI->RTSR2  = 0x00000000;
  EXTI->FTSR2  = 0x00000000;
  EXTI->SWIER2 = 0x00000000;
  EXTI->PR2    = 0x00000003;
 80022f4:	2103      	movs	r1, #3
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR    = 0x1F800000;
 80022f6:	601d      	str	r5, [r3, #0]
  EXTI->EMR    = 0x00000000;
 80022f8:	605a      	str	r2, [r3, #4]
  EXTI->RTSR   = 0x00000000;
 80022fa:	609a      	str	r2, [r3, #8]
  EXTI->FTSR   = 0x00000000;
 80022fc:	60da      	str	r2, [r3, #12]
  EXTI->SWIER  = 0x00000000;
 80022fe:	611a      	str	r2, [r3, #16]
  EXTI->PR     = 0xE07FFFFF;
 8002300:	615c      	str	r4, [r3, #20]
  EXTI->IMR2   = 0x0000000C;
 8002302:	6218      	str	r0, [r3, #32]
  EXTI->EMR2   = 0x00000000;
  EXTI->RTSR2  = 0x00000000;
  EXTI->FTSR2  = 0x00000000;
  EXTI->SWIER2 = 0x00000000;
  EXTI->PR2    = 0x00000003;
}
 8002304:	bc30      	pop	{r4, r5}
  EXTI->RTSR   = 0x00000000;
  EXTI->FTSR   = 0x00000000;
  EXTI->SWIER  = 0x00000000;
  EXTI->PR     = 0xE07FFFFF;
  EXTI->IMR2   = 0x0000000C;
  EXTI->EMR2   = 0x00000000;
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
  EXTI->RTSR2  = 0x00000000;
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
  EXTI->FTSR2  = 0x00000000;
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
  EXTI->SWIER2 = 0x00000000;
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
  EXTI->PR2    = 0x00000003;
 800230e:	6359      	str	r1, [r3, #52]	; 0x34
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010400 	.word	0x40010400

08002318 <EXTI_Init>:
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002318:	7983      	ldrb	r3, [r0, #6]
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800231a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800231c:	2b00      	cmp	r3, #0
 800231e:	d059      	beq.n	80023d4 <EXTI_Init+0xbc>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8002320:	6803      	ldr	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8002322:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8002324:	7944      	ldrb	r4, [r0, #5]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8002326:	f8df e100 	ldr.w	lr, [pc, #256]	; 8002428 <EXTI_Init+0x110>
    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800232a:	4e3d      	ldr	r6, [pc, #244]	; (8002420 <EXTI_Init+0x108>)
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800232c:	4d3d      	ldr	r5, [pc, #244]	; (8002424 <EXTI_Init+0x10c>)
  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 800232e:	f023 011f 	bic.w	r1, r3, #31
 8002332:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002336:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 800233a:	f003 071f 	and.w	r7, r3, #31
 800233e:	f8d1 c000 	ldr.w	ip, [r1]
 8002342:	2301      	movs	r3, #1
 8002344:	fa03 f707 	lsl.w	r7, r3, r7
 8002348:	ea2c 0707 	bic.w	r7, ip, r7
 800234c:	600f      	str	r7, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800234e:	6801      	ldr	r1, [r0, #0]
 8002350:	f021 0c1f 	bic.w	ip, r1, #31
 8002354:	f001 011f 	and.w	r1, r1, #31
 8002358:	f85c 700e 	ldr.w	r7, [ip, lr]
 800235c:	fa03 f101 	lsl.w	r1, r3, r1
 8002360:	ea27 0101 	bic.w	r1, r7, r1
 8002364:	f84c 100e 	str.w	r1, [ip, lr]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8002368:	6801      	ldr	r1, [r0, #0]
 800236a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800236e:	f021 071f 	bic.w	r7, r1, #31
 8002372:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8002376:	f001 011f 	and.w	r1, r1, #31
 800237a:	f852 e007 	ldr.w	lr, [r2, r7]
 800237e:	fa03 f101 	lsl.w	r1, r3, r1
 8002382:	ea4e 0101 	orr.w	r1, lr, r1
 8002386:	51d1      	str	r1, [r2, r7]
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8002388:	6802      	ldr	r2, [r0, #0]
 800238a:	f022 071f 	bic.w	r7, r2, #31
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	59b9      	ldr	r1, [r7, r6]
 8002394:	fa03 f202 	lsl.w	r2, r3, r2
 8002398:	ea21 0202 	bic.w	r2, r1, r2
 800239c:	51ba      	str	r2, [r7, r6]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800239e:	6802      	ldr	r2, [r0, #0]
 80023a0:	f022 071f 	bic.w	r7, r2, #31
 80023a4:	f002 021f 	and.w	r2, r2, #31
 80023a8:	5979      	ldr	r1, [r7, r5]
 80023aa:	fa03 f202 	lsl.w	r2, r3, r2
 80023ae:	ea21 0202 	bic.w	r2, r1, r2
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80023b2:	2c10      	cmp	r4, #16
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80023b4:	517a      	str	r2, [r7, r5]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80023b6:	d01f      	beq.n	80023f8 <EXTI_Init+0xe0>
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
    }
    else
    {
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80023b8:	6801      	ldr	r1, [r0, #0]
 80023ba:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80023be:	f021 001f 	bic.w	r0, r1, #31
 80023c2:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80023c6:	f001 011f 	and.w	r1, r1, #31
 80023ca:	5814      	ldr	r4, [r2, r0]
 80023cc:	408b      	lsls	r3, r1
 80023ce:	4323      	orrs	r3, r4
 80023d0:	5013      	str	r3, [r2, r0]
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
  }
      
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80023d4:	7903      	ldrb	r3, [r0, #4]
 80023d6:	6802      	ldr	r2, [r0, #0]
 80023d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	f022 041f 	bic.w	r4, r2, #31
 80023e0:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80023e4:	f002 021f 	and.w	r2, r2, #31
 80023e8:	5919      	ldr	r1, [r3, r4]
 80023ea:	2001      	movs	r0, #1
 80023ec:	fa00 f202 	lsl.w	r2, r0, r2
 80023f0:	ea21 0202 	bic.w	r2, r1, r2
 80023f4:	511a      	str	r2, [r3, r4]
 80023f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80023f8:	6802      	ldr	r2, [r0, #0]
 80023fa:	f022 011f 	bic.w	r1, r2, #31
 80023fe:	f002 021f 	and.w	r2, r2, #31
 8002402:	598c      	ldr	r4, [r1, r6]
 8002404:	fa03 f202 	lsl.w	r2, r3, r2
 8002408:	4322      	orrs	r2, r4
 800240a:	518a      	str	r2, [r1, r6]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 800240c:	6802      	ldr	r2, [r0, #0]
 800240e:	f022 011f 	bic.w	r1, r2, #31
 8002412:	f002 021f 	and.w	r2, r2, #31
 8002416:	5948      	ldr	r0, [r1, r5]
 8002418:	4093      	lsls	r3, r2
 800241a:	4303      	orrs	r3, r0
 800241c:	514b      	str	r3, [r1, r5]
 800241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002420:	40010408 	.word	0x40010408
 8002424:	4001040c 	.word	0x4001040c
 8002428:	40010404 	.word	0x40010404

0800242c <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800242c:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800242e:	2210      	movs	r2, #16
 8002430:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002432:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8002434:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8002436:	7183      	strb	r3, [r0, #6]
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop

0800243c <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 800243c:	f020 011f 	bic.w	r1, r0, #31
 8002440:	4a05      	ldr	r2, [pc, #20]	; (8002458 <EXTI_GenerateSWInterrupt+0x1c>)
  *         will be generated.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8002442:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 8002444:	f000 001f 	and.w	r0, r0, #31
 8002448:	588c      	ldr	r4, [r1, r2]
 800244a:	2301      	movs	r3, #1
 800244c:	4083      	lsls	r3, r0
 800244e:	4323      	orrs	r3, r4
 8002450:	508b      	str	r3, [r1, r2]

}
 8002452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40010410 	.word	0x40010410

0800245c <EXTI_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 800245c:	f020 021f 	bic.w	r2, r0, #31
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <EXTI_GetFlagStatus+0x1c>)
 8002462:	f000 001f 	and.w	r0, r0, #31
 8002466:	58d2      	ldr	r2, [r2, r3]
 8002468:	2301      	movs	r3, #1
 800246a:	4083      	lsls	r3, r0
 800246c:	421a      	tst	r2, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800246e:	bf14      	ite	ne
 8002470:	2001      	movne	r0, #1
 8002472:	2000      	moveq	r0, #0
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40010414 	.word	0x40010414

0800247c <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));  
 800247c:	f000 011f 	and.w	r1, r0, #31
 8002480:	2301      	movs	r3, #1
 8002482:	f020 001f 	bic.w	r0, r0, #31
 8002486:	4a02      	ldr	r2, [pc, #8]	; (8002490 <EXTI_ClearFlag+0x14>)
 8002488:	408b      	lsls	r3, r1
 800248a:	5083      	str	r3, [r0, r2]
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40010414 	.word	0x40010414

08002494 <EXTI_GetITStatus>:
  uint32_t enablestatus = 0;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8002494:	f020 031f 	bic.w	r3, r0, #31
 8002498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800249c:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80024a0:	f000 001f 	and.w	r0, r0, #31
 80024a4:	2201      	movs	r2, #1
 80024a6:	6819      	ldr	r1, [r3, #0]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80024a8:	695b      	ldr	r3, [r3, #20]
  uint32_t enablestatus = 0;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 80024aa:	4082      	lsls	r2, r0
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80024ac:	ea13 0002 	ands.w	r0, r3, r2
 80024b0:	d003      	beq.n	80024ba <EXTI_GetITStatus+0x26>
 80024b2:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80024b4:	bf14      	ite	ne
 80024b6:	2001      	movne	r0, #1
 80024b8:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 80024ba:	4770      	bx	lr

080024bc <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80024bc:	f000 011f 	and.w	r1, r0, #31
 80024c0:	2301      	movs	r3, #1
 80024c2:	f020 001f 	bic.w	r0, r0, #31
 80024c6:	4a02      	ldr	r2, [pc, #8]	; (80024d0 <EXTI_ClearITPendingBit+0x14>)
 80024c8:	408b      	lsls	r3, r1
 80024ca:	5083      	str	r3, [r0, r2]
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010414 	.word	0x40010414

080024d4 <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <FLASH_SetLatency+0x10>)
 80024d6:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
 80024d8:	f023 0303 	bic.w	r3, r3, #3
  tmpreg |= FLASH_Latency;
 80024dc:	4318      	orrs	r0, r3
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80024de:	6010      	str	r0, [r2, #0]
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000

080024e8 <FLASH_HalfCycleAccessCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_HLFCYA;
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <FLASH_HalfCycleAccessCmd+0x18>)
 80024ea:	6813      	ldr	r3, [r2, #0]
void FLASH_HalfCycleAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
 80024ec:	b918      	cbnz	r0, 80024f6 <FLASH_HalfCycleAccessCmd+0xe>
  {
    FLASH->ACR |= FLASH_ACR_HLFCYA;
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
 80024ee:	f023 0308 	bic.w	r3, r3, #8
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_HLFCYA;
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40022000 	.word	0x40022000

08002504 <FLASH_PrefetchBufferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <FLASH_PrefetchBufferCmd+0x18>)
 8002506:	6813      	ldr	r3, [r2, #0]
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
 8002508:	b918      	cbnz	r0, 8002512 <FLASH_PrefetchBufferCmd+0xe>
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 800250a:	f023 0310 	bic.w	r3, r3, #16
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000

08002520 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <FLASH_Unlock+0x14>)
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	0612      	lsls	r2, r2, #24
 8002526:	d503      	bpl.n	8002530 <FLASH_Unlock+0x10>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8002528:	4903      	ldr	r1, [pc, #12]	; (8002538 <FLASH_Unlock+0x18>)
    FLASH->KEYR = FLASH_KEY2;
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <FLASH_Unlock+0x1c>)
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800252c:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	45670123 	.word	0x45670123
 800253c:	cdef89ab 	.word	0xcdef89ab

08002540 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002540:	4a02      	ldr	r2, [pc, #8]	; (800254c <FLASH_Lock+0xc>)
 8002542:	6913      	ldr	r3, [r2, #16]
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	6113      	str	r3, [r2, #16]
 800254a:	4770      	bx	lr
 800254c:	40022000 	.word	0x40022000

08002550 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <FLASH_OB_Unlock+0x14>)
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	0592      	lsls	r2, r2, #22
 8002556:	d403      	bmi.n	8002560 <FLASH_OB_Unlock+0x10>
  { 
    /* Unlocking the option bytes block access */
    FLASH->OPTKEYR = FLASH_OPTKEY1;
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <FLASH_OB_Unlock+0x18>)
    FLASH->OPTKEYR = FLASH_OPTKEY2;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <FLASH_OB_Unlock+0x1c>)
void FLASH_OB_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
  { 
    /* Unlocking the option bytes block access */
    FLASH->OPTKEYR = FLASH_OPTKEY1;
 800255c:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPTKEY2;
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000
 8002568:	45670123 	.word	0x45670123
 800256c:	cdef89ab 	.word	0xcdef89ab

08002570 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTWREN Bit to lock the option bytes block access */
  FLASH->CR &= ~FLASH_CR_OPTWRE;
 8002570:	4a02      	ldr	r2, [pc, #8]	; (800257c <FLASH_OB_Lock+0xc>)
 8002572:	6913      	ldr	r3, [r2, #16]
 8002574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002578:	6113      	str	r3, [r2, #16]
 800257a:	4770      	bx	lr
 800257c:	40022000 	.word	0x40022000

08002580 <FLASH_OB_Launch>:
  * @retval None
  */
void FLASH_OB_Launch(void)
{
  /* Set the OBL_Launch bit to launch the option byte loading */
  FLASH->CR |= FLASH_CR_OBL_LAUNCH; 
 8002580:	4a02      	ldr	r2, [pc, #8]	; (800258c <FLASH_OB_Launch+0xc>)
 8002582:	6913      	ldr	r3, [r2, #16]
 8002584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002588:	6113      	str	r3, [r2, #16]
 800258a:	4770      	bx	lr
 800258c:	40022000 	.word	0x40022000

08002590 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes .
  */
uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OBR >> 8);
 8002590:	4b02      	ldr	r3, [pc, #8]	; (800259c <FLASH_OB_GetUser+0xc>)
 8002592:	69d8      	ldr	r0, [r3, #28]
}
 8002594:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000

080025a0 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 80025a0:	4b01      	ldr	r3, [pc, #4]	; (80025a8 <FLASH_OB_GetWRP+0x8>)
 80025a2:	6a18      	ldr	r0, [r3, #32]
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000

080025ac <FLASH_OB_GetRDP>:
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;
  
  if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <FLASH_OB_GetRDP+0x10>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f013 0f06 	tst.w	r3, #6
  else
  {
    readstatus = RESET;
  }
  return readstatus;
}
 80025b4:	bf14      	ite	ne
 80025b6:	2001      	movne	r0, #1
 80025b8:	2000      	moveq	r0, #0
 80025ba:	4770      	bx	lr
 80025bc:	40022000 	.word	0x40022000

080025c0 <FLASH_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <FLASH_ITConfig+0x14>)
 80025c2:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80025c4:	b919      	cbnz	r1, 80025ce <FLASH_ITConfig+0xe>
    FLASH->CR |= FLASH_IT;
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 80025c6:	ea23 0000 	bic.w	r0, r3, r0
 80025ca:	6110      	str	r0, [r2, #16]
 80025cc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80025ce:	4318      	orrs	r0, r3
 80025d0:	6110      	str	r0, [r2, #16]
 80025d2:	4770      	bx	lr
 80025d4:	40022000 	.word	0x40022000

080025d8 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <FLASH_GetFlagStatus+0x10>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
}
 80025de:	bf14      	ite	ne
 80025e0:	2001      	movne	r0, #1
 80025e2:	2000      	moveq	r0, #0
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40022000 	.word	0x40022000

080025ec <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80025ec:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <FLASH_ClearFlag+0x8>)
 80025ee:	60d8      	str	r0, [r3, #12]
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000

080025f8 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <FLASH_GetStatus+0x24>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	07d1      	lsls	r1, r2, #31
 80025fe:	d40b      	bmi.n	8002618 <FLASH_GetStatus+0x20>
  {
    FLASHstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	d501      	bpl.n	800260a <FLASH_GetStatus+0x12>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8002606:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
}
 8002608:	4770      	bx	lr
    { 
      FLASHstatus = FLASH_ERROR_WRP;
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f013 0f04 	tst.w	r3, #4
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8002610:	bf14      	ite	ne
 8002612:	2003      	movne	r0, #3
 8002614:	2004      	moveq	r0, #4
 8002616:	4770      	bx	lr
{
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    FLASHstatus = FLASH_BUSY;
 8002618:	2001      	movs	r0, #1
 800261a:	4770      	bx	lr
 800261c:	40022000 	.word	0x40022000

08002620 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002620:	b510      	push	{r4, lr}
 8002622:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8002624:	f7ff ffe8 	bl	80025f8 <FLASH_GetStatus>
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002628:	2801      	cmp	r0, #1
 800262a:	d106      	bne.n	800263a <FLASH_WaitForLastOperation+0x1a>
 800262c:	b14c      	cbz	r4, 8002642 <FLASH_WaitForLastOperation+0x22>
  {
    status = FLASH_GetStatus();
 800262e:	f7ff ffe3 	bl	80025f8 <FLASH_GetStatus>
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002632:	2801      	cmp	r0, #1
  {
    status = FLASH_GetStatus();
    Timeout--;
 8002634:	f104 34ff 	add.w	r4, r4, #4294967295
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002638:	d0f8      	beq.n	800262c <FLASH_WaitForLastOperation+0xc>
    Timeout--;
  }
  
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 800263a:	2c00      	cmp	r4, #0
 800263c:	bf08      	it	eq
 800263e:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 8002640:	bd10      	pop	{r4, pc}
    Timeout--;
  }
  
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8002642:	2005      	movs	r0, #5
 8002644:	bd10      	pop	{r4, pc}
 8002646:	bf00      	nop

08002648 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800264c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002650:	f7ff ffe6 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002654:	2804      	cmp	r0, #4
 8002656:	d000      	beq.n	800265a <FLASH_ErasePage+0x12>
    FLASH->CR &= ~FLASH_CR_PER;
  }
    
  /* Return the Erase Status */
  return status;
}
 8002658:	bd38      	pop	{r3, r4, r5, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 800265a:	4c09      	ldr	r4, [pc, #36]	; (8002680 <FLASH_ErasePage+0x38>)
 800265c:	6923      	ldr	r3, [r4, #16]
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	6123      	str	r3, [r4, #16]
    FLASH->AR  = Page_Address; 
 8002664:	6165      	str	r5, [r4, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8002666:	6923      	ldr	r3, [r4, #16]
 8002668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266c:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800266e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002672:	f7ff ffd5 	bl	8002620 <FLASH_WaitForLastOperation>
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 8002676:	6923      	ldr	r3, [r4, #16]
 8002678:	f023 0302 	bic.w	r3, r3, #2
 800267c:	6123      	str	r3, [r4, #16]
  }
    
  /* Return the Erase Status */
  return status;
}
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	40022000 	.word	0x40022000

08002684 <FLASH_EraseAllPages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllPages(void)
{
 8002684:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002686:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800268a:	f7ff ffc9 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800268e:	2804      	cmp	r0, #4
 8002690:	d000      	beq.n	8002694 <FLASH_EraseAllPages+0x10>
    FLASH->CR &= ~FLASH_CR_MER;
  }

  /* Return the Erase Status */
  return status;
}
 8002692:	bd10      	pop	{r4, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= FLASH_CR_MER;
 8002694:	4c08      	ldr	r4, [pc, #32]	; (80026b8 <FLASH_EraseAllPages+0x34>)
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6123      	str	r3, [r4, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800269e:	6923      	ldr	r3, [r4, #16]
 80026a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a4:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026a6:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80026aa:	f7ff ffb9 	bl	8002620 <FLASH_WaitForLastOperation>

    /* Disable the MER Bit */
    FLASH->CR &= ~FLASH_CR_MER;
 80026ae:	6923      	ldr	r3, [r4, #16]
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6123      	str	r3, [r4, #16]
  }

  /* Return the Erase Status */
  return status;
}
 80026b6:	bd10      	pop	{r4, pc}
 80026b8:	40022000 	.word	0x40022000

080026bc <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	b082      	sub	sp, #8
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 80026c0:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80026c2:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026c4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80026c8:	460c      	mov	r4, r1
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 80026ca:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026cc:	f7ff ffa8 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80026d0:	2804      	cmp	r0, #4
 80026d2:	d001      	beq.n	80026d8 <FLASH_ProgramWord+0x1c>
    }
  }
   
  /* Return the Program Status */
  return status;
}
 80026d4:	b002      	add	sp, #8
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
  
  if(status == FLASH_COMPLETE)
  {
    /* If the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= FLASH_CR_PG;
 80026d8:	4e10      	ldr	r6, [pc, #64]	; (800271c <FLASH_ProgramWord+0x60>)
 80026da:	6932      	ldr	r2, [r6, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 80026dc:	b2a3      	uxth	r3, r4
  
  if(status == FLASH_COMPLETE)
  {
    /* If the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= FLASH_CR_PG;
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	6132      	str	r2, [r6, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026e4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  {
    /* If the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= FLASH_CR_PG;
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 80026e8:	802b      	strh	r3, [r5, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026ea:	f7ff ff99 	bl	8002620 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 80026ee:	2804      	cmp	r0, #4
 80026f0:	d005      	beq.n	80026fe <FLASH_ProgramWord+0x42>
      FLASH->CR &= ~FLASH_CR_PG;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 80026f2:	6933      	ldr	r3, [r6, #16]
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6133      	str	r3, [r6, #16]
    }
  }
   
  /* Return the Program Status */
  return status;
}
 80026fa:	b002      	add	sp, #8
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 
    if(status == FLASH_COMPLETE)
    {
      /* If the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 80026fe:	3502      	adds	r5, #2
 8002700:	9501      	str	r5, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 8002702:	9b01      	ldr	r3, [sp, #4]
 8002704:	0c24      	lsrs	r4, r4, #16
 8002706:	801c      	strh	r4, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002708:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800270c:	f7ff ff88 	bl	8002620 <FLASH_WaitForLastOperation>
        
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 8002710:	6933      	ldr	r3, [r6, #16]
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6133      	str	r3, [r6, #16]
 8002718:	e7dc      	b.n	80026d4 <FLASH_ProgramWord+0x18>
 800271a:	bf00      	nop
 800271c:	40022000 	.word	0x40022000

08002720 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002724:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8002728:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800272a:	f7ff ff79 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800272e:	2804      	cmp	r0, #4
 8002730:	d000      	beq.n	8002734 <FLASH_ProgramHalfWord+0x14>
    FLASH->CR &= ~FLASH_CR_PG;
  } 
  
  /* Return the Program Status */
  return status;
}
 8002732:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 8002734:	4e07      	ldr	r6, [pc, #28]	; (8002754 <FLASH_ProgramHalfWord+0x34>)
 8002736:	6933      	ldr	r3, [r6, #16]
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6133      	str	r3, [r6, #16]
  
    *(__IO uint16_t*)Address = Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800273e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  if(status == FLASH_COMPLETE)
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
  
    *(__IO uint16_t*)Address = Data;
 8002742:	8025      	strh	r5, [r4, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002744:	f7ff ff6c 	bl	8002620 <FLASH_WaitForLastOperation>
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 8002748:	6933      	ldr	r3, [r6, #16]
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6133      	str	r3, [r6, #16]
  } 
  
  /* Return the Program Status */
  return status;
}
 8002750:	bd70      	pop	{r4, r5, r6, pc}
 8002752:	bf00      	nop
 8002754:	40022000 	.word	0x40022000

08002758 <FLASH_OB_Erase>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_Erase(void)
{
 8002758:	b538      	push	{r3, r4, r5, lr}
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;
  
  if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 800275a:	4c1a      	ldr	r4, [pc, #104]	; (80027c4 <FLASH_OB_Erase+0x6c>)
 800275c:	69e3      	ldr	r3, [r4, #28]
  {
    rdptmp = 0x00;  
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800275e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_OB_GetRDP() != RESET)
  {
    rdptmp = 0x00;  
 8002762:	f013 0f06 	tst.w	r3, #6
 8002766:	bf0c      	ite	eq
 8002768:	25aa      	moveq	r5, #170	; 0xaa
 800276a:	2500      	movne	r5, #0
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800276c:	f7ff ff58 	bl	8002620 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8002770:	2804      	cmp	r0, #4
 8002772:	d000      	beq.n	8002776 <FLASH_OB_Erase+0x1e>
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8002774:	bd38      	pop	{r3, r4, r5, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);

  if(status == FLASH_COMPLETE)
  {   
    /* If the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= FLASH_CR_OPTER;
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	f043 0320 	orr.w	r3, r3, #32
 800277c:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800277e:	6923      	ldr	r3, [r4, #16]
 8002780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002784:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002786:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800278a:	f7ff ff49 	bl	8002620 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 800278e:	2804      	cmp	r0, #4
 8002790:	d006      	beq.n	80027a0 <FLASH_OB_Erase+0x48>
        FLASH->CR &= ~FLASH_CR_OPTPG;
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 8002792:	2805      	cmp	r0, #5
 8002794:	d0ee      	beq.n	8002774 <FLASH_OB_Erase+0x1c>
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8002796:	6923      	ldr	r3, [r4, #16]
 8002798:	f023 0310 	bic.w	r3, r3, #16
 800279c:	6123      	str	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 800279e:	bd38      	pop	{r3, r4, r5, pc}
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
    
    if(status == FLASH_COMPLETE)
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 80027a0:	6923      	ldr	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;

      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <FLASH_OB_Erase+0x70>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
    
    if(status == FLASH_COMPLETE)
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 80027a4:	f023 0320 	bic.w	r3, r3, #32
 80027a8:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 80027aa:	6923      	ldr	r3, [r4, #16]
 80027ac:	f043 0310 	orr.w	r3, r3, #16
 80027b0:	6123      	str	r3, [r4, #16]

      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80027b2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;

      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 80027b6:	8015      	strh	r5, [r2, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80027b8:	f7ff ff32 	bl	8002620 <FLASH_WaitForLastOperation>
 
      if(status != FLASH_TIMEOUT)
 80027bc:	2805      	cmp	r0, #5
 80027be:	d1ea      	bne.n	8002796 <FLASH_OB_Erase+0x3e>
 80027c0:	e7d8      	b.n	8002774 <FLASH_OB_Erase+0x1c>
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	1ffff800 	.word	0x1ffff800

080027cc <FLASH_OB_EnableWRP>:
  *     @arg OB_WRP_AllPages
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
{
 80027cc:	b510      	push	{r4, lr}
 80027ce:	4604      	mov	r4, r0
  OB_WRP = (uint32_t)(~OB_WRP);
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
  WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80027d0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80027d4:	f7ff ff24 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80027d8:	2804      	cmp	r0, #4
 80027da:	d000      	beq.n	80027de <FLASH_OB_EnableWRP+0x12>
      FLASH->CR &= ~FLASH_CR_OPTPG;
    }
  } 
  /* Return the write protection operation Status */
  return status;      
}
 80027dc:	bd10      	pop	{r4, pc}
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {
    FLASH->CR |= FLASH_CR_OPTPG;
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <FLASH_OB_EnableWRP+0x60>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
    
  OB_WRP = (uint32_t)(~OB_WRP);
 80027e0:	43e4      	mvns	r4, r4
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {
    FLASH->CR |= FLASH_CR_OPTPG;
 80027e2:	6913      	ldr	r3, [r2, #16]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
    
  OB_WRP = (uint32_t)(~OB_WRP);
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 80027e4:	b2e1      	uxtb	r1, r4
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {
    FLASH->CR |= FLASH_CR_OPTPG;
 80027e6:	f043 0310 	orr.w	r3, r3, #16

    if(WRP0_Data != 0xFF)
 80027ea:	29ff      	cmp	r1, #255	; 0xff
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {
    FLASH->CR |= FLASH_CR_OPTPG;
 80027ec:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 80027ee:	d00f      	beq.n	8002810 <FLASH_OB_EnableWRP+0x44>
    {
      OB->WRP0 = WRP0_Data;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <FLASH_OB_EnableWRP+0x64>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80027f2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  {
    FLASH->CR |= FLASH_CR_OPTPG;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 80027f6:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80027f8:	f7ff ff12 	bl	8002620 <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 80027fc:	2804      	cmp	r0, #4
 80027fe:	d007      	beq.n	8002810 <FLASH_OB_EnableWRP+0x44>
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
    }
          
    if(status != FLASH_TIMEOUT)
 8002800:	2805      	cmp	r0, #5
 8002802:	d0eb      	beq.n	80027dc <FLASH_OB_EnableWRP+0x10>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8002804:	4a09      	ldr	r2, [pc, #36]	; (800282c <FLASH_OB_EnableWRP+0x60>)
 8002806:	6913      	ldr	r3, [r2, #16]
 8002808:	f023 0310 	bic.w	r3, r3, #16
 800280c:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;      
}
 800280e:	bd10      	pop	{r4, pc}
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
    
  OB_WRP = (uint32_t)(~OB_WRP);
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
  WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
 8002810:	f3c4 2407 	ubfx	r4, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8002814:	2cff      	cmp	r4, #255	; 0xff
 8002816:	d007      	beq.n	8002828 <FLASH_OB_EnableWRP+0x5c>
    {
      OB->WRP1 = WRP1_Data;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <FLASH_OB_EnableWRP+0x64>)
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
    
  OB_WRP = (uint32_t)(~OB_WRP);
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
  WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
 800281a:	b2a4      	uxth	r4, r4
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 800281c:	815c      	strh	r4, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800281e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002822:	f7ff fefd 	bl	8002620 <FLASH_WaitForLastOperation>
 8002826:	e7eb      	b.n	8002800 <FLASH_OB_EnableWRP+0x34>
 8002828:	2004      	movs	r0, #4
 800282a:	e7eb      	b.n	8002804 <FLASH_OB_EnableWRP+0x38>
 800282c:	40022000 	.word	0x40022000
 8002830:	1ffff800 	.word	0x1ffff800

08002834 <FLASH_OB_RDPConfig>:
  *     @arg OB_RDP_Level_2: Chip protection
  *     @retval FLASH Status: The returned value can be: 
  * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002838:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800283c:	f7ff fef0 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002840:	2804      	cmp	r0, #4
 8002842:	d000      	beq.n	8002846 <FLASH_OB_RDPConfig+0x12>
      }
    }
  }
  /* Return the protection operation Status */
  return status;             
}
 8002844:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_OB_RDP(OB_RDP));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {
    FLASH->CR |= FLASH_CR_OPTER;
 8002846:	4c16      	ldr	r4, [pc, #88]	; (80028a0 <FLASH_OB_RDPConfig+0x6c>)
 8002848:	6923      	ldr	r3, [r4, #16]
 800284a:	f043 0320 	orr.w	r3, r3, #32
 800284e:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8002850:	6923      	ldr	r3, [r4, #16]
 8002852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002856:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002858:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800285c:	f7ff fee0 	bl	8002620 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 8002860:	2804      	cmp	r0, #4
 8002862:	d006      	beq.n	8002872 <FLASH_OB_RDPConfig+0x3e>
        FLASH->CR &= ~FLASH_CR_OPTPG;
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 8002864:	2805      	cmp	r0, #5
 8002866:	d0ed      	beq.n	8002844 <FLASH_OB_RDPConfig+0x10>
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= ~FLASH_CR_OPTER;
 8002868:	6923      	ldr	r3, [r4, #16]
 800286a:	f023 0320 	bic.w	r3, r3, #32
 800286e:	6123      	str	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;             
}
 8002870:	bd38      	pop	{r3, r4, r5, pc}
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
    
    if(status == FLASH_COMPLETE)
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 8002872:	6923      	ldr	r3, [r4, #16]
      
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
       
      OB->RDP = OB_RDP;
 8002874:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <FLASH_OB_RDPConfig+0x70>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
    
    if(status == FLASH_COMPLETE)
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 8002876:	f023 0320 	bic.w	r3, r3, #32
 800287a:	6123      	str	r3, [r4, #16]
      
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 800287c:	6923      	ldr	r3, [r4, #16]
       
      OB->RDP = OB_RDP;
 800287e:	b2ad      	uxth	r5, r5
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
      
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 8002880:	f043 0310 	orr.w	r3, r3, #16
 8002884:	6123      	str	r3, [r4, #16]
       
      OB->RDP = OB_RDP;

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 8002886:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
      FLASH->CR &= ~FLASH_CR_OPTER;
      
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
       
      OB->RDP = OB_RDP;
 800288a:	8015      	strh	r5, [r2, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 800288c:	f7ff fec8 	bl	8002620 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_TIMEOUT)
 8002890:	2805      	cmp	r0, #5
 8002892:	d0d7      	beq.n	8002844 <FLASH_OB_RDPConfig+0x10>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8002894:	6923      	ldr	r3, [r4, #16]
 8002896:	f023 0310 	bic.w	r3, r3, #16
 800289a:	6123      	str	r3, [r4, #16]
 800289c:	bd38      	pop	{r3, r4, r5, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	1ffff800 	.word	0x1ffff800

080028a8 <FLASH_OB_UserConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80028aa:	4c12      	ldr	r4, [pc, #72]	; (80028f4 <FLASH_OB_UserConfig+0x4c>)
 80028ac:	4d12      	ldr	r5, [pc, #72]	; (80028f8 <FLASH_OB_UserConfig+0x50>)
  FLASH->OPTKEYR = FLASH_KEY2;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <FLASH_OB_UserConfig+0x54>)
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80028b0:	60a5      	str	r5, [r4, #8]
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80028b2:	4606      	mov	r6, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 80028b4:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80028b6:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80028ba:	460f      	mov	r7, r1
 80028bc:	4615      	mov	r5, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80028be:	f7ff feaf 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80028c2:	2804      	cmp	r0, #4
 80028c4:	d000      	beq.n	80028c8 <FLASH_OB_UserConfig+0x20>
      FLASH->CR &= ~FLASH_CR_OPTPG;
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 80028c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c8:	f065 0307 	orn	r3, r5, #7
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80028cc:	6922      	ldr	r2, [r4, #16]
           
    OB->USER = (uint8_t)((uint8_t)(OB_IWDG | OB_STOP) | (uint8_t)(OB_STDBY |0xF8));
 80028ce:	490c      	ldr	r1, [pc, #48]	; (8002900 <FLASH_OB_UserConfig+0x58>)
 80028d0:	433b      	orrs	r3, r7
 80028d2:	4333      	orrs	r3, r6
 80028d4:	b2db      	uxtb	r3, r3
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80028d6:	f042 0210 	orr.w	r2, r2, #16
 80028da:	6122      	str	r2, [r4, #16]
           
    OB->USER = (uint8_t)((uint8_t)(OB_IWDG | OB_STOP) | (uint8_t)(OB_STDBY |0xF8));
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80028dc:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
           
    OB->USER = (uint8_t)((uint8_t)(OB_IWDG | OB_STOP) | (uint8_t)(OB_STDBY |0xF8));
 80028e0:	804b      	strh	r3, [r1, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80028e2:	f7ff fe9d 	bl	8002620 <FLASH_WaitForLastOperation>

    if(status != FLASH_TIMEOUT)
 80028e6:	2805      	cmp	r0, #5
 80028e8:	d0ed      	beq.n	80028c6 <FLASH_OB_UserConfig+0x1e>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	f023 0310 	bic.w	r3, r3, #16
 80028f0:	6123      	str	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 80028f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f4:	40022000 	.word	0x40022000
 80028f8:	45670123 	.word	0x45670123
 80028fc:	cdef89ab 	.word	0xcdef89ab
 8002900:	1ffff800 	.word	0x1ffff800

08002904 <FLASH_OB_BOOTConfig>:
  *     @arg OB_BOOT1_RESET: BOOT1 Reset
  *     @arg OB_BOOT1_SET: BOOT1 Set
  * @retval None
  */
FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
{
 8002904:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_OB_BOOT1(OB_BOOT1));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8002906:	4c10      	ldr	r4, [pc, #64]	; (8002948 <FLASH_OB_BOOTConfig+0x44>)
 8002908:	4a10      	ldr	r2, [pc, #64]	; (800294c <FLASH_OB_BOOTConfig+0x48>)
  FLASH->OPTKEYR = FLASH_KEY2;
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <FLASH_OB_BOOTConfig+0x4c>)

  /* Check the parameters */
  assert_param(IS_OB_BOOT1(OB_BOOT1));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800290c:	60a2      	str	r2, [r4, #8]
  *     @arg OB_BOOT1_RESET: BOOT1 Reset
  *     @arg OB_BOOT1_SET: BOOT1 Set
  * @retval None
  */
FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
{
 800290e:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_OB_BOOT1(OB_BOOT1));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 8002910:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002912:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002916:	f7ff fe83 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800291a:	2804      	cmp	r0, #4
 800291c:	d000      	beq.n	8002920 <FLASH_OB_BOOTConfig+0x1c>
      FLASH->CR &= ~FLASH_CR_OPTPG;
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 800291e:	bd38      	pop	{r3, r4, r5, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002920:	6923      	ldr	r3, [r4, #16]
           
	OB->USER = OB_BOOT1|0xEF;
 8002922:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <FLASH_OB_BOOTConfig+0x50>)
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002924:	f043 0310 	orr.w	r3, r3, #16
           
	OB->USER = OB_BOOT1|0xEF;
 8002928:	f045 05ef 	orr.w	r5, r5, #239	; 0xef
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 800292c:	6123      	str	r3, [r4, #16]
           
	OB->USER = OB_BOOT1|0xEF;
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800292e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
           
	OB->USER = OB_BOOT1|0xEF;
 8002932:	8055      	strh	r5, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002934:	f7ff fe74 	bl	8002620 <FLASH_WaitForLastOperation>

    if(status != FLASH_TIMEOUT)
 8002938:	2805      	cmp	r0, #5
 800293a:	d0f0      	beq.n	800291e <FLASH_OB_BOOTConfig+0x1a>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	f023 0310 	bic.w	r3, r3, #16
 8002942:	6123      	str	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8002944:	bd38      	pop	{r3, r4, r5, pc}
 8002946:	bf00      	nop
 8002948:	40022000 	.word	0x40022000
 800294c:	45670123 	.word	0x45670123
 8002950:	cdef89ab 	.word	0xcdef89ab
 8002954:	1ffff800 	.word	0x1ffff800

08002958 <FLASH_OB_VDDAConfig>:
  *     @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
  *     @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
  * @retval None
  */
FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
{
 8002958:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800295a:	4c10      	ldr	r4, [pc, #64]	; (800299c <FLASH_OB_VDDAConfig+0x44>)
 800295c:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <FLASH_OB_VDDAConfig+0x48>)
  FLASH->OPTKEYR = FLASH_KEY2;
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <FLASH_OB_VDDAConfig+0x4c>)

  /* Check the parameters */
  assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8002960:	60a2      	str	r2, [r4, #8]
  *     @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
  *     @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
  * @retval None
  */
FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
{
 8002962:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 8002964:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002966:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800296a:	f7ff fe59 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800296e:	2804      	cmp	r0, #4
 8002970:	d000      	beq.n	8002974 <FLASH_OB_VDDAConfig+0x1c>
      FLASH->CR &= ~FLASH_CR_OPTPG;
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8002972:	bd38      	pop	{r3, r4, r5, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002974:	6923      	ldr	r3, [r4, #16]
           
	OB->USER = OB_VDDA_ANALOG |0xDF;
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <FLASH_OB_VDDAConfig+0x50>)
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002978:	f043 0310 	orr.w	r3, r3, #16
           
	OB->USER = OB_VDDA_ANALOG |0xDF;
 800297c:	f045 05df 	orr.w	r5, r5, #223	; 0xdf
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002980:	6123      	str	r3, [r4, #16]
           
	OB->USER = OB_VDDA_ANALOG |0xDF;
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002982:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
           
	OB->USER = OB_VDDA_ANALOG |0xDF;
 8002986:	8055      	strh	r5, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002988:	f7ff fe4a 	bl	8002620 <FLASH_WaitForLastOperation>

    if(status != FLASH_TIMEOUT)
 800298c:	2805      	cmp	r0, #5
 800298e:	d0f0      	beq.n	8002972 <FLASH_OB_VDDAConfig+0x1a>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8002990:	6923      	ldr	r3, [r4, #16]
 8002992:	f023 0310 	bic.w	r3, r3, #16
 8002996:	6123      	str	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8002998:	bd38      	pop	{r3, r4, r5, pc}
 800299a:	bf00      	nop
 800299c:	40022000 	.word	0x40022000
 80029a0:	45670123 	.word	0x45670123
 80029a4:	cdef89ab 	.word	0xcdef89ab
 80029a8:	1ffff800 	.word	0x1ffff800

080029ac <FLASH_OB_SRAMParityConfig>:
  *             @arg OB_SRAM_PARITY_SET: Set SRAM partiy.
  *             @arg OB_SRAM_PARITY_RESET: Reset SRAM partiy.
  * @retval None
  */
FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
{
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80029b0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80029b4:	f7ff fe34 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80029b8:	2804      	cmp	r0, #4
 80029ba:	d000      	beq.n	80029be <FLASH_OB_SRAMParityConfig+0x12>
      FLASH->CR &= ~FLASH_CR_OPTPG;
    }
  }
  /* Return the Option Byte program Status */
  return status;
}
 80029bc:	bd38      	pop	{r3, r4, r5, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80029be:	4d0a      	ldr	r5, [pc, #40]	; (80029e8 <FLASH_OB_SRAMParityConfig+0x3c>)

    OB->USER = OB_SRAM_Parity | 0xBF;
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <FLASH_OB_SRAMParityConfig+0x40>)
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80029c2:	692b      	ldr	r3, [r5, #16]

    OB->USER = OB_SRAM_Parity | 0xBF;
 80029c4:	f044 04bf 	orr.w	r4, r4, #191	; 0xbf
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80029c8:	f043 0310 	orr.w	r3, r3, #16
 80029cc:	612b      	str	r3, [r5, #16]

    OB->USER = OB_SRAM_Parity | 0xBF;
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80029ce:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 

    OB->USER = OB_SRAM_Parity | 0xBF;
 80029d2:	8054      	strh	r4, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80029d4:	f7ff fe24 	bl	8002620 <FLASH_WaitForLastOperation>

    if(status != FLASH_TIMEOUT)
 80029d8:	2805      	cmp	r0, #5
 80029da:	d0ef      	beq.n	80029bc <FLASH_OB_SRAMParityConfig+0x10>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80029dc:	692b      	ldr	r3, [r5, #16]
 80029de:	f023 0310 	bic.w	r3, r3, #16
 80029e2:	612b      	str	r3, [r5, #16]
    }
  }
  /* Return the Option Byte program Status */
  return status;
}
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
 80029e6:	bf00      	nop
 80029e8:	40022000 	.word	0x40022000
 80029ec:	1ffff800 	.word	0x1ffff800

080029f0 <FLASH_OB_WriteUser>:
  *     @arg OB_VDDA_ANALOG_ON / OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source ON / OFF
  * @retval FLASH Status: The returned value can be: 
  * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
{
 80029f0:	b538      	push	{r3, r4, r5, lr}
  FLASH_Status status = FLASH_COMPLETE; 

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80029f2:	4c10      	ldr	r4, [pc, #64]	; (8002a34 <FLASH_OB_WriteUser+0x44>)
 80029f4:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <FLASH_OB_WriteUser+0x48>)
  FLASH->OPTKEYR = FLASH_KEY2;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <FLASH_OB_WriteUser+0x4c>)
FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
{
  FLASH_Status status = FLASH_COMPLETE; 

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80029f8:	60a2      	str	r2, [r4, #8]
  *     @arg OB_VDDA_ANALOG_ON / OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source ON / OFF
  * @retval FLASH Status: The returned value can be: 
  * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
{
 80029fa:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE; 

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 80029fc:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80029fe:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002a02:	f7ff fe0d 	bl	8002620 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002a06:	2804      	cmp	r0, #4
 8002a08:	d000      	beq.n	8002a0c <FLASH_OB_WriteUser+0x1c>
    }
  }    
  /* Return the Option Byte program Status */
  return status;

}
 8002a0a:	bd38      	pop	{r3, r4, r5, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002a0c:	6923      	ldr	r3, [r4, #16]
           
	  OB->USER = OB_USER | 0x88;
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <FLASH_OB_WriteUser+0x50>)
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002a10:	f043 0310 	orr.w	r3, r3, #16
           
	  OB->USER = OB_USER | 0x88;
 8002a14:	f045 0588 	orr.w	r5, r5, #136	; 0x88
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002a18:	6123      	str	r3, [r4, #16]
           
	  OB->USER = OB_USER | 0x88;
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a1a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
           
	  OB->USER = OB_USER | 0x88;
 8002a1e:	8055      	strh	r5, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a20:	f7ff fdfe 	bl	8002620 <FLASH_WaitForLastOperation>

    if(status != FLASH_TIMEOUT)
 8002a24:	2805      	cmp	r0, #5
 8002a26:	d0f0      	beq.n	8002a0a <FLASH_OB_WriteUser+0x1a>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8002a28:	6923      	ldr	r3, [r4, #16]
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	6123      	str	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;

}
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
 8002a32:	bf00      	nop
 8002a34:	40022000 	.word	0x40022000
 8002a38:	45670123 	.word	0x45670123
 8002a3c:	cdef89ab 	.word	0xcdef89ab
 8002a40:	1ffff800 	.word	0x1ffff800

08002a44 <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a48:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8002a4c:	460c      	mov	r4, r1
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a4e:	f7ff fde7 	bl	8002620 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8002a52:	2804      	cmp	r0, #4
 8002a54:	d000      	beq.n	8002a58 <FLASH_ProgramOptionByteData+0x14>
      FLASH->CR &= ~FLASH_CR_OPTPG;
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
}
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);

  if(status == FLASH_COMPLETE)
  {
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002a58:	4e08      	ldr	r6, [pc, #32]	; (8002a7c <FLASH_ProgramOptionByteData+0x38>)
 8002a5a:	6933      	ldr	r3, [r6, #16]
    *(__IO uint16_t*)Address = Data;
 8002a5c:	b2a4      	uxth	r4, r4
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);

  if(status == FLASH_COMPLETE)
  {
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8002a5e:	f043 0310 	orr.w	r3, r3, #16
 8002a62:	6133      	str	r3, [r6, #16]
    *(__IO uint16_t*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a64:	f44f 2030 	mov.w	r0, #720896	; 0xb0000

  if(status == FLASH_COMPLETE)
  {
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
    *(__IO uint16_t*)Address = Data;
 8002a68:	802c      	strh	r4, [r5, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002a6a:	f7ff fdd9 	bl	8002620 <FLASH_WaitForLastOperation>
    
    if(status != FLASH_TIMEOUT)
 8002a6e:	2805      	cmp	r0, #5
 8002a70:	d0f1      	beq.n	8002a56 <FLASH_ProgramOptionByteData+0x12>
    {
      /* If the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8002a72:	6933      	ldr	r3, [r6, #16]
 8002a74:	f023 0310 	bic.w	r3, r3, #16
 8002a78:	6133      	str	r3, [r6, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
}
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	40022000 	.word	0x40022000

08002a80 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8002a80:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8002a84:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8002a86:	d01b      	beq.n	8002ac0 <GPIO_DeInit+0x40>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <GPIO_DeInit+0xb8>)
 8002a8a:	4298      	cmp	r0, r3
 8002a8c:	d024      	beq.n	8002ad8 <GPIO_DeInit+0x58>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <GPIO_DeInit+0xbc>)
 8002a90:	4298      	cmp	r0, r3
 8002a92:	d02d      	beq.n	8002af0 <GPIO_DeInit+0x70>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <GPIO_DeInit+0xc0>)
 8002a96:	4298      	cmp	r0, r3
 8002a98:	d036      	beq.n	8002b08 <GPIO_DeInit+0x88>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <GPIO_DeInit+0xc4>)
 8002a9c:	4298      	cmp	r0, r3
 8002a9e:	d03f      	beq.n	8002b20 <GPIO_DeInit+0xa0>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <GPIO_DeInit+0xc8>)
 8002aa2:	4298      	cmp	r0, r3
 8002aa4:	d000      	beq.n	8002aa8 <GPIO_DeInit+0x28>
 8002aa6:	bd08      	pop	{r3, pc}
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8002aa8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002aac:	2101      	movs	r1, #1
 8002aae:	f000 fbf9 	bl	80032a4 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8002ab2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002ab6:	2100      	movs	r1, #0
    }
  }
}
 8002ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8002abc:	f000 bbf2 	b.w	80032a4 <RCC_AHBPeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002ac0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	f000 fbed 	bl	80032a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8002aca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ace:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8002ad4:	f000 bbe6 	b.w	80032a4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002ad8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002adc:	2101      	movs	r1, #1
 8002ade:	f000 fbe1 	bl	80032a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8002ae2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ae6:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8002aec:	f000 bbda 	b.w	80032a4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8002af0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002af4:	2101      	movs	r1, #1
 8002af6:	f000 fbd5 	bl	80032a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8002afa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002afe:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8002b04:	f000 bbce 	b.w	80032a4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8002b08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	f000 fbc9 	bl	80032a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8002b12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b16:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8002b1c:	f000 bbc2 	b.w	80032a4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8002b20:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b24:	2101      	movs	r1, #1
 8002b26:	f000 fbbd 	bl	80032a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8002b2a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b2e:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8002b34:	f000 bbb6 	b.w	80032a4 <RCC_AHBPeriphResetCmd>
 8002b38:	48000400 	.word	0x48000400
 8002b3c:	48000800 	.word	0x48000800
 8002b40:	48000c00 	.word	0x48000c00
 8002b44:	48001000 	.word	0x48001000
 8002b48:	48001400 	.word	0x48001400

08002b4c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002b52:	4613      	mov	r3, r2
 8002b54:	f8d1 e000 	ldr.w	lr, [r1]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002b58:	2701      	movs	r7, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002b5a:	f04f 0c03 	mov.w	ip, #3
 8002b5e:	e004      	b.n	8002b6a <GPIO_Init+0x1e>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002b60:	3301      	adds	r3, #1
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	f102 0202 	add.w	r2, r2, #2
 8002b68:	d025      	beq.n	8002bb6 <GPIO_Init+0x6a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002b6a:	fa07 f403 	lsl.w	r4, r7, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002b6e:	ea04 050e 	and.w	r5, r4, lr

    if (currentpin == pos)
 8002b72:	42a5      	cmp	r5, r4
 8002b74:	d1f4      	bne.n	8002b60 <GPIO_Init+0x14>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002b76:	790e      	ldrb	r6, [r1, #4]
 8002b78:	1e74      	subs	r4, r6, #1
 8002b7a:	2c01      	cmp	r4, #1
 8002b7c:	fa0c f402 	lsl.w	r4, ip, r2
 8002b80:	d91b      	bls.n	8002bba <GPIO_Init+0x6e>
 8002b82:	43e4      	mvns	r4, r4
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002b84:	6805      	ldr	r5, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002b86:	f891 8007 	ldrb.w	r8, [r1, #7]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002b8a:	402c      	ands	r4, r5
 8002b8c:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002b8e:	6804      	ldr	r4, [r0, #0]
 8002b90:	4096      	lsls	r6, r2
 8002b92:	4326      	orrs	r6, r4
 8002b94:	6006      	str	r6, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002b96:	68c4      	ldr	r4, [r0, #12]
 8002b98:	fa0c f502 	lsl.w	r5, ip, r2
 8002b9c:	ea24 0405 	bic.w	r4, r4, r5
 8002ba0:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002ba2:	68c5      	ldr	r5, [r0, #12]
 8002ba4:	fa08 f402 	lsl.w	r4, r8, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002ba8:	3301      	adds	r3, #1

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002baa:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002bac:	2b10      	cmp	r3, #16

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002bae:	60c4      	str	r4, [r0, #12]
 8002bb0:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002bb4:	d1d9      	bne.n	8002b6a <GPIO_Init+0x1e>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002bba:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002bbe:	f891 8005 	ldrb.w	r8, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002bc2:	f891 9006 	ldrb.w	r9, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002bc6:	fa0c f402 	lsl.w	r4, ip, r2
 8002bca:	43e4      	mvns	r4, r4
 8002bcc:	ea04 0a0a 	and.w	sl, r4, sl
 8002bd0:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002bd4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002bd8:	fa08 f802 	lsl.w	r8, r8, r2
 8002bdc:	ea48 080a 	orr.w	r8, r8, sl
 8002be0:	f8c0 8008 	str.w	r8, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8002be4:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8002be8:	fa1f f888 	uxth.w	r8, r8
 8002bec:	ea28 0805 	bic.w	r8, r8, r5
 8002bf0:	f8a0 8004 	strh.w	r8, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002bf4:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8002bf8:	fa09 f903 	lsl.w	r9, r9, r3
 8002bfc:	ea49 0508 	orr.w	r5, r9, r8
 8002c00:	b2ad      	uxth	r5, r5
 8002c02:	8085      	strh	r5, [r0, #4]
 8002c04:	e7be      	b.n	8002b84 <GPIO_Init+0x38>
 8002c06:	bf00      	nop

08002c08 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002c08:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002c0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002c0e:	2201      	movs	r2, #1
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002c10:	6001      	str	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002c12:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002c14:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002c16:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002c18:	71c3      	strb	r3, [r0, #7]
 8002c1a:	4770      	bx	lr

08002c1c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8002c1c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002c20:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002c22:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002c24:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8002c26:	69c3      	ldr	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8002c28:	69c3      	ldr	r3, [r0, #28]
 8002c2a:	4770      	bx	lr

08002c2c <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002c2c:	8a03      	ldrh	r3, [r0, #16]
 8002c2e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8002c30:	bf14      	ite	ne
 8002c32:	2001      	movne	r0, #1
 8002c34:	2000      	moveq	r0, #0
 8002c36:	4770      	bx	lr

08002c38 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8002c38:	8a00      	ldrh	r0, [r0, #16]
}
 8002c3a:	b280      	uxth	r0, r0
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop

08002c40 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002c40:	8a83      	ldrh	r3, [r0, #20]
 8002c42:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8002c44:	bf14      	ite	ne
 8002c46:	2001      	movne	r0, #1
 8002c48:	2000      	moveq	r0, #0
 8002c4a:	4770      	bx	lr

08002c4c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8002c4c:	8a80      	ldrh	r0, [r0, #20]
}
 8002c4e:	b280      	uxth	r0, r0
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8002c54:	6181      	str	r1, [r0, #24]
 8002c56:	4770      	bx	lr

08002c58 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8002c58:	8501      	strh	r1, [r0, #40]	; 0x28
 8002c5a:	4770      	bx	lr

08002c5c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8002c5c:	b90a      	cbnz	r2, 8002c62 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8002c5e:	8501      	strh	r1, [r0, #40]	; 0x28
 8002c60:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	6181      	str	r1, [r0, #24]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop

08002c68 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8002c68:	8281      	strh	r1, [r0, #20]
 8002c6a:	4770      	bx	lr

08002c6c <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002c6c:	08cb      	lsrs	r3, r1, #3
 8002c6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002c72:	f001 0107 	and.w	r1, r1, #7
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002c76:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002c78:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002c7a:	6a04      	ldr	r4, [r0, #32]
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	408b      	lsls	r3, r1
 8002c80:	ea24 0303 	bic.w	r3, r4, r3
 8002c84:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002c86:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8002c88:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002c8c:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002c8e:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002c90:	6203      	str	r3, [r0, #32]
}
 8002c92:	4770      	bx	lr

08002c94 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002c94:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <NVIC_PriorityGroupConfig+0x10>)
 8002c9a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002c9e:	60d8      	str	r0, [r3, #12]
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002ca8:	78c3      	ldrb	r3, [r0, #3]
 8002caa:	b95b      	cbnz	r3, 8002cc4 <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002cac:	7803      	ldrb	r3, [r0, #0]
 8002cae:	4818      	ldr	r0, [pc, #96]	; (8002d10 <NVIC_Init+0x68>)
 8002cb0:	095a      	lsrs	r2, r3, #5
 8002cb2:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002cbe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002cc2:	4770      	bx	lr
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002cc4:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <NVIC_Init+0x6c>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002cc8:	7843      	ldrb	r3, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002cca:	68d2      	ldr	r2, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002ccc:	7885      	ldrb	r5, [r0, #2]
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002cce:	7801      	ldrb	r1, [r0, #0]
 8002cd0:	4c0f      	ldr	r4, [pc, #60]	; (8002d10 <NVIC_Init+0x68>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002cd2:	43d2      	mvns	r2, r2
 8002cd4:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8002cd8:	260f      	movs	r6, #15
 8002cda:	40d6      	lsrs	r6, r2
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 8002cdc:	f1c2 0704 	rsb	r7, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002ce0:	fa03 f207 	lsl.w	r2, r3, r7
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002ce4:	ea06 0305 	and.w	r3, r6, r5
 8002ce8:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002cea:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
 8002cee:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
 8002cf2:	011b      	lsls	r3, r3, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002cfa:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f003 011f 	and.w	r1, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002d02:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002d04:	408a      	lsls	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002d06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002d0a:	bcf0      	pop	{r4, r5, r6, r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8002d18:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8002d1c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8002d20:	4b01      	ldr	r3, [pc, #4]	; (8002d28 <NVIC_SetVectorTable+0x10>)
 8002d22:	4308      	orrs	r0, r1
 8002d24:	6098      	str	r0, [r3, #8]
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <NVIC_SystemLPConfig+0x14>)
 8002d2e:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8002d30:	b919      	cbnz	r1, 8002d3a <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8002d32:	ea23 0000 	bic.w	r0, r3, r0
 8002d36:	6110      	str	r0, [r2, #16]
 8002d38:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8002d3a:	4318      	orrs	r0, r3
 8002d3c:	6110      	str	r0, [r2, #16]
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <SysTick_CLKSourceConfig+0x14>)
 8002d46:	6813      	ldr	r3, [r2, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8002d48:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8002d4a:	bf0c      	ite	eq
 8002d4c:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8002d50:	f023 0304 	bicne.w	r3, r3, #4
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4770      	bx	lr
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <RCC_DeInit+0x48>)

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8002d5e:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <RCC_DeInit+0x4c>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d60:	6818      	ldr	r0, [r3, #0]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8002d62:	4912      	ldr	r1, [pc, #72]	; (8002dac <RCC_DeInit+0x50>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d64:	f040 0001 	orr.w	r0, r0, #1
 8002d68:	6018      	str	r0, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8002d6a:	6858      	ldr	r0, [r3, #4]
 8002d6c:	4002      	ands	r2, r0
 8002d6e:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d82:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002d92:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8002d98:	6b18      	ldr	r0, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d9a:	2200      	movs	r2, #0

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8002d9c:	4001      	ands	r1, r0
 8002d9e:	6319      	str	r1, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	4770      	bx	lr
 8002da4:	40021000 	.word	0x40021000
 8002da8:	f8ffc000 	.word	0xf8ffc000
 8002dac:	0f00fccc 	.word	0x0f00fccc

08002db0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8002db0:	4b02      	ldr	r3, [pc, #8]	; (8002dbc <RCC_HSEConfig+0xc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8002db6:	7018      	strb	r0, [r3, #0]
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021002 	.word	0x40021002

08002dc0 <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8002dc0:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <RCC_AdjustHSICalibrationValue+0x10>)
 8002dc2:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8002dc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8002dc8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8002dcc:	6010      	str	r0, [r2, #0]
 8002dce:	4770      	bx	lr
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8002dd4:	4b01      	ldr	r3, [pc, #4]	; (8002ddc <RCC_HSICmd+0x8>)
 8002dd6:	6018      	str	r0, [r3, #0]
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	42420000 	.word	0x42420000

08002de0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <RCC_LSEConfig+0x1c>)
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8002dea:	6a1a      	ldr	r2, [r3, #32]
 8002dec:	f022 0204 	bic.w	r2, r2, #4
 8002df0:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	4310      	orrs	r0, r2
 8002df6:	6218      	str	r0, [r3, #32]
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000

08002e00 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <RCC_LSEDriveConfig+0x14>)
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	f022 0218 	bic.w	r2, r2, #24
 8002e08:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	4310      	orrs	r0, r2
 8002e0e:	6218      	str	r0, [r3, #32]
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000

08002e18 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8002e18:	4b01      	ldr	r3, [pc, #4]	; (8002e20 <RCC_LSICmd+0x8>)
 8002e1a:	6018      	str	r0, [r3, #0]
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	42420480 	.word	0x42420480

08002e24 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <RCC_PLLConfig+0x14>)
 8002e26:	6853      	ldr	r3, [r2, #4]
 8002e28:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002e2c:	6053      	str	r3, [r2, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8002e2e:	6853      	ldr	r3, [r2, #4]
 8002e30:	4319      	orrs	r1, r3
 8002e32:	4308      	orrs	r0, r1
 8002e34:	6050      	str	r0, [r2, #4]
 8002e36:	4770      	bx	lr
 8002e38:	40021000 	.word	0x40021000

08002e3c <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8002e3c:	4b01      	ldr	r3, [pc, #4]	; (8002e44 <RCC_PLLCmd+0x8>)
 8002e3e:	6018      	str	r0, [r3, #0]
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	42420060 	.word	0x42420060

08002e48 <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8002e48:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <RCC_PREDIV1Config+0x10>)
 8002e4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8002e4c:	f023 030f 	bic.w	r3, r3, #15

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8002e50:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8002e52:	62d0      	str	r0, [r2, #44]	; 0x2c
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8002e5c:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <RCC_ClockSecuritySystemCmd+0x8>)
 8002e5e:	6018      	str	r0, [r3, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	4242004c 	.word	0x4242004c

08002e68 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 8002e68:	4b01      	ldr	r3, [pc, #4]	; (8002e70 <RCC_MCOConfig+0x8>)
 8002e6a:	7018      	strb	r0, [r3, #0]
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40021007 	.word	0x40021007

08002e74 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <RCC_SYSCLKConfig+0x10>)
 8002e76:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8002e78:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002e7c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002e7e:	6050      	str	r0, [r2, #4]
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <RCC_GetSYSCLKSource+0xc>)
 8002e8a:	6858      	ldr	r0, [r3, #4]
}
 8002e8c:	f000 000c 	and.w	r0, r0, #12
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000

08002e98 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <RCC_HCLKConfig+0x10>)
 8002e9a:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8002e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8002ea0:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002ea2:	6050      	str	r0, [r2, #4]
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <RCC_PCLK1Config+0x10>)
 8002eae:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8002eb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8002eb4:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002eb6:	6050      	str	r0, [r2, #4]
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8002ec0:	4a03      	ldr	r2, [pc, #12]	; (8002ed0 <RCC_PCLK2Config+0x10>)
 8002ec2:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8002ec4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8002ec8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002ecc:	6050      	str	r0, [r2, #4]
 8002ece:	4770      	bx	lr
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <RCC_GetClocksFreq>:
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002ed4:	4a9e      	ldr	r2, [pc, #632]	; (8003150 <RCC_GetClocksFreq+0x27c>)
 8002ed6:	6853      	ldr	r3, [r2, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8002edc:	2b04      	cmp	r3, #4
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002ede:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8002ee0:	f000 8104 	beq.w	80030ec <RCC_GetClocksFreq+0x218>
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	f000 80ee 	beq.w	80030c6 <RCC_GetClocksFreq+0x1f2>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002eea:	499a      	ldr	r1, [pc, #616]	; (8003154 <RCC_GetClocksFreq+0x280>)
 8002eec:	6001      	str	r1, [r0, #0]
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8002eee:	b103      	cbz	r3, 8002ef2 <RCC_GetClocksFreq+0x1e>
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8002ef0:	2300      	movs	r3, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002ef2:	4d97      	ldr	r5, [pc, #604]	; (8003150 <RCC_GetClocksFreq+0x27c>)
  tmp = tmp >> 4;
  ahbpresc = APBAHBPrescTable[tmp]; 
 8002ef4:	4c98      	ldr	r4, [pc, #608]	; (8003158 <RCC_GetClocksFreq+0x284>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002ef6:	686a      	ldr	r2, [r5, #4]
  tmp = tmp >> 4;
 8002ef8:	f3c2 1203 	ubfx	r2, r2, #4, #4
  ahbpresc = APBAHBPrescTable[tmp]; 
 8002efc:	5ca6      	ldrb	r6, [r4, r2]
 8002efe:	b2f6      	uxtb	r6, r6
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8002f00:	fa21 f206 	lsr.w	r2, r1, r6
 8002f04:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8002f06:	686f      	ldr	r7, [r5, #4]
  tmp = tmp >> 8;
 8002f08:	f3c7 2702 	ubfx	r7, r7, #8, #3
  presc = APBAHBPrescTable[tmp];
 8002f0c:	5de7      	ldrb	r7, [r4, r7]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002f0e:	fa22 fe07 	lsr.w	lr, r2, r7
 8002f12:	f8c0 e008 	str.w	lr, [r0, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8002f16:	686f      	ldr	r7, [r5, #4]
  tmp = tmp >> 11;
 8002f18:	f3c7 27c2 	ubfx	r7, r7, #11, #3
  apb2presc = APBAHBPrescTable[tmp];
 8002f1c:	5de7      	ldrb	r7, [r4, r7]
 8002f1e:	b2ff      	uxtb	r7, r7
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8002f20:	40fa      	lsrs	r2, r7
 8002f22:	60c2      	str	r2, [r0, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8002f24:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  tmp = tmp >> 4;
 8002f26:	f3c5 1504 	ubfx	r5, r5, #4, #5
  presc = ADCPrescTable[tmp];
 8002f2a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8002f2e:	8a2d      	ldrh	r5, [r5, #16]
 8002f30:	b2ad      	uxth	r5, r5
  if ((presc & 0x10) != 0)
 8002f32:	f015 0f10 	tst.w	r5, #16
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8002f36:	bf1c      	itt	ne
 8002f38:	fbb3 f5f5 	udivne	r5, r3, r5
 8002f3c:	6105      	strne	r5, [r0, #16]
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8002f3e:	4d84      	ldr	r5, [pc, #528]	; (8003150 <RCC_GetClocksFreq+0x27c>)
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002f40:	bf08      	it	eq
 8002f42:	6101      	streq	r1, [r0, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8002f44:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  tmp = tmp >> 9;
 8002f46:	f3c5 2544 	ubfx	r5, r5, #9, #5
  presc = ADCPrescTable[tmp];
 8002f4a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002f4e:	8a24      	ldrh	r4, [r4, #16]
 8002f50:	b2a4      	uxth	r4, r4
  if ((presc & 0x10) != 0)
 8002f52:	06e5      	lsls	r5, r4, #27
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8002f54:	bf44      	itt	mi
 8002f56:	fbb3 f4f4 	udivmi	r4, r3, r4
 8002f5a:	6144      	strmi	r4, [r0, #20]
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8002f5c:	4c7c      	ldr	r4, [pc, #496]	; (8003150 <RCC_GetClocksFreq+0x27c>)
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002f5e:	bf58      	it	pl
 8002f60:	6141      	strpl	r1, [r0, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8002f62:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002f64:	06e5      	lsls	r5, r4, #27
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8002f66:	bf5c      	itt	pl
 8002f68:	4c7a      	ldrpl	r4, [pc, #488]	; (8003154 <RCC_GetClocksFreq+0x280>)
 8002f6a:	6184      	strpl	r4, [r0, #24]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8002f6c:	4c78      	ldr	r4, [pc, #480]	; (8003150 <RCC_GetClocksFreq+0x27c>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002f6e:	bf48      	it	mi
 8002f70:	6181      	strmi	r1, [r0, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8002f72:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002f74:	06a4      	lsls	r4, r4, #26
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8002f76:	bf5c      	itt	pl
 8002f78:	4c76      	ldrpl	r4, [pc, #472]	; (8003154 <RCC_GetClocksFreq+0x280>)
 8002f7a:	61c4      	strpl	r4, [r0, #28]
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8002f7c:	4c74      	ldr	r4, [pc, #464]	; (8003150 <RCC_GetClocksFreq+0x27c>)
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002f7e:	bf48      	it	mi
 8002f80:	61c1      	strmi	r1, [r0, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8002f82:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002f84:	05ed      	lsls	r5, r5, #23
 8002f86:	d53b      	bpl.n	8003000 <RCC_GetClocksFreq+0x12c>
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	f000 80b9 	beq.w	8003100 <RCC_GetClocksFreq+0x22c>
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8002f8e:	6202      	str	r2, [r0, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8002f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8002f92:	6242      	str	r2, [r0, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8002f94:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <RCC_GetClocksFreq+0x27c>)
 8002f96:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002f98:	07a4      	lsls	r4, r4, #30
 8002f9a:	f040 8082 	bne.w	80030a2 <RCC_GetClocksFreq+0x1ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8002f9e:	6282      	str	r2, [r0, #40]	; 0x28
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8002fa0:	4b6b      	ldr	r3, [pc, #428]	; (8003150 <RCC_GetClocksFreq+0x27c>)
 8002fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002fa8:	d166      	bne.n	8003078 <RCC_GetClocksFreq+0x1a4>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8002faa:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8002fae:	4b68      	ldr	r3, [pc, #416]	; (8003150 <RCC_GetClocksFreq+0x27c>)
 8002fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb2:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8002fb6:	d14a      	bne.n	800304e <RCC_GetClocksFreq+0x17a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8002fb8:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <RCC_GetClocksFreq+0x27c>)
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002fc4:	d127      	bne.n	8003016 <RCC_GetClocksFreq+0x142>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8002fc6:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8002fca:	4b61      	ldr	r3, [pc, #388]	; (8003150 <RCC_GetClocksFreq+0x27c>)
 8002fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fce:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 8002fd2:	d039      	beq.n	8003048 <RCC_GetClocksFreq+0x174>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8002fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd6:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002fda:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002fde:	f000 809e 	beq.w	800311e <RCC_GetClocksFreq+0x24a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8002fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002fe8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002fec:	f000 80ac 	beq.w	8003148 <RCC_GetClocksFreq+0x274>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ff6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ffa:	f000 8092 	beq.w	8003122 <RCC_GetClocksFreq+0x24e>
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8003000:	6202      	str	r2, [r0, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8003002:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8003004:	05a5      	lsls	r5, r4, #22
 8003006:	d5c4      	bpl.n	8002f92 <RCC_GetClocksFreq+0xbe>
 8003008:	428b      	cmp	r3, r1
 800300a:	d1c2      	bne.n	8002f92 <RCC_GetClocksFreq+0xbe>
  && (apb2presc == ahbpresc))
 800300c:	42b7      	cmp	r7, r6
 800300e:	d1c0      	bne.n	8002f92 <RCC_GetClocksFreq+0xbe>
 8003010:	004b      	lsls	r3, r1, #1
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8003012:	6243      	str	r3, [r0, #36]	; 0x24
 8003014:	e7be      	b.n	8002f94 <RCC_GetClocksFreq+0xc0>
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8003016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003018:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800301c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003020:	d068      	beq.n	80030f4 <RCC_GetClocksFreq+0x220>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8003022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003024:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8003028:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800302c:	d07c      	beq.n	8003128 <RCC_GetClocksFreq+0x254>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8003038:	bf04      	itt	eq
 800303a:	4b46      	ldreq	r3, [pc, #280]	; (8003154 <RCC_GetClocksFreq+0x280>)
 800303c:	6343      	streq	r3, [r0, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <RCC_GetClocksFreq+0x27c>)
 8003040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003042:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 8003046:	d1c5      	bne.n	8002fd4 <RCC_GetClocksFreq+0x100>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8003048:	f8c0 e038 	str.w	lr, [r0, #56]	; 0x38
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800304e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003050:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8003054:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8003058:	d05b      	beq.n	8003112 <RCC_GetClocksFreq+0x23e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800305a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8003060:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8003064:	d064      	beq.n	8003130 <RCC_GetClocksFreq+0x25c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800306c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8003070:	bf04      	itt	eq
 8003072:	4b38      	ldreq	r3, [pc, #224]	; (8003154 <RCC_GetClocksFreq+0x280>)
 8003074:	6303      	streq	r3, [r0, #48]	; 0x30
 8003076:	e7a1      	b.n	8002fbc <RCC_GetClocksFreq+0xe8>
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8003078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800307e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003082:	d039      	beq.n	80030f8 <RCC_GetClocksFreq+0x224>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8003084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003086:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800308a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800308e:	d053      	beq.n	8003138 <RCC_GetClocksFreq+0x264>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003096:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800309a:	bf04      	itt	eq
 800309c:	4b2d      	ldreq	r3, [pc, #180]	; (8003154 <RCC_GetClocksFreq+0x280>)
 800309e:	62c3      	streq	r3, [r0, #44]	; 0x2c
 80030a0:	e785      	b.n	8002fae <RCC_GetClocksFreq+0xda>
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80030a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a4:	f002 0203 	and.w	r2, r2, #3
 80030a8:	2a01      	cmp	r2, #1
 80030aa:	d027      	beq.n	80030fc <RCC_GetClocksFreq+0x228>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	f002 0203 	and.w	r2, r2, #3
 80030b2:	2a02      	cmp	r2, #2
 80030b4:	d044      	beq.n	8003140 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80030be:	bf04      	itt	eq
 80030c0:	4b24      	ldreq	r3, [pc, #144]	; (8003154 <RCC_GetClocksFreq+0x280>)
 80030c2:	6283      	streq	r3, [r0, #40]	; 0x28
 80030c4:	e76c      	b.n	8002fa0 <RCC_GetClocksFreq+0xcc>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80030c6:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80030c8:	6854      	ldr	r4, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80030ca:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80030ce:	1c99      	adds	r1, r3, #2
      
      if (pllsource == 0x00)
 80030d0:	03e3      	lsls	r3, r4, #15
 80030d2:	d520      	bpl.n	8003116 <RCC_GetClocksFreq+0x242>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80030d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <RCC_GetClocksFreq+0x280>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	3301      	adds	r3, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80030e6:	6003      	str	r3, [r0, #0]
      break;
 80030e8:	4619      	mov	r1, r3
 80030ea:	e702      	b.n	8002ef2 <RCC_GetClocksFreq+0x1e>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80030ec:	4919      	ldr	r1, [pc, #100]	; (8003154 <RCC_GetClocksFreq+0x280>)
 80030ee:	6001      	str	r1, [r0, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80030f0:	2300      	movs	r3, #0
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
 80030f2:	e6fe      	b.n	8002ef2 <RCC_GetClocksFreq+0x1e>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80030f4:	6341      	str	r1, [r0, #52]	; 0x34
 80030f6:	e768      	b.n	8002fca <RCC_GetClocksFreq+0xf6>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80030f8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80030fa:	e758      	b.n	8002fae <RCC_GetClocksFreq+0xda>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80030fc:	6281      	str	r1, [r0, #40]	; 0x28
 80030fe:	e74f      	b.n	8002fa0 <RCC_GetClocksFreq+0xcc>
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
 8003100:	42b7      	cmp	r7, r6
 8003102:	f47f af44 	bne.w	8002f8e <RCC_GetClocksFreq+0xba>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8003106:	004b      	lsls	r3, r1, #1
 8003108:	6203      	str	r3, [r0, #32]
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800310a:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800310c:	05a6      	lsls	r6, r4, #22
 800310e:	d480      	bmi.n	8003012 <RCC_GetClocksFreq+0x13e>
 8003110:	e73f      	b.n	8002f92 <RCC_GetClocksFreq+0xbe>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8003112:	6301      	str	r1, [r0, #48]	; 0x30
 8003114:	e752      	b.n	8002fbc <RCC_GetClocksFreq+0xe8>
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <RCC_GetClocksFreq+0x288>)
 8003118:	fb03 f301 	mul.w	r3, r3, r1
 800311c:	e7e3      	b.n	80030e6 <RCC_GetClocksFreq+0x212>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800311e:	6381      	str	r1, [r0, #56]	; 0x38
 8003120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <RCC_GetClocksFreq+0x280>)
 8003124:	6383      	str	r3, [r0, #56]	; 0x38
 8003126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8003128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312c:	6343      	str	r3, [r0, #52]	; 0x34
 800312e:	e74c      	b.n	8002fca <RCC_GetClocksFreq+0xf6>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8003130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003134:	6303      	str	r3, [r0, #48]	; 0x30
 8003136:	e741      	b.n	8002fbc <RCC_GetClocksFreq+0xe8>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8003138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800313e:	e736      	b.n	8002fae <RCC_GetClocksFreq+0xda>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8003140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003144:	6283      	str	r3, [r0, #40]	; 0x28
 8003146:	e72b      	b.n	8002fa0 <RCC_GetClocksFreq+0xcc>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8003148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314c:	6383      	str	r3, [r0, #56]	; 0x38
 800314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	007a1200 	.word	0x007a1200
 8003158:	200000f4 	.word	0x200000f4
 800315c:	003d0900 	.word	0x003d0900

08003160 <RCC_ADCCLKConfig>:
  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8003160:	4a06      	ldr	r2, [pc, #24]	; (800317c <RCC_ADCCLKConfig+0x1c>)
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8003162:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8003164:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003166:	bf14      	ite	ne
 8003168:	f423 5378 	bicne.w	r3, r3, #15872	; 0x3e00
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 800316c:	f423 73f8 	biceq.w	r3, r3, #496	; 0x1f0
 8003170:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 8003172:	4a02      	ldr	r2, [pc, #8]	; (800317c <RCC_ADCCLKConfig+0x1c>)
 8003174:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003176:	4318      	orrs	r0, r3
 8003178:	62d0      	str	r0, [r2, #44]	; 0x2c
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000

08003180 <RCC_I2CCLKConfig>:
  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <RCC_I2CCLKConfig+0x1c>)
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8003182:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 8003184:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003186:	bf14      	ite	ne
 8003188:	f023 0320 	bicne.w	r3, r3, #32
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 800318c:	f023 0310 	biceq.w	r3, r3, #16
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8003192:	4a02      	ldr	r2, [pc, #8]	; (800319c <RCC_I2CCLKConfig+0x1c>)
 8003194:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003196:	4318      	orrs	r0, r3
 8003198:	6310      	str	r0, [r2, #48]	; 0x30
 800319a:	4770      	bx	lr
 800319c:	40021000 	.word	0x40021000

080031a0 <RCC_TIMCLKConfig>:
  tmp = (RCC_TIMCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 80031a0:	4a06      	ldr	r2, [pc, #24]	; (80031bc <RCC_TIMCLKConfig+0x1c>)
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 80031a2:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 80031a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031a6:	bf14      	ite	ne
 80031a8:	f423 7300 	bicne.w	r3, r3, #512	; 0x200
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 80031ac:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 80031b2:	4a02      	ldr	r2, [pc, #8]	; (80031bc <RCC_TIMCLKConfig+0x1c>)
 80031b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031b6:	4318      	orrs	r0, r3
 80031b8:	6310      	str	r0, [r2, #48]	; 0x30
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000

080031c0 <RCC_USARTCLKConfig>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 80031c0:	0f03      	lsrs	r3, r0, #28

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 80031c2:	3b01      	subs	r3, #1
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d809      	bhi.n	80031dc <RCC_USARTCLKConfig+0x1c>
 80031c8:	e8df f003 	tbb	[pc, r3]
 80031cc:	1f031913 	.word	0x1f031913
 80031d0:	0d          	.byte	0x0d
 80031d1:	00          	.byte	0x00
      break;
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
      break;
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 80031d2:	4a11      	ldr	r2, [pc, #68]	; (8003218 <RCC_USARTCLKConfig+0x58>)
 80031d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031d6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80031da:	6313      	str	r3, [r2, #48]	; 0x30
    default:
      break;
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <RCC_USARTCLKConfig+0x58>)
 80031de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031e0:	4318      	orrs	r0, r3
 80031e2:	6310      	str	r0, [r2, #48]	; 0x30
 80031e4:	4770      	bx	lr
      break;
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
      break;
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <RCC_USARTCLKConfig+0x58>)
 80031e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031ee:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80031f0:	e7f4      	b.n	80031dc <RCC_USARTCLKConfig+0x1c>

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <RCC_USARTCLKConfig+0x58>)
 80031f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80031fc:	e7ee      	b.n	80031dc <RCC_USARTCLKConfig+0x1c>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 80031fe:	4a06      	ldr	r2, [pc, #24]	; (8003218 <RCC_USARTCLKConfig+0x58>)
 8003200:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003202:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003206:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8003208:	e7e8      	b.n	80031dc <RCC_USARTCLKConfig+0x1c>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
      break;
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 800320a:	4a03      	ldr	r2, [pc, #12]	; (8003218 <RCC_USARTCLKConfig+0x58>)
 800320c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800320e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003212:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8003214:	e7e2      	b.n	80031dc <RCC_USARTCLKConfig+0x1c>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000

0800321c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <RCC_USBCLKConfig+0x8>)
 800321e:	6018      	str	r0, [r3, #0]
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	424200d8 	.word	0x424200d8

08003228 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8003228:	4a02      	ldr	r2, [pc, #8]	; (8003234 <RCC_RTCCLKConfig+0xc>)
 800322a:	6a13      	ldr	r3, [r2, #32]
 800322c:	4318      	orrs	r0, r3
 800322e:	6210      	str	r0, [r2, #32]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000

08003238 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8003238:	4b01      	ldr	r3, [pc, #4]	; (8003240 <RCC_I2SCLKConfig+0x8>)
 800323a:	6018      	str	r0, [r3, #0]
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	424200dc 	.word	0x424200dc

08003244 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003244:	4b01      	ldr	r3, [pc, #4]	; (800324c <RCC_RTCCLKCmd+0x8>)
 8003246:	6018      	str	r0, [r3, #0]
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	4242043c 	.word	0x4242043c

08003250 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <RCC_BackupResetCmd+0x8>)
 8003252:	6018      	str	r0, [r3, #0]
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	42420440 	.word	0x42420440

0800325c <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <RCC_AHBPeriphClockCmd+0x14>)
 800325e:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003260:	b919      	cbnz	r1, 800326a <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8003262:	ea23 0000 	bic.w	r0, r3, r0
 8003266:	6150      	str	r0, [r2, #20]
 8003268:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800326a:	4318      	orrs	r0, r3
 800326c:	6150      	str	r0, [r2, #20]
 800326e:	4770      	bx	lr
 8003270:	40021000 	.word	0x40021000

08003274 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <RCC_APB2PeriphClockCmd+0x14>)
 8003276:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003278:	b919      	cbnz	r1, 8003282 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800327a:	ea23 0000 	bic.w	r0, r3, r0
 800327e:	6190      	str	r0, [r2, #24]
 8003280:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003282:	4318      	orrs	r0, r3
 8003284:	6190      	str	r0, [r2, #24]
 8003286:	4770      	bx	lr
 8003288:	40021000 	.word	0x40021000

0800328c <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <RCC_APB1PeriphClockCmd+0x14>)
 800328e:	69d3      	ldr	r3, [r2, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003290:	b919      	cbnz	r1, 800329a <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003292:	ea23 0000 	bic.w	r0, r3, r0
 8003296:	61d0      	str	r0, [r2, #28]
 8003298:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800329a:	4318      	orrs	r0, r3
 800329c:	61d0      	str	r0, [r2, #28]
 800329e:	4770      	bx	lr
 80032a0:	40021000 	.word	0x40021000

080032a4 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <RCC_AHBPeriphResetCmd+0x14>)
 80032a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032a8:	b919      	cbnz	r1, 80032b2 <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 80032aa:	ea23 0000 	bic.w	r0, r3, r0
 80032ae:	6290      	str	r0, [r2, #40]	; 0x28
 80032b0:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80032b2:	4318      	orrs	r0, r3
 80032b4:	6290      	str	r0, [r2, #40]	; 0x28
 80032b6:	4770      	bx	lr
 80032b8:	40021000 	.word	0x40021000

080032bc <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <RCC_APB2PeriphResetCmd+0x14>)
 80032be:	68d3      	ldr	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032c0:	b919      	cbnz	r1, 80032ca <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80032c2:	ea23 0000 	bic.w	r0, r3, r0
 80032c6:	60d0      	str	r0, [r2, #12]
 80032c8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80032ca:	4318      	orrs	r0, r3
 80032cc:	60d0      	str	r0, [r2, #12]
 80032ce:	4770      	bx	lr
 80032d0:	40021000 	.word	0x40021000

080032d4 <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <RCC_APB1PeriphResetCmd+0x14>)
 80032d6:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032d8:	b919      	cbnz	r1, 80032e2 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80032da:	ea23 0000 	bic.w	r0, r3, r0
 80032de:	6110      	str	r0, [r2, #16]
 80032e0:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80032e2:	4318      	orrs	r0, r3
 80032e4:	6110      	str	r0, [r2, #16]
 80032e6:	4770      	bx	lr
 80032e8:	40021000 	.word	0x40021000

080032ec <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <RCC_ITConfig+0x14>)
 80032ee:	7813      	ldrb	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80032f0:	b919      	cbnz	r1, 80032fa <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80032f2:	ea23 0000 	bic.w	r0, r3, r0
 80032f6:	7010      	strb	r0, [r2, #0]
 80032f8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80032fa:	4318      	orrs	r0, r3
 80032fc:	7010      	strb	r0, [r2, #0]
 80032fe:	4770      	bx	lr
 8003300:	40021009 	.word	0x40021009

08003304 <RCC_GetFlagStatus>:
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
 8003304:	0943      	lsrs	r3, r0, #5
 8003306:	d108      	bne.n	800331a <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->CR;
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <RCC_GetFlagStatus+0x44>)
 800330a:	681a      	ldr	r2, [r3, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800330c:	f000 031f 	and.w	r3, r0, #31
 8003310:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003314:	f000 0001 	and.w	r0, r0, #1
 8003318:	4770      	bx	lr

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 800331a:	2b01      	cmp	r3, #1
 800331c:	d00b      	beq.n	8003336 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 800331e:	2b04      	cmp	r3, #4
  {
    statusreg = RCC->CFGR;
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <RCC_GetFlagStatus+0x44>)
 8003322:	bf0c      	ite	eq
 8003324:	685a      	ldreq	r2, [r3, #4]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8003326:	6a5a      	ldrne	r2, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003328:	f000 031f 	and.w	r3, r0, #31
 800332c:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003330:	f000 0001 	and.w	r0, r0, #1
 8003334:	4770      	bx	lr
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <RCC_GetFlagStatus+0x44>)
 8003338:	6a1a      	ldr	r2, [r3, #32]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800333a:	f000 031f 	and.w	r3, r0, #31
 800333e:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003342:	f000 0001 	and.w	r0, r0, #1
 8003346:	4770      	bx	lr
 8003348:	40021000 	.word	0x40021000

0800334c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800334c:	b500      	push	{lr}
 800334e:	b083      	sub	sp, #12
  __IO uint32_t StartUpCounter = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	e000      	b.n	8003358 <RCC_WaitForHSEStartUp+0xc>
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8003356:	b948      	cbnz	r0, 800336c <RCC_WaitForHSEStartUp+0x20>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8003358:	2011      	movs	r0, #17
 800335a:	f7ff ffd3 	bl	8003304 <RCC_GetFlagStatus>
    StartUpCounter++;  
 800335e:	9b01      	ldr	r3, [sp, #4]
 8003360:	3301      	adds	r3, #1
 8003362:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800336a:	d1f4      	bne.n	8003356 <RCC_WaitForHSEStartUp+0xa>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800336c:	2011      	movs	r0, #17
 800336e:	f7ff ffc9 	bl	8003304 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8003372:	3000      	adds	r0, #0
 8003374:	bf18      	it	ne
 8003376:	2001      	movne	r0, #1
 8003378:	b003      	add	sp, #12
 800337a:	f85d fb04 	ldr.w	pc, [sp], #4
 800337e:	bf00      	nop

08003380 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8003380:	4a02      	ldr	r2, [pc, #8]	; (800338c <RCC_ClearFlag+0xc>)
 8003382:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003388:	6253      	str	r3, [r2, #36]	; 0x24
 800338a:	4770      	bx	lr
 800338c:	40021000 	.word	0x40021000

08003390 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <RCC_GetITStatus+0x10>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8003396:	bf14      	ite	ne
 8003398:	2001      	movne	r0, #1
 800339a:	2000      	moveq	r0, #0
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000

080033a4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80033a4:	4b01      	ldr	r3, [pc, #4]	; (80033ac <RCC_ClearITPendingBit+0x8>)
 80033a6:	7018      	strb	r0, [r3, #0]
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	4002100a 	.word	0x4002100a

080033b0 <SYSCFG_DeInit>:
  *         MEM_MODE bits took the value from the user option bytes.
  */
void SYSCFG_DeInit(void)
{
  /* Reset SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <SYSCFG_DeInit+0x24>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	f002 0203 	and.w	r2, r2, #3
 80033b8:	601a      	str	r2, [r3, #0]
  /* Set FPU Interrupt Enable bits to default value */
  SYSCFG->CFGR1 |= 0x7C000000;
 80033ba:	6819      	ldr	r1, [r3, #0]
  /* Reset RAM Write protection bits to default value */
  SYSCFG->RCR = 0x00000000;
 80033bc:	2200      	movs	r2, #0
void SYSCFG_DeInit(void)
{
  /* Reset SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
  /* Set FPU Interrupt Enable bits to default value */
  SYSCFG->CFGR1 |= 0x7C000000;
 80033be:	f041 41f8 	orr.w	r1, r1, #2080374784	; 0x7c000000
 80033c2:	6019      	str	r1, [r3, #0]
  /* Reset RAM Write protection bits to default value */
  SYSCFG->RCR = 0x00000000;
 80033c4:	605a      	str	r2, [r3, #4]
  /* Set EXTICRx registers to reset value */
  SYSCFG->EXTICR[0] = 0;
 80033c6:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[1] = 0;
 80033c8:	60da      	str	r2, [r3, #12]
  SYSCFG->EXTICR[2] = 0;
 80033ca:	611a      	str	r2, [r3, #16]
  SYSCFG->EXTICR[3] = 0;
 80033cc:	615a      	str	r2, [r3, #20]
  /* Set CFGR2 register to reset value */
  SYSCFG->CFGR2 = 0;
 80033ce:	619a      	str	r2, [r3, #24]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000

080033d8 <SYSCFG_MemoryRemapConfig>:

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpcfgr1 = SYSCFG->CFGR1;
 80033d8:	4a03      	ldr	r2, [pc, #12]	; (80033e8 <SYSCFG_MemoryRemapConfig+0x10>)
 80033da:	6813      	ldr	r3, [r2, #0]

  /* Clear MEM_MODE bits */
  tmpcfgr1 &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 80033dc:	f023 0303 	bic.w	r3, r3, #3

  /* Set the new MEM_MODE bits value */
  tmpcfgr1 |= (uint32_t) SYSCFG_MemoryRemap;
 80033e0:	4318      	orrs	r0, r3

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpcfgr1;
 80033e2:	6010      	str	r0, [r2, #0]
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000

080033ec <SYSCFG_DMAChannelRemapConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Remap the DMA channel */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <SYSCFG_DMAChannelRemapConfig+0x14>)
 80033ee:	6813      	ldr	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_DMA_REMAP(SYSCFG_DMARemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80033f0:	b919      	cbnz	r1, 80033fa <SYSCFG_DMAChannelRemapConfig+0xe>
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
  }
  else
  {
    /* use the default DMA channel mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
 80033f2:	ea23 0000 	bic.w	r0, r3, r0
 80033f6:	6010      	str	r0, [r2, #0]
 80033f8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Remap the DMA channel */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 80033fa:	4318      	orrs	r0, r3
 80033fc:	6010      	str	r0, [r2, #0]
 80033fe:	4770      	bx	lr
 8003400:	40010000 	.word	0x40010000

08003404 <SYSCFG_TriggerRemapConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Remap the trigger */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_TriggerRemap;
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <SYSCFG_TriggerRemapConfig+0x14>)
 8003406:	6813      	ldr	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_TRIGGER_REMAP(SYSCFG_TriggerRemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003408:	b919      	cbnz	r1, 8003412 <SYSCFG_TriggerRemapConfig+0xe>
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_TriggerRemap;
  }
  else
  {
    /* Use the default trigger mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_TriggerRemap);
 800340a:	ea23 0000 	bic.w	r0, r3, r0
 800340e:	6010      	str	r0, [r2, #0]
 8003410:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Remap the trigger */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_TriggerRemap;
 8003412:	4318      	orrs	r0, r3
 8003414:	6010      	str	r0, [r2, #0]
 8003416:	4770      	bx	lr
 8003418:	40010000 	.word	0x40010000

0800341c <SYSCFG_EncoderRemapConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ENCODER_REMAP(SYSCFG_EncoderRemap));

  /* Reset the encoder mode remapping bits */
  SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_CFGR1_ENCODER_MODE);
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <SYSCFG_EncoderRemapConfig+0x14>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003424:	601a      	str	r2, [r3, #0]

  /* Set the selected configuration */
  SYSCFG->CFGR1 |= (uint32_t)(SYSCFG_EncoderRemap);
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4310      	orrs	r0, r2
 800342a:	6018      	str	r0, [r3, #0]
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000

08003434 <SYSCFG_USBInterruptLineRemapCmd>:
{
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Remap the USB interupt lines */
  *(__IO uint32_t *) CFGR1_USBITRMP_BB = (uint32_t)NewState;
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <SYSCFG_USBInterruptLineRemapCmd+0x8>)
 8003436:	6018      	str	r0, [r3, #0]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	42200014 	.word	0x42200014

08003440 <SYSCFG_I2CFastModePlusConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <SYSCFG_I2CFastModePlusConfig+0x14>)
 8003442:	6813      	ldr	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_I2C_FMP(SYSCFG_I2CFastModePlus));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003444:	b919      	cbnz	r1, 800344e <SYSCFG_I2CFastModePlusConfig+0xe>
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
  }
  else
  {
    /* Disable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
 8003446:	ea23 0000 	bic.w	r0, r3, r0
 800344a:	6010      	str	r0, [r2, #0]
 800344c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 800344e:	4318      	orrs	r0, r3
 8003450:	6010      	str	r0, [r2, #0]
 8003452:	4770      	bx	lr
 8003454:	40010000 	.word	0x40010000

08003458 <SYSCFG_ITConfig>:
  assert_param(IS_SYSCFG_IT(SYSCFG_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 |= SYSCFG_IT;
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <SYSCFG_ITConfig+0x14>)
 800345a:	6813      	ldr	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SYSCFG_IT(SYSCFG_IT)); 

  if (NewState != DISABLE)
 800345c:	b919      	cbnz	r1, 8003466 <SYSCFG_ITConfig+0xe>
    SYSCFG->CFGR1 |= SYSCFG_IT;
  }
  else
  {
    /* Disable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 &= ((uint32_t)~SYSCFG_IT);
 800345e:	ea23 0000 	bic.w	r0, r3, r0
 8003462:	6010      	str	r0, [r2, #0]
 8003464:	4770      	bx	lr
  assert_param(IS_SYSCFG_IT(SYSCFG_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 |= SYSCFG_IT;
 8003466:	4318      	orrs	r0, r3
 8003468:	6010      	str	r0, [r2, #0]
 800346a:	4770      	bx	lr
 800346c:	40010000 	.word	0x40010000

08003470 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8003470:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8003474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003478:	f503 3380 	add.w	r3, r3, #65536	; 0x10000

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800347c:	f001 0103 	and.w	r1, r1, #3
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8003480:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003482:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8003484:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003486:	220f      	movs	r2, #15
 8003488:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800348a:	ea24 0202 	bic.w	r2, r4, r2
 800348e:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8003490:	689a      	ldr	r2, [r3, #8]
}
 8003492:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8003496:	4088      	lsls	r0, r1
 8003498:	4302      	orrs	r2, r0
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop

080034a0 <SYSCFG_BreakConfig>:
void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <SYSCFG_BreakConfig+0xc>)
 80034a2:	6993      	ldr	r3, [r2, #24]
 80034a4:	4318      	orrs	r0, r3
 80034a6:	6190      	str	r0, [r2, #24]
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40010000 	.word	0x40010000

080034b0 <SYSCFG_BypassParityCheckDisable>:
  * @retval None
  */
void SYSCFG_BypassParityCheckDisable(void)
{
  /* Disable the adddress parity check on RAM */
  *(__IO uint32_t *) CFGR1_BYPADDRPAR_BB = (uint32_t)0x00000001;
 80034b0:	4b01      	ldr	r3, [pc, #4]	; (80034b8 <SYSCFG_BypassParityCheckDisable+0x8>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	4770      	bx	lr
 80034b8:	42200310 	.word	0x42200310

080034bc <SYSCFG_SRAMWRPEnable>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_PAGE(SYSCFG_SRAMWRP));

  /* Enable the write-protection on the selected ICODE SRAM page */
  SYSCFG->RCR |= (uint32_t)SYSCFG_SRAMWRP;
 80034bc:	4a02      	ldr	r2, [pc, #8]	; (80034c8 <SYSCFG_SRAMWRPEnable+0xc>)
 80034be:	6853      	ldr	r3, [r2, #4]
 80034c0:	4318      	orrs	r0, r3
 80034c2:	6050      	str	r0, [r2, #4]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40010000 	.word	0x40010000

080034cc <SYSCFG_GetFlagStatus>:

  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  /* Check the status of the specified SPI flag */
  if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
 80034cc:	4b02      	ldr	r3, [pc, #8]	; (80034d8 <SYSCFG_GetFlagStatus+0xc>)
 80034ce:	6998      	ldr	r0, [r3, #24]
    /* SYSCFG_Flag is reset */
    bitstatus = RESET;
  }
  /* Return the SYSCFG_Flag status */
  return  bitstatus;
}
 80034d0:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000

080034dc <SYSCFG_ClearFlag>:
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
 80034dc:	4a02      	ldr	r2, [pc, #8]	; (80034e8 <SYSCFG_ClearFlag+0xc>)
 80034de:	6993      	ldr	r3, [r2, #24]
 80034e0:	4318      	orrs	r0, r3
 80034e2:	6190      	str	r0, [r2, #24]
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40010000 	.word	0x40010000

080034ec <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80034ec:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80034ee:	4b46      	ldr	r3, [pc, #280]	; (8003608 <TIM_DeInit+0x11c>)
 80034f0:	4298      	cmp	r0, r3
 80034f2:	d027      	beq.n	8003544 <TIM_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80034f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034f8:	d030      	beq.n	800355c <TIM_DeInit+0x70>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80034fa:	4b44      	ldr	r3, [pc, #272]	; (800360c <TIM_DeInit+0x120>)
 80034fc:	4298      	cmp	r0, r3
 80034fe:	d037      	beq.n	8003570 <TIM_DeInit+0x84>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8003500:	4b43      	ldr	r3, [pc, #268]	; (8003610 <TIM_DeInit+0x124>)
 8003502:	4298      	cmp	r0, r3
 8003504:	d03e      	beq.n	8003584 <TIM_DeInit+0x98>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }   
  else if (TIMx == TIM6)  
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <TIM_DeInit+0x128>)
 8003508:	4298      	cmp	r0, r3
 800350a:	d045      	beq.n	8003598 <TIM_DeInit+0xac>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 800350c:	4b42      	ldr	r3, [pc, #264]	; (8003618 <TIM_DeInit+0x12c>)
 800350e:	4298      	cmp	r0, r3
 8003510:	d04c      	beq.n	80035ac <TIM_DeInit+0xc0>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <TIM_DeInit+0x130>)
 8003514:	4298      	cmp	r0, r3
 8003516:	d053      	beq.n	80035c0 <TIM_DeInit+0xd4>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }    
  else if (TIMx == TIM15)
 8003518:	4b41      	ldr	r3, [pc, #260]	; (8003620 <TIM_DeInit+0x134>)
 800351a:	4298      	cmp	r0, r3
 800351c:	d05c      	beq.n	80035d8 <TIM_DeInit+0xec>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
  }  
  else if (TIMx == TIM16) 
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <TIM_DeInit+0x138>)
 8003520:	4298      	cmp	r0, r3
 8003522:	d065      	beq.n	80035f0 <TIM_DeInit+0x104>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM17) 
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <TIM_DeInit+0x13c>)
 8003526:	4298      	cmp	r0, r3
 8003528:	d000      	beq.n	800352c <TIM_DeInit+0x40>
 800352a:	bd08      	pop	{r3, pc}
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 800352c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003530:	2101      	movs	r1, #1
 8003532:	f7ff fec3 	bl	80032bc <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8003536:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800353a:	2100      	movs	r1, #0
    }   
  }
}
 800353c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM17) 
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8003540:	f7ff bebc 	b.w	80032bc <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8003544:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003548:	2101      	movs	r1, #1
 800354a:	f7ff feb7 	bl	80032bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800354e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003552:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 8003554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8003558:	f7ff beb0 	b.w	80032bc <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800355c:	2001      	movs	r0, #1
 800355e:	4601      	mov	r1, r0
 8003560:	f7ff feb8 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8003564:	2001      	movs	r0, #1
 8003566:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 8003568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800356c:	f7ff beb2 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003570:	2002      	movs	r0, #2
 8003572:	2101      	movs	r1, #1
 8003574:	f7ff feae 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8003578:	2002      	movs	r0, #2
 800357a:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 800357c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8003580:	f7ff bea8 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003584:	2004      	movs	r0, #4
 8003586:	2101      	movs	r1, #1
 8003588:	f7ff fea4 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800358c:	2004      	movs	r0, #4
 800358e:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 8003590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8003594:	f7ff be9e 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  }   
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8003598:	2010      	movs	r0, #16
 800359a:	2101      	movs	r1, #1
 800359c:	f7ff fe9a 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80035a0:	2010      	movs	r0, #16
 80035a2:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 80035a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }   
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80035a8:	f7ff be94 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80035ac:	2020      	movs	r0, #32
 80035ae:	2101      	movs	r1, #1
 80035b0:	f7ff fe90 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80035b4:	2020      	movs	r0, #32
 80035b6:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 80035b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80035bc:	f7ff be8a 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80035c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035c4:	2101      	movs	r1, #1
 80035c6:	f7ff fe79 	bl	80032bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80035ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035ce:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 80035d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80035d4:	f7ff be72 	b.w	80032bc <RCC_APB2PeriphResetCmd>
  }    
  else if (TIMx == TIM15)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80035d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80035dc:	2101      	movs	r1, #1
 80035de:	f7ff fe6d 	bl	80032bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 80035e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80035e6:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 80035e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }    
  else if (TIMx == TIM15)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 80035ec:	f7ff be66 	b.w	80032bc <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM16) 
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80035f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035f4:	2101      	movs	r1, #1
 80035f6:	f7ff fe61 	bl	80032bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 80035fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035fe:	2100      	movs	r1, #0
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
    }   
  }
}
 8003600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
  }  
  else if (TIMx == TIM16) 
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8003604:	f7ff be5a 	b.w	80032bc <RCC_APB2PeriphResetCmd>
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40001000 	.word	0x40001000
 8003618:	40001400 	.word	0x40001400
 800361c:	40013400 	.word	0x40013400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800

0800362c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <TIM_TimeBaseInit+0xa4>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800362e:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8003630:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003632:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8003634:	d03c      	beq.n	80036b0 <TIM_TimeBaseInit+0x84>
 8003636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363a:	4290      	cmp	r0, r2
 800363c:	d038      	beq.n	80036b0 <TIM_TimeBaseInit+0x84>
 800363e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003642:	d035      	beq.n	80036b0 <TIM_TimeBaseInit+0x84>
 8003644:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003648:	4290      	cmp	r0, r2
 800364a:	d031      	beq.n	80036b0 <TIM_TimeBaseInit+0x84>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 800364c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003650:	4290      	cmp	r0, r2
 8003652:	d02d      	beq.n	80036b0 <TIM_TimeBaseInit+0x84>
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8003654:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <TIM_TimeBaseInit+0xa8>)
 8003656:	4290      	cmp	r0, r2
 8003658:	d031      	beq.n	80036be <TIM_TimeBaseInit+0x92>
 800365a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800365e:	4290      	cmp	r0, r2
 8003660:	d02d      	beq.n	80036be <TIM_TimeBaseInit+0x92>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003662:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003664:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 800366a:	4c19      	ldr	r4, [pc, #100]	; (80036d0 <TIM_TimeBaseInit+0xa4>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800366c:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800366e:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8003670:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003672:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8003674:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8003676:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003678:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800367a:	8505      	strh	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 800367c:	d012      	beq.n	80036a4 <TIM_TimeBaseInit+0x78>
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <TIM_TimeBaseInit+0xac>)
 8003680:	4298      	cmp	r0, r3
 8003682:	d00f      	beq.n	80036a4 <TIM_TimeBaseInit+0x78>
 8003684:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003688:	4298      	cmp	r0, r3
 800368a:	d00b      	beq.n	80036a4 <TIM_TimeBaseInit+0x78>
 800368c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003690:	4298      	cmp	r0, r3
 8003692:	d007      	beq.n	80036a4 <TIM_TimeBaseInit+0x78>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8003694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003698:	4298      	cmp	r0, r3
 800369a:	d003      	beq.n	80036a4 <TIM_TimeBaseInit+0x78>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800369c:	2301      	movs	r3, #1
 800369e:	6143      	str	r3, [r0, #20]
}
 80036a0:	bc70      	pop	{r4, r5, r6}
 80036a2:	4770      	bx	lr
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
      (TIMx == TIM16) || (TIMx == TIM17))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80036a4:	7a8b      	ldrb	r3, [r1, #10]
 80036a6:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80036a8:	2301      	movs	r3, #1
 80036aa:	6143      	str	r3, [r0, #20]
}
 80036ac:	bc70      	pop	{r4, r5, r6}
 80036ae:	4770      	bx	lr
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
     (TIMx == TIM3)|| (TIMx == TIM4)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80036b0:	884a      	ldrh	r2, [r1, #2]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
     (TIMx == TIM3)|| (TIMx == TIM4)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80036b6:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80036b8:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <TIM_TimeBaseInit+0xa8>)
 80036ba:	4290      	cmp	r0, r2
 80036bc:	d1cd      	bne.n	800365a <TIM_TimeBaseInit+0x2e>
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80036be:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80036c0:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80036c2:	684a      	ldr	r2, [r1, #4]
 80036c4:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80036c6:	8503      	strh	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80036c8:	2301      	movs	r3, #1
 80036ca:	6143      	str	r3, [r0, #20]
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40001000 	.word	0x40001000
 80036d8:	40013400 	.word	0x40013400

080036dc <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80036dc:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80036de:	f04f 32ff 	mov.w	r2, #4294967295
 80036e2:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80036e4:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80036e6:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80036e8:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80036ea:	7283      	strb	r3, [r0, #10]
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80036f0:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80036f2:	6142      	str	r2, [r0, #20]
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80036f8:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8003702:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8003704:	8001      	strh	r1, [r0, #0]
 8003706:	4770      	bx	lr

08003708 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003708:	6241      	str	r1, [r0, #36]	; 0x24
 800370a:	4770      	bx	lr

0800370c <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800370c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800370e:	4770      	bx	lr

08003710 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8003710:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8003712:	4770      	bx	lr

08003714 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8003714:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8003716:	b280      	uxth	r0, r0
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800371c:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800371e:	b929      	cbnz	r1, 800372c <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8003720:	f023 0302 	bic.w	r3, r3, #2
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	8003      	strh	r3, [r0, #0]
 800372a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800372c:	b29b      	uxth	r3, r3
 800372e:	f043 0302 	orr.w	r3, r3, #2
 8003732:	8003      	strh	r3, [r0, #0]
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003738:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800373a:	b929      	cbnz	r1, 8003748 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	8003      	strh	r3, [r0, #0]
 8003746:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003748:	b29b      	uxth	r3, r3
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	8003      	strh	r3, [r0, #0]
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <TIM_UIFRemap>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 8003754:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003756:	b929      	cbnz	r1, 8003764 <TIM_UIFRemap+0x10>
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 8003758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	8003      	strh	r3, [r0, #0]
 8003762:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 8003764:	b29b      	uxth	r3, r3
 8003766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800376a:	8003      	strh	r3, [r0, #0]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop

08003770 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003770:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003772:	b929      	cbnz	r1, 8003780 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8003774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	8003      	strh	r3, [r0, #0]
 800377e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003780:	b29b      	uxth	r3, r3
 8003782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003786:	8003      	strh	r3, [r0, #0]
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop

0800378c <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800378c:	8803      	ldrh	r3, [r0, #0]
 800378e:	f023 0308 	bic.w	r3, r3, #8
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8003798:	8803      	ldrh	r3, [r0, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	4319      	orrs	r1, r3
 800379e:	8001      	strh	r1, [r0, #0]
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop

080037a4 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80037a4:	8803      	ldrh	r3, [r0, #0]
 80037a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80037b0:	8803      	ldrh	r3, [r0, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4319      	orrs	r1, r3
 80037b6:	8001      	strh	r1, [r0, #0]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80037bc:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037be:	b929      	cbnz	r1, 80037cc <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	8003      	strh	r3, [r0, #0]
 80037ca:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	8003      	strh	r3, [r0, #0]
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop

080037d8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80037da:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80037dc:	898b      	ldrh	r3, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80037de:	888e      	ldrh	r6, [r1, #4]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80037e0:	f8d1 c000 	ldr.w	ip, [r1]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 80037e4:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003864 <TIM_OC1Init+0x8c>
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80037e8:	f024 0401 	bic.w	r4, r4, #1
 80037ec:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 80037f4:	f025 0502 	bic.w	r5, r5, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 80037f8:	f424 3280 	bic.w	r2, r4, #65536	; 0x10000
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80037fc:	432b      	orrs	r3, r5
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 80037fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8003802:	4570      	cmp	r0, lr
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003804:	ea43 0306 	orr.w	r3, r3, r6
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003808:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 800380c:	d014      	beq.n	8003838 <TIM_OC1Init+0x60>
 800380e:	4c14      	ldr	r4, [pc, #80]	; (8003860 <TIM_OC1Init+0x88>)
 8003810:	42a0      	cmp	r0, r4
 8003812:	d011      	beq.n	8003838 <TIM_OC1Init+0x60>
 8003814:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003818:	42a0      	cmp	r0, r4
 800381a:	d00d      	beq.n	8003838 <TIM_OC1Init+0x60>
 800381c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003820:	42a0      	cmp	r0, r4
 8003822:	d009      	beq.n	8003838 <TIM_OC1Init+0x60>
 8003824:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003828:	42a0      	cmp	r0, r4
 800382a:	d005      	beq.n	8003838 <TIM_OC1Init+0x60>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800382c:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382e:	6047      	str	r7, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003830:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8003832:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003834:	6203      	str	r3, [r0, #32]
 8003836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003838:	89cc      	ldrh	r4, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800383a:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800383e:	f8b1 e006 	ldrh.w	lr, [r1, #6]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8003842:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8003844:	f023 0308 	bic.w	r3, r3, #8
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 8003848:	f427 7540 	bic.w	r5, r7, #768	; 0x300
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800384c:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 800384e:	f023 0304 	bic.w	r3, r3, #4
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8003852:	ea4c 0405 	orr.w	r4, ip, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003856:	ea43 030e 	orr.w	r3, r3, lr
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800385a:	ea44 0706 	orr.w	r7, r4, r6
 800385e:	e7e5      	b.n	800382c <TIM_OC1Init+0x54>
 8003860:	40013400 	.word	0x40013400
 8003864:	40012c00 	.word	0x40012c00

08003868 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 800386a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 800386c:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 800386e:	888b      	ldrh	r3, [r1, #4]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003870:	680f      	ldr	r7, [r1, #0]
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003872:	4e18      	ldr	r6, [pc, #96]	; (80038d4 <TIM_OC2Init+0x6c>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8003874:	f024 0410 	bic.w	r4, r4, #16
 8003878:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800387a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	f8d0 e004 	ldr.w	lr, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003880:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 8003882:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8003886:	f024 0420 	bic.w	r4, r4, #32
 800388a:	432b      	orrs	r3, r5
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 800388c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003890:	42b0      	cmp	r0, r6
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 8003892:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003896:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800389a:	d009      	beq.n	80038b0 <TIM_OC2Init+0x48>
 800389c:	4c0e      	ldr	r4, [pc, #56]	; (80038d8 <TIM_OC2Init+0x70>)
 800389e:	42a0      	cmp	r0, r4
 80038a0:	d006      	beq.n	80038b0 <TIM_OC2Init+0x48>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80038a2:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a4:	f8c0 e004 	str.w	lr, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a8:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80038aa:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	6203      	str	r3, [r0, #32]
 80038ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80038b0:	89cf      	ldrh	r7, [r1, #14]
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 80038b2:	8a0e      	ldrh	r6, [r1, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80038b4:	8a4c      	ldrh	r4, [r1, #18]
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 80038b6:	88cd      	ldrh	r5, [r1, #6]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 80038b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80038bc:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 80038c0:	f42e 6e40 	bic.w	lr, lr, #3072	; 0xc00
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80038c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c8:	4334      	orrs	r4, r6
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 80038ca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80038ce:	ea4e 0e84 	orr.w	lr, lr, r4, lsl #2
 80038d2:	e7e6      	b.n	80038a2 <TIM_OC2Init+0x3a>
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40013400 	.word	0x40013400

080038dc <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80038de:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 80038e0:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 80038e2:	888b      	ldrh	r3, [r1, #4]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80038e4:	680f      	ldr	r7, [r1, #0]
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80038e6:	4e17      	ldr	r6, [pc, #92]	; (8003944 <TIM_OC3Init+0x68>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80038e8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80038ec:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f4:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 80038f6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 80038fa:	432b      	orrs	r3, r5
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 80038fc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003900:	42b0      	cmp	r0, r6
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 8003902:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003906:	ea42 0207 	orr.w	r2, r2, r7
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800390a:	d009      	beq.n	8003920 <TIM_OC3Init+0x44>
 800390c:	4c0e      	ldr	r4, [pc, #56]	; (8003948 <TIM_OC3Init+0x6c>)
 800390e:	42a0      	cmp	r0, r4
 8003910:	d006      	beq.n	8003920 <TIM_OC3Init+0x44>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003912:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003914:	f8c0 e004 	str.w	lr, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003918:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800391a:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	6203      	str	r3, [r0, #32]
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8003920:	89cf      	ldrh	r7, [r1, #14]
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003922:	8a0e      	ldrh	r6, [r1, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8003924:	8a4c      	ldrh	r4, [r1, #18]
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 8003926:	88cd      	ldrh	r5, [r1, #6]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8003928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800392c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 8003930:	f42e 5e40 	bic.w	lr, lr, #12288	; 0x3000
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 8003934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003938:	4334      	orrs	r4, r6
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 800393a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800393e:	ea4e 1e04 	orr.w	lr, lr, r4, lsl #4
 8003942:	e7e6      	b.n	8003912 <TIM_OC3Init+0x36>
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40013400 	.word	0x40013400

0800394c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 800394e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 8003950:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 8003954:	888b      	ldrh	r3, [r1, #4]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003956:	680f      	ldr	r7, [r1, #0]
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003958:	4e10      	ldr	r6, [pc, #64]	; (800399c <TIM_OC4Init+0x50>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 800395a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800395e:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003960:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003962:	6845      	ldr	r5, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003964:	69c4      	ldr	r4, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8003966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396a:	ea4e 0303 	orr.w	r3, lr, r3
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 800396e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003972:	42b0      	cmp	r0, r6
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 8003974:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003978:	ea44 2207 	orr.w	r2, r4, r7, lsl #8
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800397c:	d008      	beq.n	8003990 <TIM_OC4Init+0x44>
 800397e:	4c08      	ldr	r4, [pc, #32]	; (80039a0 <TIM_OC4Init+0x54>)
 8003980:	42a0      	cmp	r0, r4
 8003982:	d005      	beq.n	8003990 <TIM_OC4Init+0x44>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8003984:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003986:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003988:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800398a:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	6203      	str	r3, [r0, #32]
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 8003990:	8a0c      	ldrh	r4, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8003992:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 8003996:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
 800399a:	e7f3      	b.n	8003984 <TIM_OC4Init+0x38>
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40013400 	.word	0x40013400

080039a4 <TIM_OC5Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 80039a4:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 80039a6:	888b      	ldrh	r3, [r1, #4]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 80039a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 80039ae:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 80039b2:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 80039b4:	6202      	str	r2, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	6a02      	ldr	r2, [r0, #32]
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80039b8:	4e0e      	ldr	r6, [pc, #56]	; (80039f4 <TIM_OC5Init+0x50>)
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ba:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 80039bc:	6d45      	ldr	r5, [r0, #84]	; 0x54
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 80039be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80039c2:	ea4e 0303 	orr.w	r3, lr, r3
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 80039c6:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80039ca:	42b0      	cmp	r0, r6
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 80039cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 80039d0:	ea45 0204 	orr.w	r2, r5, r4
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80039d4:	d008      	beq.n	80039e8 <TIM_OC5Init+0x44>
 80039d6:	4c08      	ldr	r4, [pc, #32]	; (80039f8 <TIM_OC5Init+0x54>)
 80039d8:	42a0      	cmp	r0, r4
 80039da:	d005      	beq.n	80039e8 <TIM_OC5Init+0x44>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 80039dc:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039de:	6047      	str	r7, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 80039e0:	6542      	str	r2, [r0, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 80039e2:	6581      	str	r1, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	6203      	str	r3, [r0, #32]
 80039e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 80039e8:	8a0c      	ldrh	r4, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 80039ea:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 80039ee:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 80039f2:	e7f3      	b.n	80039dc <TIM_OC5Init+0x38>
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40013400 	.word	0x40013400

080039fc <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80039fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 80039fe:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 8003a00:	f8b1 e00c 	ldrh.w	lr, [r1, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 8003a04:	888b      	ldrh	r3, [r1, #4]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003a06:	680f      	ldr	r7, [r1, #0]
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003a08:	4e0f      	ldr	r6, [pc, #60]	; (8003a48 <TIM_OC6Init+0x4c>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 8003a0a:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
 8003a0e:	6204      	str	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a10:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a12:	6845      	ldr	r5, [r0, #4]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a14:	6d44      	ldr	r4, [r0, #84]	; 0x54
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a16:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003a1a:	ea4e 0303 	orr.w	r3, lr, r3
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 8003a1e:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003a22:	42b0      	cmp	r0, r6
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 8003a24:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003a28:	ea44 2207 	orr.w	r2, r4, r7, lsl #8
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003a2c:	d008      	beq.n	8003a40 <TIM_OC6Init+0x44>
 8003a2e:	4c07      	ldr	r4, [pc, #28]	; (8003a4c <TIM_OC6Init+0x50>)
 8003a30:	42a0      	cmp	r0, r4
 8003a32:	d005      	beq.n	8003a40 <TIM_OC6Init+0x44>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 8003a34:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8003a38:	6542      	str	r2, [r0, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 8003a3a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	6203      	str	r3, [r0, #32]
 8003a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 8003a40:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
 8003a44:	e7f6      	b.n	8003a34 <TIM_OC6Init+0x38>
 8003a46:	bf00      	nop
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40013400 	.word	0x40013400

08003a50 <TIM_SelectGC5C1>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 8003a50:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a52:	b919      	cbnz	r1, 8003a5c <TIM_SelectGC5C1+0xc>
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
  }
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 8003a54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a58:	6583      	str	r3, [r0, #88]	; 0x58
 8003a5a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 8003a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a60:	6583      	str	r3, [r0, #88]	; 0x58
 8003a62:	4770      	bx	lr

08003a64 <TIM_SelectGC5C2>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 8003a64:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a66:	b919      	cbnz	r1, 8003a70 <TIM_SelectGC5C2+0xc>
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
  }
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 8003a68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a6c:	6583      	str	r3, [r0, #88]	; 0x58
 8003a6e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 8003a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a74:	6583      	str	r3, [r0, #88]	; 0x58
 8003a76:	4770      	bx	lr

08003a78 <TIM_SelectGC5C3>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 8003a78:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a7a:	b919      	cbnz	r1, 8003a84 <TIM_SelectGC5C3+0xc>
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
  }
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 8003a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a80:	6583      	str	r3, [r0, #88]	; 0x58
 8003a82:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 8003a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a88:	6583      	str	r3, [r0, #88]	; 0x58
 8003a8a:	4770      	bx	lr

08003a8c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	6003      	str	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8003a90:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8003a92:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8003a94:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8003a96:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8003a98:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8003a9a:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8003a9c:	8243      	strh	r3, [r0, #18]
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_SelectOCxM>:
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	408b      	lsls	r3, r1
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode) /* to be updated*/
{
 8003aa4:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	6a04      	ldr	r4, [r0, #32]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	4023      	ands	r3, r4

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8003aae:	f021 0408 	bic.w	r4, r1, #8
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003ab2:	6203      	str	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8003ab4:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8003ab6:	b17c      	cbz	r4, 8003ad8 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 8003ab8:	3904      	subs	r1, #4
 8003aba:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003abc:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8003abe:	580b      	ldr	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  }
}
 8003ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8003ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003acc:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003ace:	580b      	ldr	r3, [r1, r0]
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	500a      	str	r2, [r1, r0]
  }
}
 8003ad6:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8003ad8:	0849      	lsrs	r1, r1, #1
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  }
}
 8003ada:	f85d 4b04 	ldr.w	r4, [sp], #4
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8003ade:	5843      	ldr	r3, [r0, r1]
 8003ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	5043      	str	r3, [r0, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8003aea:	5843      	ldr	r3, [r0, r1]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	5042      	str	r2, [r0, r1]
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  }
}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8003af4:	6341      	str	r1, [r0, #52]	; 0x34
 8003af6:	4770      	bx	lr

08003af8 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8003af8:	6381      	str	r1, [r0, #56]	; 0x38
 8003afa:	4770      	bx	lr

08003afc <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8003afc:	63c1      	str	r1, [r0, #60]	; 0x3c
 8003afe:	4770      	bx	lr

08003b00 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8003b00:	6401      	str	r1, [r0, #64]	; 0x40
 8003b02:	4770      	bx	lr

08003b04 <TIM_SetCompare5>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 8003b04:	6581      	str	r1, [r0, #88]	; 0x58
 8003b06:	4770      	bx	lr

08003b08 <TIM_SetCompare6>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 8003b08:	65c1      	str	r1, [r0, #92]	; 0x5c
 8003b0a:	4770      	bx	lr

08003b0c <TIM_ForcedOC1Config>:
  uint32_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003b0c:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8003b16:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003b18:	6181      	str	r1, [r0, #24]
 8003b1a:	4770      	bx	lr

08003b1c <TIM_ForcedOC2Config>:
  uint32_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003b1c:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 8003b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint32_t)(TIM_ForcedAction << 8);
 8003b26:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003b2a:	6181      	str	r1, [r0, #24]
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8003b30:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 8003b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8003b36:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003b38:	61c1      	str	r1, [r0, #28]
 8003b3a:	4770      	bx	lr

08003b3c <TIM_ForcedOC4Config>:
  uint32_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8003b3c:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint32_t)(TIM_ForcedAction << 8);
 8003b42:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003b46:	61c1      	str	r1, [r0, #28]
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <TIM_ForcedOC5Config>:
  uint32_t tmpccmr3 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8003b4c:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 8003b52:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003b54:	6541      	str	r1, [r0, #84]	; 0x54
 8003b56:	4770      	bx	lr

08003b58 <TIM_ForcedOC6Config>:
  uint32_t tmpccmr3 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8003b58:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction << 8);
 8003b5e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003b62:	6541      	str	r1, [r0, #84]	; 0x54
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop

08003b68 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003b68:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8003b6a:	f023 0308 	bic.w	r3, r3, #8

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8003b6e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003b70:	6181      	str	r1, [r0, #24]
 8003b72:	4770      	bx	lr

08003b74 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003b74:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8003b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint32_t)(TIM_OCPreload << 8);
 8003b7a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003b7e:	6181      	str	r1, [r0, #24]
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop

08003b84 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003b84:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8003b86:	f023 0308 	bic.w	r3, r3, #8

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8003b8a:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003b8c:	61c1      	str	r1, [r0, #28]
 8003b8e:	4770      	bx	lr

08003b90 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003b90:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8003b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint32_t)(TIM_OCPreload << 8);
 8003b96:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003b9a:	61c1      	str	r1, [r0, #28]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop

08003ba0 <TIM_OC5PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8003ba0:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 8003ba2:	f023 0308 	bic.w	r3, r3, #8

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 8003ba6:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003ba8:	6541      	str	r1, [r0, #84]	; 0x54
 8003baa:	4770      	bx	lr

08003bac <TIM_OC6PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8003bac:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 8003bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload << 8);
 8003bb2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003bb6:	6541      	str	r1, [r0, #84]	; 0x54
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop

08003bbc <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003bbc:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 8003bbe:	f023 0304 	bic.w	r3, r3, #4

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8003bc2:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003bc4:	6181      	str	r1, [r0, #24]
 8003bc6:	4770      	bx	lr

08003bc8 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003bc8:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 8003bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint32_t)(TIM_OCFast << 8);
 8003bce:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	6181      	str	r1, [r0, #24]
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003bd8:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 8003bda:	f023 0304 	bic.w	r3, r3, #4

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8003bde:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003be0:	61c1      	str	r1, [r0, #28]
 8003be2:	4770      	bx	lr

08003be4 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003be4:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint32_t)(TIM_OCFast << 8);
 8003bea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003bee:	61c1      	str	r1, [r0, #28]
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop

08003bf4 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003bf4:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8003bfa:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003bfc:	6181      	str	r1, [r0, #24]
 8003bfe:	4770      	bx	lr

08003c00 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003c00:	6983      	ldr	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 8003c02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint32_t)(TIM_OCClear << 8);
 8003c06:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003c0a:	6181      	str	r1, [r0, #24]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8003c10:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 8003c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8003c16:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003c18:	61c1      	str	r1, [r0, #28]
 8003c1a:	4770      	bx	lr

08003c1c <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8003c1c:	69c3      	ldr	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 8003c1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint32_t)(TIM_OCClear << 8);
 8003c22:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003c26:	61c1      	str	r1, [r0, #28]
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop

08003c2c <TIM_ClearOC5Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8003c2c:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 8003c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 8003c32:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003c34:	6541      	str	r1, [r0, #84]	; 0x54
 8003c36:	4770      	bx	lr

08003c38 <TIM_ClearOC6Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8003c38:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 8003c3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear << 8);
 8003c3e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003c42:	6541      	str	r1, [r0, #84]	; 0x54
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop

08003c48 <TIM_SelectOCREFClear>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8003c48:	6882      	ldr	r2, [r0, #8]
 8003c4a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003c4e:	4013      	ands	r3, r2
 8003c50:	6083      	str	r3, [r0, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8003c52:	6883      	ldr	r3, [r0, #8]
 8003c54:	4319      	orrs	r1, r3
 8003c56:	6081      	str	r1, [r0, #8]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop

08003c5c <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003c5c:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 8003c5e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCPolarity;
 8003c62:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003c64:	6201      	str	r1, [r0, #32]
 8003c66:	4770      	bx	lr

08003c68 <TIM_OC1NPolarityConfig>:
  uint32_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003c68:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8003c6a:	f023 0308 	bic.w	r3, r3, #8
  tmpccer |= TIM_OCNPolarity;
 8003c6e:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003c70:	6201      	str	r1, [r0, #32]
 8003c72:	4770      	bx	lr

08003c74 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003c74:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 8003c76:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (uint32_t)(TIM_OCPolarity << 4);
 8003c7a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003c7e:	6201      	str	r1, [r0, #32]
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop

08003c84 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003c84:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8003c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpccer |= (uint32_t)(TIM_OCNPolarity << 4);
 8003c8a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003c8e:	6201      	str	r1, [r0, #32]
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop

08003c94 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003c94:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8003c96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (uint32_t)(TIM_OCPolarity << 8);
 8003c9a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003c9e:	6201      	str	r1, [r0, #32]
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8003ca4:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8003ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  tmpccer |= (uint32_t)(TIM_OCNPolarity << 8);
 8003caa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003cae:	6201      	str	r1, [r0, #32]
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop

08003cb4 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003cb4:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8003cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (uint32_t)(TIM_OCPolarity << 12);
 8003cba:	ea43 3101 	orr.w	r1, r3, r1, lsl #12

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003cbe:	6201      	str	r1, [r0, #32]
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop

08003cc4 <TIM_OC5PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003cc4:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8003cc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (uint32_t)(TIM_OCPolarity << 16);
 8003cca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003cce:	6201      	str	r1, [r0, #32]
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop

08003cd4 <TIM_OC6PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003cd4:	6a03      	ldr	r3, [r0, #32]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (uint32_t)(TIM_OCPolarity << 20);
 8003cda:	ea43 5101 	orr.w	r1, r3, r1, lsl #20

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003cde:	6201      	str	r1, [r0, #32]
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop

08003ce4 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003ce4:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8003ce6:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)~ tmp;
 8003ce8:	6a04      	ldr	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8003cea:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)~ tmp;
 8003cec:	ea24 0303 	bic.w	r3, r4, r3
 8003cf0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(TIM_CCx << TIM_Channel);
 8003cf2:	6a03      	ldr	r3, [r0, #32]
}
 8003cf4:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)~ tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(TIM_CCx << TIM_Channel);
 8003cf8:	408a      	lsls	r2, r1
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	6203      	str	r3, [r0, #32]
}
 8003cfe:	4770      	bx	lr

08003d00 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003d00:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8003d02:	2304      	movs	r3, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 8003d04:	6a04      	ldr	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8003d06:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 8003d08:	ea24 0303 	bic.w	r3, r4, r3
 8003d0c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint32_t)(TIM_CCxN << TIM_Channel);
 8003d0e:	6a03      	ldr	r3, [r0, #32]
}
 8003d10:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint32_t)(TIM_CCxN << TIM_Channel);
 8003d14:	408a      	lsls	r2, r1
 8003d16:	4313      	orrs	r3, r2
 8003d18:	6203      	str	r3, [r0, #32]
}
 8003d1a:	4770      	bx	lr

08003d1c <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003d1c:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003d20:	b36b      	cbz	r3, 8003d7e <TIM_ICInit+0x62>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d049      	beq.n	8003dba <TIM_ICInit+0x9e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003d26:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003d28:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8003d2a:	6a03      	ldr	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003d2c:	888c      	ldrh	r4, [r1, #4]
 8003d2e:	890a      	ldrh	r2, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d30:	88cd      	ldrh	r5, [r1, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003d32:	d066      	beq.n	8003e02 <TIM_ICInit+0xe6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8003d34:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8003d38:	4019      	ands	r1, r3
 8003d3a:	6201      	str	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d3c:	69c7      	ldr	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 8003d3e:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d42:	f645 73ff 	movw	r3, #24575	; 0x5fff
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003d46:	0221      	lsls	r1, r4, #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d48:	ea0e 0303 	and.w	r3, lr, r3
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003d4c:	f640 44ff 	movw	r4, #3327	; 0xcff
 8003d50:	ea41 3202 	orr.w	r2, r1, r2, lsl #12
 8003d54:	403c      	ands	r4, r7
 8003d56:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003d5a:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d60:	b292      	uxth	r2, r2
  TIMx->CCER = tmpccer ;
 8003d62:	b29b      	uxth	r3, r3
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d64:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003d66:	6203      	str	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8003d68:	69c2      	ldr	r2, [r0, #28]
 8003d6a:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61c3      	str	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003d72:	69c2      	ldr	r2, [r0, #28]
 8003d74:	022b      	lsls	r3, r5, #8
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61c3      	str	r3, [r0, #28]
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8003d7e:	6a02      	ldr	r2, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003d80:	884c      	ldrh	r4, [r1, #2]
 8003d82:	888b      	ldrh	r3, [r1, #4]
 8003d84:	890e      	ldrh	r6, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d86:	88cd      	ldrh	r5, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003d90:	6a01      	ldr	r1, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8003d92:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8003d96:	4313      	orrs	r3, r2
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8003d98:	f044 0401 	orr.w	r4, r4, #1
  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d9c:	f021 020a 	bic.w	r2, r1, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 8003da0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8003da4:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003da6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003da8:	6202      	str	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8003daa:	6982      	ldr	r2, [r0, #24]
 8003dac:	f022 020c 	bic.w	r2, r2, #12
 8003db0:	6182      	str	r2, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003db2:	6983      	ldr	r3, [r0, #24]
 8003db4:	432b      	orrs	r3, r5
 8003db6:	6183      	str	r3, [r0, #24]
 8003db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003dba:	6a06      	ldr	r6, [r0, #32]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003dbc:	884b      	ldrh	r3, [r1, #2]
 8003dbe:	888c      	ldrh	r4, [r1, #4]
 8003dc0:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003dc2:	88cd      	ldrh	r5, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003dc4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003dc8:	4032      	ands	r2, r6
 8003dca:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dcc:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8003dce:	6a06      	ldr	r6, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8003dd0:	011b      	lsls	r3, r3, #4
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003dd2:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8003dd6:	0224      	lsls	r4, r4, #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd8:	f64f 725f 	movw	r2, #65375	; 0xff5f
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8003de2:	f421 4173 	bic.w	r1, r1, #62208	; 0xf300
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003de6:	4032      	ands	r2, r6
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003de8:	4313      	orrs	r3, r2
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8003dea:	4321      	orrs	r1, r4
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dec:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8003dee:	6203      	str	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8003df0:	6983      	ldr	r3, [r0, #24]
 8003df2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003df6:	6183      	str	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 8003df8:	6983      	ldr	r3, [r0, #24]
 8003dfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003dfe:	6183      	str	r3, [r0, #24]
 8003e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8003e02:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8003e06:	4019      	ands	r1, r3
 8003e08:	6201      	str	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e0a:	69c7      	ldr	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 8003e0c:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e10:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8003e14:	f64f 710c 	movw	r1, #65292	; 0xff0c
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e18:	ea0e 0303 	and.w	r3, lr, r3
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003e1c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8003e20:	4039      	ands	r1, r7
 8003e22:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003e26:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e2c:	b292      	uxth	r2, r2
  TIMx->CCER = tmpccer;
 8003e2e:	b29b      	uxth	r3, r3
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e30:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8003e32:	6203      	str	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003e34:	69c3      	ldr	r3, [r0, #28]
 8003e36:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	61c2      	str	r2, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003e3e:	69c3      	ldr	r3, [r0, #28]
 8003e40:	432b      	orrs	r3, r5
 8003e42:	61c3      	str	r3, [r0, #28]
 8003e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e46:	bf00      	nop

08003e48 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003e48:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	8082      	strh	r2, [r0, #4]
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003e4e:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8003e50:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8003e52:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8003e54:	8103      	strh	r3, [r0, #8]
 8003e56:	4770      	bx	lr

08003e58 <TIM_PWMIConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003e58:	884b      	ldrh	r3, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003e5a:	888a      	ldrh	r2, [r1, #4]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003e5c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003e5e:	2b00      	cmp	r3, #0
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003e60:	880e      	ldrh	r6, [r1, #0]
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8003e62:	f8d0 e020 	ldr.w	lr, [r0, #32]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8003e66:	bf0c      	ite	eq
 8003e68:	2502      	moveq	r5, #2
 8003e6a:	2500      	movne	r5, #0
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003e6c:	2a01      	cmp	r2, #1
 8003e6e:	bf0c      	ite	eq
 8003e70:	2402      	moveq	r4, #2
 8003e72:	2401      	movne	r4, #1
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003e74:	2e00      	cmp	r6, #0
 8003e76:	d03e      	beq.n	8003ef6 <TIM_PWMIConfig+0x9e>
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003e78:	f64f 77ef 	movw	r7, #65519	; 0xffef
 8003e7c:	ea0e 0707 	and.w	r7, lr, r7
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003e80:	890e      	ldrh	r6, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003e82:	88c9      	ldrh	r1, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003e84:	6207      	str	r7, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e86:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e8a:	f8d0 c020 	ldr.w	ip, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8003e8e:	011b      	lsls	r3, r3, #4
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003e90:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8003e94:	0212      	lsls	r2, r2, #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e96:	f64f 775f 	movw	r7, #65375	; 0xff5f
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8003ea0:	f42e 4e73 	bic.w	lr, lr, #62208	; 0xf300
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea4:	ea0c 0707 	and.w	r7, ip, r7
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8003ea8:	ea42 020e 	orr.w	r2, r2, lr

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003eac:	433b      	orrs	r3, r7

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003eb0:	6203      	str	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8003eb2:	6983      	ldr	r3, [r0, #24]
 8003eb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003eb8:	6183      	str	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 8003eba:	6983      	ldr	r3, [r0, #24]
 8003ebc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ec0:	6183      	str	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8003ec2:	6a03      	ldr	r3, [r0, #32]
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eca:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003ecc:	6a03      	ldr	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8003ece:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8003ed2:	f045 0501 	orr.w	r5, r5, #1
 8003ed6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eda:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8003ede:	432b      	orrs	r3, r5
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 8003ee0:	4322      	orrs	r2, r4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ee4:	6203      	str	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8003ee6:	6983      	ldr	r3, [r0, #24]
 8003ee8:	f023 030c 	bic.w	r3, r3, #12
 8003eec:	6183      	str	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003eee:	6983      	ldr	r3, [r0, #24]
 8003ef0:	4319      	orrs	r1, r3
 8003ef2:	6181      	str	r1, [r0, #24]
 8003ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003ef6:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003ef8:	88ce      	ldrh	r6, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8003efa:	f02e 0101 	bic.w	r1, lr, #1
 8003efe:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f00:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f02:	f8d0 e020 	ldr.w	lr, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8003f06:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8003f0a:	4311      	orrs	r1, r2
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f10:	f02e 020a 	bic.w	r2, lr, #10
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8003f14:	4313      	orrs	r3, r2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 8003f16:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f1a:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f1c:	6203      	str	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8003f1e:	6983      	ldr	r3, [r0, #24]
 8003f20:	f023 030c 	bic.w	r3, r3, #12
 8003f24:	6183      	str	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003f26:	6983      	ldr	r3, [r0, #24]
 8003f28:	4333      	orrs	r3, r6
 8003f2a:	6183      	str	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003f2c:	6a02      	ldr	r2, [r0, #32]
 8003f2e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003f32:	4013      	ands	r3, r2
 8003f34:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f36:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f38:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f3a:	f64f 735f 	movw	r3, #65375	; 0xff5f
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8003f3e:	f422 4273 	bic.w	r2, r2, #62208	; 0xf300
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f42:	400b      	ands	r3, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 8003f44:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003f48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003f4c:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8003f50:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f54:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f56:	6203      	str	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8003f58:	6983      	ldr	r3, [r0, #24]
 8003f5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f5e:	6183      	str	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 8003f60:	6983      	ldr	r3, [r0, #24]
 8003f62:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 8003f66:	6186      	str	r6, [r0, #24]
 8003f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6a:	bf00      	nop

08003f6c <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003f6c:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8003f6e:	4770      	bx	lr

08003f70 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003f70:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8003f72:	4770      	bx	lr

08003f74 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003f74:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8003f76:	4770      	bx	lr

08003f78 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003f78:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8003f7a:	4770      	bx	lr

08003f7c <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8003f7c:	6983      	ldr	r3, [r0, #24]
 8003f7e:	f023 030c 	bic.w	r3, r3, #12
 8003f82:	6183      	str	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003f84:	6983      	ldr	r3, [r0, #24]
 8003f86:	4319      	orrs	r1, r3
 8003f88:	6181      	str	r1, [r0, #24]
 8003f8a:	4770      	bx	lr

08003f8c <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8003f8c:	6983      	ldr	r3, [r0, #24]
 8003f8e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f92:	6183      	str	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 8003f94:	6983      	ldr	r3, [r0, #24]
 8003f96:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003f9a:	6181      	str	r1, [r0, #24]
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop

08003fa0 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003fa0:	69c2      	ldr	r2, [r0, #28]
 8003fa2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61c3      	str	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003faa:	69c3      	ldr	r3, [r0, #28]
 8003fac:	4319      	orrs	r1, r3
 8003fae:	61c1      	str	r1, [r0, #28]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop

08003fb4 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8003fb4:	69c2      	ldr	r2, [r0, #28]
 8003fb6:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61c3      	str	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003fbe:	69c3      	ldr	r3, [r0, #28]
 8003fc0:	0209      	lsls	r1, r1, #8
 8003fc2:	b289      	uxth	r1, r1
 8003fc4:	4319      	orrs	r1, r3
 8003fc6:	61c1      	str	r1, [r0, #28]
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop

08003fcc <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003fce:	880b      	ldrh	r3, [r1, #0]
 8003fd0:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8003fd4:	888f      	ldrh	r7, [r1, #4]
 8003fd6:	88ce      	ldrh	r6, [r1, #6]
 8003fd8:	890d      	ldrh	r5, [r1, #8]
 8003fda:	894c      	ldrh	r4, [r1, #10]
 8003fdc:	898a      	ldrh	r2, [r1, #12]
 8003fde:	ea4e 0303 	orr.w	r3, lr, r3
 8003fe2:	433b      	orrs	r3, r7
 8003fe4:	4333      	orrs	r3, r6
 8003fe6:	432b      	orrs	r3, r5
 8003fe8:	4323      	orrs	r3, r4
 8003fea:	4313      	orrs	r3, r2
 8003fec:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003fee:	6443      	str	r3, [r0, #68]	; 0x44
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	bf00      	nop

08003ff4 <TIM_Break1Config>:
{   /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 8003ff4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ff6:	f423 2372 	bic.w	r3, r3, #991232	; 0xf2000
 8003ffa:	6443      	str	r3, [r0, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 8003ffc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ffe:	4319      	orrs	r1, r3
 8004000:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8004004:	6442      	str	r2, [r0, #68]	; 0x44
 8004006:	4770      	bx	lr

08004008 <TIM_Break2Config>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 8004008:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800400a:	f023 733c 	bic.w	r3, r3, #49283072	; 0x2f00000
 800400e:	6443      	str	r3, [r0, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 8004010:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004012:	4319      	orrs	r1, r3
 8004014:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8004018:	6442      	str	r2, [r0, #68]	; 0x44
 800401a:	4770      	bx	lr

0800401c <TIM_Break1Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 800401c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800401e:	b919      	cbnz	r1, 8004028 <TIM_Break1Cmd+0xc>
    TIMx->BDTR |= TIM_BDTR_BKE;
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 8004020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004024:	6443      	str	r3, [r0, #68]	; 0x44
 8004026:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 8004028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800402c:	6443      	str	r3, [r0, #68]	; 0x44
 800402e:	4770      	bx	lr

08004030 <TIM_Break2Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 8004030:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004032:	b919      	cbnz	r1, 800403c <TIM_Break2Cmd+0xc>
    TIMx->BDTR |= TIM_BDTR_BK2E;
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 8004034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004038:	6443      	str	r3, [r0, #68]	; 0x44
 800403a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 800403c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004040:	6443      	str	r3, [r0, #68]	; 0x44
 8004042:	4770      	bx	lr

08004044 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8004044:	2300      	movs	r3, #0
 8004046:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8004048:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800404a:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800404c:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800404e:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8004050:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8004052:	8183      	strh	r3, [r0, #12]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8004058:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800405a:	b919      	cbnz	r1, 8004064 <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800405c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004060:	6443      	str	r3, [r0, #68]	; 0x44
 8004062:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8004064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004068:	6443      	str	r3, [r0, #68]	; 0x44
 800406a:	4770      	bx	lr

0800406c <TIM_SelectCOM>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800406c:	b929      	cbnz	r1, 800407a <TIM_SelectCOM+0xe>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800406e:	6842      	ldr	r2, [r0, #4]
 8004070:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8004074:	4013      	ands	r3, r2
 8004076:	6043      	str	r3, [r0, #4]
 8004078:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800407a:	6843      	ldr	r3, [r0, #4]
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6043      	str	r3, [r0, #4]
 8004082:	4770      	bx	lr

08004084 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004084:	b929      	cbnz	r1, 8004092 <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8004086:	6842      	ldr	r2, [r0, #4]
 8004088:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800408c:	4013      	ands	r3, r2
 800408e:	6043      	str	r3, [r0, #4]
 8004090:	4770      	bx	lr
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8004092:	6843      	ldr	r3, [r0, #4]
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6043      	str	r3, [r0, #4]
 800409a:	4770      	bx	lr

0800409c <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800409c:	b92a      	cbnz	r2, 80040aa <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800409e:	68c3      	ldr	r3, [r0, #12]
 80040a0:	43c9      	mvns	r1, r1
 80040a2:	b289      	uxth	r1, r1
 80040a4:	4019      	ands	r1, r3
 80040a6:	60c1      	str	r1, [r0, #12]
 80040a8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80040aa:	68c3      	ldr	r3, [r0, #12]
 80040ac:	4319      	orrs	r1, r3
 80040ae:	60c1      	str	r1, [r0, #12]
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop

080040b4 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80040b4:	6141      	str	r1, [r0, #20]
 80040b6:	4770      	bx	lr

080040b8 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 80040b8:	6903      	ldr	r3, [r0, #16]
 80040ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80040bc:	bf14      	ite	ne
 80040be:	2001      	movne	r0, #1
 80040c0:	2000      	moveq	r0, #0
 80040c2:	4770      	bx	lr

080040c4 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80040c4:	43c9      	mvns	r1, r1
 80040c6:	b289      	uxth	r1, r1
 80040c8:	6101      	str	r1, [r0, #16]
 80040ca:	4770      	bx	lr

080040cc <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80040cc:	6903      	ldr	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80040ce:	68c2      	ldr	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80040d0:	ea11 0003 	ands.w	r0, r1, r3
 80040d4:	d003      	beq.n	80040de <TIM_GetITStatus+0x12>
 80040d6:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80040d8:	bf14      	ite	ne
 80040da:	2001      	movne	r0, #1
 80040dc:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80040de:	4770      	bx	lr

080040e0 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80040e0:	43c9      	mvns	r1, r1
 80040e2:	b289      	uxth	r1, r1
 80040e4:	6101      	str	r1, [r0, #16]
 80040e6:	4770      	bx	lr

080040e8 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80040e8:	430a      	orrs	r2, r1
 80040ea:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80040ee:	4770      	bx	lr

080040f0 <TIM_DMACmd>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80040f0:	b92a      	cbnz	r2, 80040fe <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80040f2:	68c3      	ldr	r3, [r0, #12]
 80040f4:	43c9      	mvns	r1, r1
 80040f6:	b289      	uxth	r1, r1
 80040f8:	4019      	ands	r1, r3
 80040fa:	60c1      	str	r1, [r0, #12]
 80040fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80040fe:	68c3      	ldr	r3, [r0, #12]
 8004100:	4319      	orrs	r1, r3
 8004102:	60c1      	str	r1, [r0, #12]
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop

08004108 <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004108:	b929      	cbnz	r1, 8004116 <TIM_SelectCCDMA+0xe>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800410a:	6842      	ldr	r2, [r0, #4]
 800410c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8004110:	4013      	ands	r3, r2
 8004112:	6043      	str	r3, [r0, #4]
 8004114:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8004116:	6843      	ldr	r3, [r0, #4]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	6043      	str	r3, [r0, #4]
 800411e:	4770      	bx	lr

08004120 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8004120:	6882      	ldr	r2, [r0, #8]
 8004122:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004126:	4013      	ands	r3, r2
 8004128:	6083      	str	r3, [r0, #8]
 800412a:	4770      	bx	lr

0800412c <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800412c:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800412e:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8004132:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004134:	4319      	orrs	r1, r3
 8004136:	6081      	str	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8004138:	6883      	ldr	r3, [r0, #8]
 800413a:	f043 0307 	orr.w	r3, r3, #7
 800413e:	6083      	str	r3, [r0, #8]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8004144:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8004146:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8004148:	d01e      	beq.n	8004188 <TIM_TIxExternalClockConfig+0x44>
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 800414a:	6a04      	ldr	r4, [r0, #32]
 800414c:	f024 0401 	bic.w	r4, r4, #1
 8004150:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004154:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8004156:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	f044 0401 	orr.w	r4, r4, #1
  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004162:	f025 050a 	bic.w	r5, r5, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 8004166:	ea44 1303 	orr.w	r3, r4, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 800416a:	432a      	orrs	r2, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800416c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800416e:	6202      	str	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004170:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8004172:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8004176:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004178:	430b      	orrs	r3, r1
 800417a:	6083      	str	r3, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800417c:	6883      	ldr	r3, [r0, #8]
 800417e:	f043 0307 	orr.w	r3, r3, #7
 8004182:	6083      	str	r3, [r0, #8]
}
 8004184:	bc70      	pop	{r4, r5, r6}
 8004186:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8004188:	6a05      	ldr	r5, [r0, #32]
 800418a:	f64f 74ef 	movw	r4, #65519	; 0xffef
 800418e:	402c      	ands	r4, r5
 8004190:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004192:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004194:	6a06      	ldr	r6, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8004196:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004198:	f042 0210 	orr.w	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 800419c:	f424 4473 	bic.w	r4, r4, #62208	; 0xf300
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	f64f 755f 	movw	r5, #65375	; 0xff5f
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80041a4:	b292      	uxth	r2, r2
 80041a6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041aa:	4035      	ands	r5, r6
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 80041ac:	ea44 3303 	orr.w	r3, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80041b0:	432a      	orrs	r2, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80041b4:	6202      	str	r2, [r0, #32]
 80041b6:	e7db      	b.n	8004170 <TIM_TIxExternalClockConfig+0x2c>

080041b8 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80041b8:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80041ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80041bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80041c0:	b2e4      	uxtb	r4, r4
 80041c2:	4323      	orrs	r3, r4
 80041c4:	b29b      	uxth	r3, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	4319      	orrs	r1, r3
 80041c8:	6081      	str	r1, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
}
 80041cc:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80041d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041d4:	b29b      	uxth	r3, r3
  tmpsmcr |= TIM_TS_ETRF;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041da:	6083      	str	r3, [r0, #8]
}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop

080041e0 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80041e0:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80041e2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80041e4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80041e8:	b2e4      	uxtb	r4, r4
 80041ea:	4323      	orrs	r3, r4
 80041ec:	b29b      	uxth	r3, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	4319      	orrs	r1, r3
 80041f0:	6081      	str	r1, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80041f2:	6883      	ldr	r3, [r0, #8]
}
 80041f4:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fc:	6083      	str	r3, [r0, #8]
}
 80041fe:	4770      	bx	lr

08004200 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004200:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8004202:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8004206:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004208:	4319      	orrs	r1, r3
 800420a:	6081      	str	r1, [r0, #8]
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop

08004210 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8004210:	6842      	ldr	r2, [r0, #4]
 8004212:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8004216:	4013      	ands	r3, r2
 8004218:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800421a:	6843      	ldr	r3, [r0, #4]
 800421c:	4319      	orrs	r1, r3
 800421e:	6041      	str	r1, [r0, #4]
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <TIM_SelectOutputTrigger2>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 8004224:	6843      	ldr	r3, [r0, #4]
 8004226:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800422a:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 800422c:	6843      	ldr	r3, [r0, #4]
 800422e:	4319      	orrs	r1, r3
 8004230:	6041      	str	r1, [r0, #4]
 8004232:	4770      	bx	lr

08004234 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 8004234:	6883      	ldr	r3, [r0, #8]
 8004236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423a:	f023 0307 	bic.w	r3, r3, #7
 800423e:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 8004240:	6883      	ldr	r3, [r0, #8]
 8004242:	4319      	orrs	r1, r3
 8004244:	6081      	str	r1, [r0, #8]
 8004246:	4770      	bx	lr

08004248 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8004248:	6882      	ldr	r2, [r0, #8]
 800424a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800424e:	4013      	ands	r3, r2
 8004250:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8004252:	6883      	ldr	r3, [r0, #8]
 8004254:	4319      	orrs	r1, r3
 8004256:	6081      	str	r1, [r0, #8]
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800425c:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800425e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8004260:	b2e4      	uxtb	r4, r4
 8004262:	4321      	orrs	r1, r4
 8004264:	430a      	orrs	r2, r1

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8004266:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	b299      	uxth	r1, r3
 800426c:	6081      	str	r1, [r0, #8]
}
 800426e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004272:	4770      	bx	lr

08004274 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004276:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8004278:	f8d0 e018 	ldr.w	lr, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427c:	6a04      	ldr	r4, [r0, #32]
 800427e:	b2a4      	uxth	r4, r4
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8004280:	f64f 45fc 	movw	r5, #64764	; 0xfcfc
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8004284:	f024 0422 	bic.w	r4, r4, #34	; 0x22
 8004288:	4322      	orrs	r2, r4

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800428a:	f64f 76f8 	movw	r6, #65528	; 0xfff8
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800428e:	ea0e 0505 	and.w	r5, lr, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8004292:	403e      	ands	r6, r7
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8004294:	ea42 1303 	orr.w	r3, r2, r3, lsl #4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8004298:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429c:	4331      	orrs	r1, r6

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429e:	b29a      	uxth	r2, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80042a0:	f045 0501 	orr.w	r5, r5, #1
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a4:	6081      	str	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80042a6:	6185      	str	r5, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	6202      	str	r2, [r0, #32]
 80042aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042ac <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80042ac:	b929      	cbnz	r1, 80042ba <TIM_SelectHallSensor+0xe>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80042ae:	6842      	ldr	r2, [r0, #4]
 80042b0:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80042b4:	4013      	ands	r3, r2
 80042b6:	6043      	str	r3, [r0, #4]
 80042b8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80042ba:	6843      	ldr	r3, [r0, #4]
 80042bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c0:	6043      	str	r3, [r0, #4]
 80042c2:	4770      	bx	lr

080042c4 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80042c4:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop

080042cc <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80042cc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <USART_DeInit+0x9c>)
 80042d0:	4298      	cmp	r0, r3
 80042d2:	d018      	beq.n	8004306 <USART_DeInit+0x3a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <USART_DeInit+0xa0>)
 80042d6:	4298      	cmp	r0, r3
 80042d8:	d021      	beq.n	800431e <USART_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <USART_DeInit+0xa4>)
 80042dc:	4298      	cmp	r0, r3
 80042de:	d02a      	beq.n	8004336 <USART_DeInit+0x6a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }
  else if (USARTx == UART4)
 80042e0:	4b24      	ldr	r3, [pc, #144]	; (8004374 <USART_DeInit+0xa8>)
 80042e2:	4298      	cmp	r0, r3
 80042e4:	d033      	beq.n	800434e <USART_DeInit+0x82>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else
  {
    if  (USARTx == UART5)
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <USART_DeInit+0xac>)
 80042e8:	4298      	cmp	r0, r3
 80042ea:	d000      	beq.n	80042ee <USART_DeInit+0x22>
 80042ec:	bd08      	pop	{r3, pc}
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80042ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80042f2:	2101      	movs	r1, #1
 80042f4:	f7fe ffee 	bl	80032d4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80042f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80042fc:	2100      	movs	r1, #0
    }
  }
}
 80042fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if  (USARTx == UART5)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8004302:	f7fe bfe7 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8004306:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800430a:	2101      	movs	r1, #1
 800430c:	f7fe ffd6 	bl	80032bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8004310:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004314:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8004316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800431a:	f7fe bfcf 	b.w	80032bc <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800431e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004322:	2101      	movs	r1, #1
 8004324:	f7fe ffd6 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8004328:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800432c:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 800432e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8004332:	f7fe bfcf 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8004336:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800433a:	2101      	movs	r1, #1
 800433c:	f7fe ffca 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8004340:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004344:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8004346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800434a:	f7fe bfc3 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800434e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004352:	2101      	movs	r1, #1
 8004354:	f7fe ffbe 	bl	80032d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8004358:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800435c:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 800435e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8004362:	f7fe bfb7 	b.w	80032d4 <RCC_APB1PeriphResetCmd>
 8004366:	bf00      	nop
 8004368:	40013800 	.word	0x40013800
 800436c:	40004400 	.word	0x40004400
 8004370:	40004800 	.word	0x40004800
 8004374:	40004c00 	.word	0x40004c00
 8004378:	40005000 	.word	0x40005000

0800437c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800437c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800437e:	6806      	ldr	r6, [r0, #0]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004380:	4604      	mov	r4, r0
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004382:	1d0b      	adds	r3, r1, #4
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8004384:	f026 0601 	bic.w	r6, r6, #1
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004388:	e893 1088 	ldmia.w	r3, {r3, r7, ip}
 800438c:	6908      	ldr	r0, [r1, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800438e:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8004390:	6949      	ldr	r1, [r1, #20]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8004392:	6026      	str	r6, [r4, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004394:	6866      	ldr	r6, [r4, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8004396:	f426 5e40 	bic.w	lr, r6, #12288	; 0x3000
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800439a:	ea4e 0707 	orr.w	r7, lr, r7
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800439e:	6067      	str	r7, [r4, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80043a0:	6822      	ldr	r2, [r4, #0]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80043a2:	ea4c 0603 	orr.w	r6, ip, r3
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80043a6:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 80043aa:	f023 030c 	bic.w	r3, r3, #12
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80043ae:	ea46 0200 	orr.w	r2, r6, r0
 80043b2:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80043b4:	6023      	str	r3, [r4, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 80043b6:	68a3      	ldr	r3, [r4, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80043bc:	430b      	orrs	r3, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80043be:	b091      	sub	sp, #68	; 0x44
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80043c0:	60a3      	str	r3, [r4, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80043c2:	a801      	add	r0, sp, #4
 80043c4:	f7fe fd86 	bl	8002ed4 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80043c8:	4b16      	ldr	r3, [pc, #88]	; (8004424 <USART_Init+0xa8>)
 80043ca:	429c      	cmp	r4, r3
 80043cc:	d024      	beq.n	8004418 <USART_Init+0x9c>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else if (USARTx == USART2)
 80043ce:	4b16      	ldr	r3, [pc, #88]	; (8004428 <USART_Init+0xac>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d023      	beq.n	800441c <USART_Init+0xa0>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
  }
  else if (USARTx == USART3)
 80043d4:	4b15      	ldr	r3, [pc, #84]	; (800442c <USART_Init+0xb0>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d022      	beq.n	8004420 <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
  }
  else if (USARTx == UART4)
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <USART_Init+0xb4>)
 80043dc:	429c      	cmp	r4, r3
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 80043de:	bf0c      	ite	eq
 80043e0:	9a0e      	ldreq	r2, [sp, #56]	; 0x38
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 80043e2:	9a0f      	ldrne	r2, [sp, #60]	; 0x3c
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80043e4:	6823      	ldr	r3, [r4, #0]
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80043e6:	6829      	ldr	r1, [r5, #0]
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80043e8:	0418      	lsls	r0, r3, #16
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80043ea:	bf48      	it	mi
 80043ec:	0052      	lslmi	r2, r2, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 80043ee:	fbb2 f3f1 	udiv	r3, r2, r1
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 80043f2:	fb01 2213 	mls	r2, r1, r3, r2
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80043f6:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
  {
    divider++;
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80043fa:	6822      	ldr	r2, [r4, #0]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 80043fc:	bf28      	it	cs
 80043fe:	3301      	addcs	r3, #1
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004400:	0412      	lsls	r2, r2, #16
 8004402:	d505      	bpl.n	8004410 <USART_Init+0x94>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8004404:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004408:	401a      	ands	r2, r3
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800440a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800440e:	4313      	orrs	r3, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8004410:	b29b      	uxth	r3, r3
 8004412:	81a3      	strh	r3, [r4, #12]
}
 8004414:	b011      	add	sp, #68	; 0x44
 8004416:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  
  if (USARTx == USART1)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8004418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800441a:	e7e3      	b.n	80043e4 <USART_Init+0x68>
  }
  else if (USARTx == USART2)
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800441c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800441e:	e7e1      	b.n	80043e4 <USART_Init+0x68>
  }
  else if (USARTx == USART3)
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8004420:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004422:	e7df      	b.n	80043e4 <USART_Init+0x68>
 8004424:	40013800 	.word	0x40013800
 8004428:	40004400 	.word	0x40004400
 800442c:	40004800 	.word	0x40004800
 8004430:	40004c00 	.word	0x40004c00

08004434 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8004434:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8004436:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800443a:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800443c:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800443e:	6102      	str	r2, [r0, #16]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8004440:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8004442:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8004444:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004446:	6143      	str	r3, [r0, #20]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop

0800444c <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800444c:	b430      	push	{r4, r5}
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800444e:	e891 0024 	ldmia.w	r1, {r2, r5}
 8004452:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004454:	6843      	ldr	r3, [r0, #4]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004456:	68c9      	ldr	r1, [r1, #12]
 8004458:	432a      	orrs	r2, r5
 800445a:	4322      	orrs	r2, r4
 800445c:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800445e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004462:	4313      	orrs	r3, r2
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8004464:	6043      	str	r3, [r0, #4]
}
 8004466:	bc30      	pop	{r4, r5}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800446c:	2300      	movs	r3, #0
 800446e:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8004470:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8004472:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8004474:	60c3      	str	r3, [r0, #12]
 8004476:	4770      	bx	lr

08004478 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8004478:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800447a:	b919      	cbnz	r1, 8004484 <USART_Cmd+0xc>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	6003      	str	r3, [r0, #0]
 8004482:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6003      	str	r3, [r0, #0]
 800448a:	4770      	bx	lr

0800448c <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 800448c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800448e:	b91a      	cbnz	r2, 8004498 <USART_DirectionModeCmd+0xc>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8004490:	ea23 0101 	bic.w	r1, r3, r1
 8004494:	6001      	str	r1, [r0, #0]
 8004496:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8004498:	4319      	orrs	r1, r3
 800449a:	6001      	str	r1, [r0, #0]
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop

080044a0 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80044a0:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80044a2:	b919      	cbnz	r1, 80044ac <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 80044a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044a8:	6003      	str	r3, [r0, #0]
 80044aa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80044ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b0:	6003      	str	r3, [r0, #0]
 80044b2:	4770      	bx	lr

080044b4 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80044b4:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044b6:	b919      	cbnz	r1, 80044c0 <USART_OneBitMethodCmd+0xc>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 80044b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044bc:	6083      	str	r3, [r0, #8]
 80044be:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80044c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044c4:	6083      	str	r3, [r0, #8]
 80044c6:	4770      	bx	lr

080044c8 <USART_MSBFirstCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 80044c8:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044ca:	b919      	cbnz	r1, 80044d4 <USART_MSBFirstCmd+0xc>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 80044cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80044d0:	6043      	str	r3, [r0, #4]
 80044d2:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 80044d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d8:	6043      	str	r3, [r0, #4]
 80044da:	4770      	bx	lr

080044dc <USART_DataInvCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 80044dc:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044de:	b919      	cbnz	r1, 80044e8 <USART_DataInvCmd+0xc>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 80044e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e4:	6043      	str	r3, [r0, #4]
 80044e6:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ec:	6043      	str	r3, [r0, #4]
 80044ee:	4770      	bx	lr

080044f0 <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 80044f0:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80044f2:	b91a      	cbnz	r2, 80044fc <USART_InvPinCmd+0xc>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 80044f4:	ea23 0101 	bic.w	r1, r3, r1
 80044f8:	6041      	str	r1, [r0, #4]
 80044fa:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 80044fc:	4319      	orrs	r1, r3
 80044fe:	6041      	str	r1, [r0, #4]
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop

08004504 <USART_SWAPPinCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8004504:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004506:	b919      	cbnz	r1, 8004510 <USART_SWAPPinCmd+0xc>
    USARTx->CR2 |= USART_CR2_SWAP;
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8004508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800450c:	6043      	str	r3, [r0, #4]
 800450e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8004510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004514:	6043      	str	r3, [r0, #4]
 8004516:	4770      	bx	lr

08004518 <USART_ReceiverTimeOutCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8004518:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800451a:	b919      	cbnz	r1, 8004524 <USART_ReceiverTimeOutCmd+0xc>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 800451c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004520:	6043      	str	r3, [r0, #4]
 8004522:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8004524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004528:	6043      	str	r3, [r0, #4]
 800452a:	4770      	bx	lr

0800452c <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 800452c:	6943      	ldr	r3, [r0, #20]
 800452e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004532:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8004534:	6943      	ldr	r3, [r0, #20]
 8004536:	4319      	orrs	r1, r3
 8004538:	6141      	str	r1, [r0, #20]
 800453a:	4770      	bx	lr

0800453c <USART_SetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800453c:	8a03      	ldrh	r3, [r0, #16]
 800453e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004542:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8004544:	8a03      	ldrh	r3, [r0, #16]
 8004546:	b29b      	uxth	r3, r3
 8004548:	4319      	orrs	r1, r3
 800454a:	8201      	strh	r1, [r0, #16]
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop

08004550 <USART_STOPModeCmd>:
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8004550:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004552:	b919      	cbnz	r1, 800455c <USART_STOPModeCmd+0xc>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8004554:	f023 0302 	bic.w	r3, r3, #2
 8004558:	6003      	str	r3, [r0, #0]
 800455a:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	6003      	str	r3, [r0, #0]
 8004562:	4770      	bx	lr

08004564 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8004564:	6883      	ldr	r3, [r0, #8]
 8004566:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800456a:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 800456c:	6883      	ldr	r3, [r0, #8]
 800456e:	4319      	orrs	r1, r3
 8004570:	6081      	str	r1, [r0, #8]
 8004572:	4770      	bx	lr

08004574 <USART_AutoBaudRateCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8004574:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004576:	b919      	cbnz	r1, 8004580 <USART_AutoBaudRateCmd+0xc>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8004578:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800457c:	6043      	str	r3, [r0, #4]
 800457e:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8004580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004584:	6043      	str	r3, [r0, #4]
 8004586:	4770      	bx	lr

08004588 <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8004588:	6843      	ldr	r3, [r0, #4]
 800458a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800458e:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8004590:	6843      	ldr	r3, [r0, #4]
 8004592:	4319      	orrs	r1, r3
 8004594:	6041      	str	r1, [r0, #4]
 8004596:	4770      	bx	lr

08004598 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8004598:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800459c:	8501      	strh	r1, [r0, #40]	; 0x28
 800459e:	4770      	bx	lr

080045a0 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 80045a0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 80045a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80045a6:	4770      	bx	lr

080045a8 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 80045a8:	6843      	ldr	r3, [r0, #4]
 80045aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	6043      	str	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 80045b0:	6843      	ldr	r3, [r0, #4]
 80045b2:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 80045b6:	6041      	str	r1, [r0, #4]
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop

080045bc <USART_MuteModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 80045bc:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80045be:	b919      	cbnz	r1, 80045c8 <USART_MuteModeCmd+0xc>
    USARTx->CR1 |= USART_CR1_MME;
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 80045c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c4:	6003      	str	r3, [r0, #0]
 80045c6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 80045c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045cc:	6003      	str	r3, [r0, #0]
 80045ce:	4770      	bx	lr

080045d0 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 80045d0:	6803      	ldr	r3, [r0, #0]
 80045d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d6:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 80045d8:	6803      	ldr	r3, [r0, #0]
 80045da:	4319      	orrs	r1, r3
 80045dc:	6001      	str	r1, [r0, #0]
 80045de:	4770      	bx	lr

080045e0 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 80045e0:	6843      	ldr	r3, [r0, #4]
 80045e2:	f023 0310 	bic.w	r3, r3, #16
 80045e6:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 80045e8:	6843      	ldr	r3, [r0, #4]
 80045ea:	4319      	orrs	r1, r3
 80045ec:	6041      	str	r1, [r0, #4]
 80045ee:	4770      	bx	lr

080045f0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 80045f0:	6843      	ldr	r3, [r0, #4]
 80045f2:	f023 0320 	bic.w	r3, r3, #32
 80045f6:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80045f8:	6843      	ldr	r3, [r0, #4]
 80045fa:	4319      	orrs	r1, r3
 80045fc:	6041      	str	r1, [r0, #4]
 80045fe:	4770      	bx	lr

08004600 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8004600:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004602:	b919      	cbnz	r1, 800460c <USART_LINCmd+0xc>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8004604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004608:	6043      	str	r3, [r0, #4]
 800460a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800460c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004610:	6043      	str	r3, [r0, #4]
 8004612:	4770      	bx	lr

08004614 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8004614:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004616:	b919      	cbnz	r1, 8004620 <USART_HalfDuplexCmd+0xc>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8004618:	f023 0308 	bic.w	r3, r3, #8
 800461c:	6083      	str	r3, [r0, #8]
 800461e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8004620:	f043 0308 	orr.w	r3, r3, #8
 8004624:	6083      	str	r3, [r0, #8]
 8004626:	4770      	bx	lr

08004628 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8004628:	8a03      	ldrh	r3, [r0, #16]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	8203      	strh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800462e:	8a03      	ldrh	r3, [r0, #16]
 8004630:	b29b      	uxth	r3, r3
 8004632:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004636:	8201      	strh	r1, [r0, #16]
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800463c:	6883      	ldr	r3, [r0, #8]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800463e:	b919      	cbnz	r1, 8004648 <USART_SmartCardCmd+0xc>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8004640:	f023 0320 	bic.w	r3, r3, #32
 8004644:	6083      	str	r3, [r0, #8]
 8004646:	4770      	bx	lr
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8004648:	f043 0320 	orr.w	r3, r3, #32
 800464c:	6083      	str	r3, [r0, #8]
 800464e:	4770      	bx	lr

08004650 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8004650:	6883      	ldr	r3, [r0, #8]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004652:	b919      	cbnz	r1, 800465c <USART_SmartCardNACKCmd+0xc>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	6083      	str	r3, [r0, #8]
 800465a:	4770      	bx	lr
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800465c:	f043 0310 	orr.w	r3, r3, #16
 8004660:	6083      	str	r3, [r0, #8]
 8004662:	4770      	bx	lr

08004664 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8004664:	6883      	ldr	r3, [r0, #8]
 8004666:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800466a:	6083      	str	r3, [r0, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 800466c:	6883      	ldr	r3, [r0, #8]
 800466e:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8004672:	6081      	str	r1, [r0, #8]
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8004678:	6943      	ldr	r3, [r0, #20]
 800467a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800467e:	6143      	str	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8004680:	6943      	ldr	r3, [r0, #20]
 8004682:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8004686:	6141      	str	r1, [r0, #20]
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop

0800468c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 800468c:	6883      	ldr	r3, [r0, #8]
 800468e:	f023 0304 	bic.w	r3, r3, #4
 8004692:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8004694:	6883      	ldr	r3, [r0, #8]
 8004696:	4319      	orrs	r1, r3
 8004698:	6081      	str	r1, [r0, #8]
 800469a:	4770      	bx	lr

0800469c <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800469c:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800469e:	b919      	cbnz	r1, 80046a8 <USART_IrDACmd+0xc>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 80046a0:	f023 0302 	bic.w	r3, r3, #2
 80046a4:	6083      	str	r3, [r0, #8]
 80046a6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	6083      	str	r3, [r0, #8]
 80046ae:	4770      	bx	lr

080046b0 <USART_DECmd>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 80046b0:	6883      	ldr	r3, [r0, #8]
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80046b2:	b919      	cbnz	r1, 80046bc <USART_DECmd+0xc>
    USARTx->CR3 |= USART_CR3_DEM;
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 80046b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b8:	6083      	str	r3, [r0, #8]
 80046ba:	4770      	bx	lr
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c0:	6083      	str	r3, [r0, #8]
 80046c2:	4770      	bx	lr

080046c4 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 80046c4:	6883      	ldr	r3, [r0, #8]
 80046c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ca:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 80046cc:	6883      	ldr	r3, [r0, #8]
 80046ce:	4319      	orrs	r1, r3
 80046d0:	6081      	str	r1, [r0, #8]
 80046d2:	4770      	bx	lr

080046d4 <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 80046d4:	6803      	ldr	r3, [r0, #0]
 80046d6:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 80046da:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 80046dc:	6803      	ldr	r3, [r0, #0]
 80046de:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
 80046e2:	6001      	str	r1, [r0, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop

080046e8 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 80046e8:	6803      	ldr	r3, [r0, #0]
 80046ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ee:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 80046f0:	6803      	ldr	r3, [r0, #0]
 80046f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80046f6:	6001      	str	r1, [r0, #0]
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop

080046fc <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80046fc:	6883      	ldr	r3, [r0, #8]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80046fe:	b91a      	cbnz	r2, 8004708 <USART_DMACmd+0xc>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8004700:	ea23 0101 	bic.w	r1, r3, r1
 8004704:	6081      	str	r1, [r0, #8]
 8004706:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8004708:	4319      	orrs	r1, r3
 800470a:	6081      	str	r1, [r0, #8]
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8004710:	6883      	ldr	r3, [r0, #8]
 8004712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004716:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8004718:	6883      	ldr	r3, [r0, #8]
 800471a:	4319      	orrs	r1, r3
 800471c:	6081      	str	r1, [r0, #8]
 800471e:	4770      	bx	lr

08004720 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8004720:	b410      	push	{r4}

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8004722:	b2cc      	uxtb	r4, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8004724:	f3c1 2107 	ubfx	r1, r1, #8, #8

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8004728:	2301      	movs	r3, #1

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800472a:	2902      	cmp	r1, #2
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800472c:	fa03 f304 	lsl.w	r3, r3, r4

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8004730:	d010      	beq.n	8004754 <USART_ITConfig+0x34>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8004732:	2903      	cmp	r1, #3
  {
    usartxbase += 0x08;
 8004734:	bf08      	it	eq
 8004736:	3008      	addeq	r0, #8
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8004738:	b932      	cbnz	r2, 8004748 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800473a:	6802      	ldr	r2, [r0, #0]
  }
}
 800473c:	f85d 4b04 	ldr.w	r4, [sp], #4
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8004740:	ea22 0303 	bic.w	r3, r2, r3
 8004744:	6003      	str	r3, [r0, #0]
  }
}
 8004746:	4770      	bx	lr
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8004748:	6802      	ldr	r2, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800474a:	f85d 4b04 	ldr.w	r4, [sp], #4
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800474e:	4313      	orrs	r3, r2
 8004750:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8004752:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);

  if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x04;
 8004754:	3004      	adds	r0, #4
 8004756:	e7ef      	b.n	8004738 <USART_ITConfig+0x18>

08004758 <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8004758:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800475a:	b922      	cbnz	r2, 8004766 <USART_RequestCmd+0xe>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 800475c:	b29b      	uxth	r3, r3
 800475e:	ea23 0101 	bic.w	r1, r3, r1
 8004762:	8301      	strh	r1, [r0, #24]
 8004764:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8004766:	4319      	orrs	r1, r3
 8004768:	b289      	uxth	r1, r1
 800476a:	8301      	strh	r1, [r0, #24]
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8004770:	6883      	ldr	r3, [r0, #8]
 8004772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004776:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8004778:	6883      	ldr	r3, [r0, #8]
 800477a:	4319      	orrs	r1, r3
 800477c:	6081      	str	r1, [r0, #8]
 800477e:	4770      	bx	lr

08004780 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8004780:	69c3      	ldr	r3, [r0, #28]
 8004782:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004784:	bf14      	ite	ne
 8004786:	2001      	movne	r0, #1
 8004788:	2000      	moveq	r0, #0
 800478a:	4770      	bx	lr

0800478c <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 800478c:	6201      	str	r1, [r0, #32]
 800478e:	4770      	bx	lr

08004790 <USART_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8004790:	f3c1 2207 	ubfx	r2, r1, #8, #8
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8004794:	b410      	push	{r4}
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8004796:	2301      	movs	r3, #1
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8004798:	b2cc      	uxtb	r4, r1
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800479a:	2a01      	cmp	r2, #1
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800479c:	fa03 f304 	lsl.w	r3, r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80047a0:	d014      	beq.n	80047cc <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80047a2:	2a02      	cmp	r2, #2
  {
    itmask &= USARTx->CR2;
 80047a4:	bf0c      	ite	eq
 80047a6:	6842      	ldreq	r2, [r0, #4]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80047a8:	6882      	ldrne	r2, [r0, #8]
 80047aa:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 80047ac:	69c2      	ldr	r2, [r0, #28]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80047ae:	b14b      	cbz	r3, 80047c4 <USART_GetITStatus+0x34>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
 80047b0:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 80047b2:	2301      	movs	r3, #1
 80047b4:	408b      	lsls	r3, r1
  bitpos &= USARTx->ISR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80047b6:	4213      	tst	r3, r2
  {
    bitstatus = SET;
 80047b8:	bf14      	ite	ne
 80047ba:	2001      	movne	r0, #1
 80047bc:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80047be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047c2:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80047c4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80047c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ca:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80047cc:	6802      	ldr	r2, [r0, #0]
 80047ce:	4013      	ands	r3, r2
 80047d0:	e7ec      	b.n	80047ac <USART_GetITStatus+0x1c>
 80047d2:	bf00      	nop

080047d4 <USART_ClearITPendingBit>:
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80047d4:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80047d6:	2301      	movs	r3, #1
 80047d8:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 80047da:	6203      	str	r3, [r0, #32]
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop

080047e0 <__aeabi_drsub>:
 80047e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80047e4:	e002      	b.n	80047ec <__adddf3>
 80047e6:	bf00      	nop

080047e8 <__aeabi_dsub>:
 80047e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080047ec <__adddf3>:
 80047ec:	b530      	push	{r4, r5, lr}
 80047ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80047f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80047f6:	ea94 0f05 	teq	r4, r5
 80047fa:	bf08      	it	eq
 80047fc:	ea90 0f02 	teqeq	r0, r2
 8004800:	bf1f      	itttt	ne
 8004802:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004806:	ea55 0c02 	orrsne.w	ip, r5, r2
 800480a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800480e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004812:	f000 80e2 	beq.w	80049da <__adddf3+0x1ee>
 8004816:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800481a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800481e:	bfb8      	it	lt
 8004820:	426d      	neglt	r5, r5
 8004822:	dd0c      	ble.n	800483e <__adddf3+0x52>
 8004824:	442c      	add	r4, r5
 8004826:	ea80 0202 	eor.w	r2, r0, r2
 800482a:	ea81 0303 	eor.w	r3, r1, r3
 800482e:	ea82 0000 	eor.w	r0, r2, r0
 8004832:	ea83 0101 	eor.w	r1, r3, r1
 8004836:	ea80 0202 	eor.w	r2, r0, r2
 800483a:	ea81 0303 	eor.w	r3, r1, r3
 800483e:	2d36      	cmp	r5, #54	; 0x36
 8004840:	bf88      	it	hi
 8004842:	bd30      	pophi	{r4, r5, pc}
 8004844:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800484c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004850:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004854:	d002      	beq.n	800485c <__adddf3+0x70>
 8004856:	4240      	negs	r0, r0
 8004858:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800485c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004860:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004864:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004868:	d002      	beq.n	8004870 <__adddf3+0x84>
 800486a:	4252      	negs	r2, r2
 800486c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004870:	ea94 0f05 	teq	r4, r5
 8004874:	f000 80a7 	beq.w	80049c6 <__adddf3+0x1da>
 8004878:	f1a4 0401 	sub.w	r4, r4, #1
 800487c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004880:	db0d      	blt.n	800489e <__adddf3+0xb2>
 8004882:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004886:	fa22 f205 	lsr.w	r2, r2, r5
 800488a:	1880      	adds	r0, r0, r2
 800488c:	f141 0100 	adc.w	r1, r1, #0
 8004890:	fa03 f20e 	lsl.w	r2, r3, lr
 8004894:	1880      	adds	r0, r0, r2
 8004896:	fa43 f305 	asr.w	r3, r3, r5
 800489a:	4159      	adcs	r1, r3
 800489c:	e00e      	b.n	80048bc <__adddf3+0xd0>
 800489e:	f1a5 0520 	sub.w	r5, r5, #32
 80048a2:	f10e 0e20 	add.w	lr, lr, #32
 80048a6:	2a01      	cmp	r2, #1
 80048a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80048ac:	bf28      	it	cs
 80048ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80048b2:	fa43 f305 	asr.w	r3, r3, r5
 80048b6:	18c0      	adds	r0, r0, r3
 80048b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80048bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80048c0:	d507      	bpl.n	80048d2 <__adddf3+0xe6>
 80048c2:	f04f 0e00 	mov.w	lr, #0
 80048c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80048ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80048ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80048d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80048d6:	d31b      	bcc.n	8004910 <__adddf3+0x124>
 80048d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80048dc:	d30c      	bcc.n	80048f8 <__adddf3+0x10c>
 80048de:	0849      	lsrs	r1, r1, #1
 80048e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80048e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80048e8:	f104 0401 	add.w	r4, r4, #1
 80048ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80048f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80048f4:	f080 809a 	bcs.w	8004a2c <__adddf3+0x240>
 80048f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80048fc:	bf08      	it	eq
 80048fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004902:	f150 0000 	adcs.w	r0, r0, #0
 8004906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800490a:	ea41 0105 	orr.w	r1, r1, r5
 800490e:	bd30      	pop	{r4, r5, pc}
 8004910:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004914:	4140      	adcs	r0, r0
 8004916:	eb41 0101 	adc.w	r1, r1, r1
 800491a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800491e:	f1a4 0401 	sub.w	r4, r4, #1
 8004922:	d1e9      	bne.n	80048f8 <__adddf3+0x10c>
 8004924:	f091 0f00 	teq	r1, #0
 8004928:	bf04      	itt	eq
 800492a:	4601      	moveq	r1, r0
 800492c:	2000      	moveq	r0, #0
 800492e:	fab1 f381 	clz	r3, r1
 8004932:	bf08      	it	eq
 8004934:	3320      	addeq	r3, #32
 8004936:	f1a3 030b 	sub.w	r3, r3, #11
 800493a:	f1b3 0220 	subs.w	r2, r3, #32
 800493e:	da0c      	bge.n	800495a <__adddf3+0x16e>
 8004940:	320c      	adds	r2, #12
 8004942:	dd08      	ble.n	8004956 <__adddf3+0x16a>
 8004944:	f102 0c14 	add.w	ip, r2, #20
 8004948:	f1c2 020c 	rsb	r2, r2, #12
 800494c:	fa01 f00c 	lsl.w	r0, r1, ip
 8004950:	fa21 f102 	lsr.w	r1, r1, r2
 8004954:	e00c      	b.n	8004970 <__adddf3+0x184>
 8004956:	f102 0214 	add.w	r2, r2, #20
 800495a:	bfd8      	it	le
 800495c:	f1c2 0c20 	rsble	ip, r2, #32
 8004960:	fa01 f102 	lsl.w	r1, r1, r2
 8004964:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004968:	bfdc      	itt	le
 800496a:	ea41 010c 	orrle.w	r1, r1, ip
 800496e:	4090      	lslle	r0, r2
 8004970:	1ae4      	subs	r4, r4, r3
 8004972:	bfa2      	ittt	ge
 8004974:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004978:	4329      	orrge	r1, r5
 800497a:	bd30      	popge	{r4, r5, pc}
 800497c:	ea6f 0404 	mvn.w	r4, r4
 8004980:	3c1f      	subs	r4, #31
 8004982:	da1c      	bge.n	80049be <__adddf3+0x1d2>
 8004984:	340c      	adds	r4, #12
 8004986:	dc0e      	bgt.n	80049a6 <__adddf3+0x1ba>
 8004988:	f104 0414 	add.w	r4, r4, #20
 800498c:	f1c4 0220 	rsb	r2, r4, #32
 8004990:	fa20 f004 	lsr.w	r0, r0, r4
 8004994:	fa01 f302 	lsl.w	r3, r1, r2
 8004998:	ea40 0003 	orr.w	r0, r0, r3
 800499c:	fa21 f304 	lsr.w	r3, r1, r4
 80049a0:	ea45 0103 	orr.w	r1, r5, r3
 80049a4:	bd30      	pop	{r4, r5, pc}
 80049a6:	f1c4 040c 	rsb	r4, r4, #12
 80049aa:	f1c4 0220 	rsb	r2, r4, #32
 80049ae:	fa20 f002 	lsr.w	r0, r0, r2
 80049b2:	fa01 f304 	lsl.w	r3, r1, r4
 80049b6:	ea40 0003 	orr.w	r0, r0, r3
 80049ba:	4629      	mov	r1, r5
 80049bc:	bd30      	pop	{r4, r5, pc}
 80049be:	fa21 f004 	lsr.w	r0, r1, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	bd30      	pop	{r4, r5, pc}
 80049c6:	f094 0f00 	teq	r4, #0
 80049ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80049ce:	bf06      	itte	eq
 80049d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80049d4:	3401      	addeq	r4, #1
 80049d6:	3d01      	subne	r5, #1
 80049d8:	e74e      	b.n	8004878 <__adddf3+0x8c>
 80049da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80049de:	bf18      	it	ne
 80049e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80049e4:	d029      	beq.n	8004a3a <__adddf3+0x24e>
 80049e6:	ea94 0f05 	teq	r4, r5
 80049ea:	bf08      	it	eq
 80049ec:	ea90 0f02 	teqeq	r0, r2
 80049f0:	d005      	beq.n	80049fe <__adddf3+0x212>
 80049f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80049f6:	bf04      	itt	eq
 80049f8:	4619      	moveq	r1, r3
 80049fa:	4610      	moveq	r0, r2
 80049fc:	bd30      	pop	{r4, r5, pc}
 80049fe:	ea91 0f03 	teq	r1, r3
 8004a02:	bf1e      	ittt	ne
 8004a04:	2100      	movne	r1, #0
 8004a06:	2000      	movne	r0, #0
 8004a08:	bd30      	popne	{r4, r5, pc}
 8004a0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004a0e:	d105      	bne.n	8004a1c <__adddf3+0x230>
 8004a10:	0040      	lsls	r0, r0, #1
 8004a12:	4149      	adcs	r1, r1
 8004a14:	bf28      	it	cs
 8004a16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004a1a:	bd30      	pop	{r4, r5, pc}
 8004a1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004a20:	bf3c      	itt	cc
 8004a22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004a26:	bd30      	popcc	{r4, r5, pc}
 8004a28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004a2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004a30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a34:	f04f 0000 	mov.w	r0, #0
 8004a38:	bd30      	pop	{r4, r5, pc}
 8004a3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004a3e:	bf1a      	itte	ne
 8004a40:	4619      	movne	r1, r3
 8004a42:	4610      	movne	r0, r2
 8004a44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004a48:	bf1c      	itt	ne
 8004a4a:	460b      	movne	r3, r1
 8004a4c:	4602      	movne	r2, r0
 8004a4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004a52:	bf06      	itte	eq
 8004a54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004a58:	ea91 0f03 	teqeq	r1, r3
 8004a5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004a60:	bd30      	pop	{r4, r5, pc}
 8004a62:	bf00      	nop

08004a64 <__aeabi_ui2d>:
 8004a64:	f090 0f00 	teq	r0, #0
 8004a68:	bf04      	itt	eq
 8004a6a:	2100      	moveq	r1, #0
 8004a6c:	4770      	bxeq	lr
 8004a6e:	b530      	push	{r4, r5, lr}
 8004a70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004a74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004a78:	f04f 0500 	mov.w	r5, #0
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	e750      	b.n	8004924 <__adddf3+0x138>
 8004a82:	bf00      	nop

08004a84 <__aeabi_i2d>:
 8004a84:	f090 0f00 	teq	r0, #0
 8004a88:	bf04      	itt	eq
 8004a8a:	2100      	moveq	r1, #0
 8004a8c:	4770      	bxeq	lr
 8004a8e:	b530      	push	{r4, r5, lr}
 8004a90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004a94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004a98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004a9c:	bf48      	it	mi
 8004a9e:	4240      	negmi	r0, r0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	e73e      	b.n	8004924 <__adddf3+0x138>
 8004aa6:	bf00      	nop

08004aa8 <__aeabi_f2d>:
 8004aa8:	0042      	lsls	r2, r0, #1
 8004aaa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8004ab2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004ab6:	bf1f      	itttt	ne
 8004ab8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004abc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004ac0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004ac4:	4770      	bxne	lr
 8004ac6:	f092 0f00 	teq	r2, #0
 8004aca:	bf14      	ite	ne
 8004acc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004ad0:	4770      	bxeq	lr
 8004ad2:	b530      	push	{r4, r5, lr}
 8004ad4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004ad8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004adc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004ae0:	e720      	b.n	8004924 <__adddf3+0x138>
 8004ae2:	bf00      	nop

08004ae4 <__aeabi_ul2d>:
 8004ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8004ae8:	bf08      	it	eq
 8004aea:	4770      	bxeq	lr
 8004aec:	b530      	push	{r4, r5, lr}
 8004aee:	f04f 0500 	mov.w	r5, #0
 8004af2:	e00a      	b.n	8004b0a <__aeabi_l2d+0x16>

08004af4 <__aeabi_l2d>:
 8004af4:	ea50 0201 	orrs.w	r2, r0, r1
 8004af8:	bf08      	it	eq
 8004afa:	4770      	bxeq	lr
 8004afc:	b530      	push	{r4, r5, lr}
 8004afe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004b02:	d502      	bpl.n	8004b0a <__aeabi_l2d+0x16>
 8004b04:	4240      	negs	r0, r0
 8004b06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004b0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004b0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004b12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004b16:	f43f aedc 	beq.w	80048d2 <__adddf3+0xe6>
 8004b1a:	f04f 0203 	mov.w	r2, #3
 8004b1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004b22:	bf18      	it	ne
 8004b24:	3203      	addne	r2, #3
 8004b26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004b2a:	bf18      	it	ne
 8004b2c:	3203      	addne	r2, #3
 8004b2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004b32:	f1c2 0320 	rsb	r3, r2, #32
 8004b36:	fa00 fc03 	lsl.w	ip, r0, r3
 8004b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8004b3e:	fa01 fe03 	lsl.w	lr, r1, r3
 8004b42:	ea40 000e 	orr.w	r0, r0, lr
 8004b46:	fa21 f102 	lsr.w	r1, r1, r2
 8004b4a:	4414      	add	r4, r2
 8004b4c:	e6c1      	b.n	80048d2 <__adddf3+0xe6>
 8004b4e:	bf00      	nop

08004b50 <__aeabi_dmul>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004b56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004b5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004b5e:	bf1d      	ittte	ne
 8004b60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004b64:	ea94 0f0c 	teqne	r4, ip
 8004b68:	ea95 0f0c 	teqne	r5, ip
 8004b6c:	f000 f8de 	bleq	8004d2c <__aeabi_dmul+0x1dc>
 8004b70:	442c      	add	r4, r5
 8004b72:	ea81 0603 	eor.w	r6, r1, r3
 8004b76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004b7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004b7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004b82:	bf18      	it	ne
 8004b84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004b88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b90:	d038      	beq.n	8004c04 <__aeabi_dmul+0xb4>
 8004b92:	fba0 ce02 	umull	ip, lr, r0, r2
 8004b96:	f04f 0500 	mov.w	r5, #0
 8004b9a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004b9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004ba2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004ba6:	f04f 0600 	mov.w	r6, #0
 8004baa:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004bae:	f09c 0f00 	teq	ip, #0
 8004bb2:	bf18      	it	ne
 8004bb4:	f04e 0e01 	orrne.w	lr, lr, #1
 8004bb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004bbc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004bc0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004bc4:	d204      	bcs.n	8004bd0 <__aeabi_dmul+0x80>
 8004bc6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004bca:	416d      	adcs	r5, r5
 8004bcc:	eb46 0606 	adc.w	r6, r6, r6
 8004bd0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004bd4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004bd8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004bdc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004be0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004be4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004be8:	bf88      	it	hi
 8004bea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004bee:	d81e      	bhi.n	8004c2e <__aeabi_dmul+0xde>
 8004bf0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004bf4:	bf08      	it	eq
 8004bf6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004bfa:	f150 0000 	adcs.w	r0, r0, #0
 8004bfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004c08:	ea46 0101 	orr.w	r1, r6, r1
 8004c0c:	ea40 0002 	orr.w	r0, r0, r2
 8004c10:	ea81 0103 	eor.w	r1, r1, r3
 8004c14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004c18:	bfc2      	ittt	gt
 8004c1a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004c1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004c22:	bd70      	popgt	{r4, r5, r6, pc}
 8004c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004c28:	f04f 0e00 	mov.w	lr, #0
 8004c2c:	3c01      	subs	r4, #1
 8004c2e:	f300 80ab 	bgt.w	8004d88 <__aeabi_dmul+0x238>
 8004c32:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004c36:	bfde      	ittt	le
 8004c38:	2000      	movle	r0, #0
 8004c3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004c3e:	bd70      	pople	{r4, r5, r6, pc}
 8004c40:	f1c4 0400 	rsb	r4, r4, #0
 8004c44:	3c20      	subs	r4, #32
 8004c46:	da35      	bge.n	8004cb4 <__aeabi_dmul+0x164>
 8004c48:	340c      	adds	r4, #12
 8004c4a:	dc1b      	bgt.n	8004c84 <__aeabi_dmul+0x134>
 8004c4c:	f104 0414 	add.w	r4, r4, #20
 8004c50:	f1c4 0520 	rsb	r5, r4, #32
 8004c54:	fa00 f305 	lsl.w	r3, r0, r5
 8004c58:	fa20 f004 	lsr.w	r0, r0, r4
 8004c5c:	fa01 f205 	lsl.w	r2, r1, r5
 8004c60:	ea40 0002 	orr.w	r0, r0, r2
 8004c64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004c68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004c6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004c70:	fa21 f604 	lsr.w	r6, r1, r4
 8004c74:	eb42 0106 	adc.w	r1, r2, r6
 8004c78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004c7c:	bf08      	it	eq
 8004c7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f1c4 040c 	rsb	r4, r4, #12
 8004c88:	f1c4 0520 	rsb	r5, r4, #32
 8004c8c:	fa00 f304 	lsl.w	r3, r0, r4
 8004c90:	fa20 f005 	lsr.w	r0, r0, r5
 8004c94:	fa01 f204 	lsl.w	r2, r1, r4
 8004c98:	ea40 0002 	orr.w	r0, r0, r2
 8004c9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004ca0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004ca4:	f141 0100 	adc.w	r1, r1, #0
 8004ca8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004cac:	bf08      	it	eq
 8004cae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	f1c4 0520 	rsb	r5, r4, #32
 8004cb8:	fa00 f205 	lsl.w	r2, r0, r5
 8004cbc:	ea4e 0e02 	orr.w	lr, lr, r2
 8004cc0:	fa20 f304 	lsr.w	r3, r0, r4
 8004cc4:	fa01 f205 	lsl.w	r2, r1, r5
 8004cc8:	ea43 0302 	orr.w	r3, r3, r2
 8004ccc:	fa21 f004 	lsr.w	r0, r1, r4
 8004cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004cd4:	fa21 f204 	lsr.w	r2, r1, r4
 8004cd8:	ea20 0002 	bic.w	r0, r0, r2
 8004cdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004ce0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004ce4:	bf08      	it	eq
 8004ce6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f094 0f00 	teq	r4, #0
 8004cf0:	d10f      	bne.n	8004d12 <__aeabi_dmul+0x1c2>
 8004cf2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004cf6:	0040      	lsls	r0, r0, #1
 8004cf8:	eb41 0101 	adc.w	r1, r1, r1
 8004cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004d00:	bf08      	it	eq
 8004d02:	3c01      	subeq	r4, #1
 8004d04:	d0f7      	beq.n	8004cf6 <__aeabi_dmul+0x1a6>
 8004d06:	ea41 0106 	orr.w	r1, r1, r6
 8004d0a:	f095 0f00 	teq	r5, #0
 8004d0e:	bf18      	it	ne
 8004d10:	4770      	bxne	lr
 8004d12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004d16:	0052      	lsls	r2, r2, #1
 8004d18:	eb43 0303 	adc.w	r3, r3, r3
 8004d1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004d20:	bf08      	it	eq
 8004d22:	3d01      	subeq	r5, #1
 8004d24:	d0f7      	beq.n	8004d16 <__aeabi_dmul+0x1c6>
 8004d26:	ea43 0306 	orr.w	r3, r3, r6
 8004d2a:	4770      	bx	lr
 8004d2c:	ea94 0f0c 	teq	r4, ip
 8004d30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004d34:	bf18      	it	ne
 8004d36:	ea95 0f0c 	teqne	r5, ip
 8004d3a:	d00c      	beq.n	8004d56 <__aeabi_dmul+0x206>
 8004d3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004d40:	bf18      	it	ne
 8004d42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004d46:	d1d1      	bne.n	8004cec <__aeabi_dmul+0x19c>
 8004d48:	ea81 0103 	eor.w	r1, r1, r3
 8004d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004d50:	f04f 0000 	mov.w	r0, #0
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
 8004d56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004d5a:	bf06      	itte	eq
 8004d5c:	4610      	moveq	r0, r2
 8004d5e:	4619      	moveq	r1, r3
 8004d60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004d64:	d019      	beq.n	8004d9a <__aeabi_dmul+0x24a>
 8004d66:	ea94 0f0c 	teq	r4, ip
 8004d6a:	d102      	bne.n	8004d72 <__aeabi_dmul+0x222>
 8004d6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004d70:	d113      	bne.n	8004d9a <__aeabi_dmul+0x24a>
 8004d72:	ea95 0f0c 	teq	r5, ip
 8004d76:	d105      	bne.n	8004d84 <__aeabi_dmul+0x234>
 8004d78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004d7c:	bf1c      	itt	ne
 8004d7e:	4610      	movne	r0, r2
 8004d80:	4619      	movne	r1, r3
 8004d82:	d10a      	bne.n	8004d9a <__aeabi_dmul+0x24a>
 8004d84:	ea81 0103 	eor.w	r1, r1, r3
 8004d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004d8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004d90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d94:	f04f 0000 	mov.w	r0, #0
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004d9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8004da2:	bd70      	pop	{r4, r5, r6, pc}

08004da4 <__aeabi_ddiv>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004daa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004dae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004db2:	bf1d      	ittte	ne
 8004db4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004db8:	ea94 0f0c 	teqne	r4, ip
 8004dbc:	ea95 0f0c 	teqne	r5, ip
 8004dc0:	f000 f8a7 	bleq	8004f12 <__aeabi_ddiv+0x16e>
 8004dc4:	eba4 0405 	sub.w	r4, r4, r5
 8004dc8:	ea81 0e03 	eor.w	lr, r1, r3
 8004dcc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004dd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004dd4:	f000 8088 	beq.w	8004ee8 <__aeabi_ddiv+0x144>
 8004dd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004ddc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004de0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004de4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004de8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004dec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004df0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004df4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004df8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004dfc:	429d      	cmp	r5, r3
 8004dfe:	bf08      	it	eq
 8004e00:	4296      	cmpeq	r6, r2
 8004e02:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004e06:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004e0a:	d202      	bcs.n	8004e12 <__aeabi_ddiv+0x6e>
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8004e12:	1ab6      	subs	r6, r6, r2
 8004e14:	eb65 0503 	sbc.w	r5, r5, r3
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8004e1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004e22:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004e26:	ebb6 0e02 	subs.w	lr, r6, r2
 8004e2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004e2e:	bf22      	ittt	cs
 8004e30:	1ab6      	subcs	r6, r6, r2
 8004e32:	4675      	movcs	r5, lr
 8004e34:	ea40 000c 	orrcs.w	r0, r0, ip
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8004e3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004e42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004e46:	bf22      	ittt	cs
 8004e48:	1ab6      	subcs	r6, r6, r2
 8004e4a:	4675      	movcs	r5, lr
 8004e4c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	ea4f 0232 	mov.w	r2, r2, rrx
 8004e56:	ebb6 0e02 	subs.w	lr, r6, r2
 8004e5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004e5e:	bf22      	ittt	cs
 8004e60:	1ab6      	subcs	r6, r6, r2
 8004e62:	4675      	movcs	r5, lr
 8004e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	ea4f 0232 	mov.w	r2, r2, rrx
 8004e6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004e72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004e76:	bf22      	ittt	cs
 8004e78:	1ab6      	subcs	r6, r6, r2
 8004e7a:	4675      	movcs	r5, lr
 8004e7c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004e80:	ea55 0e06 	orrs.w	lr, r5, r6
 8004e84:	d018      	beq.n	8004eb8 <__aeabi_ddiv+0x114>
 8004e86:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004e8a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004e8e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004e92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004e96:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004e9a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004e9e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8004ea2:	d1c0      	bne.n	8004e26 <__aeabi_ddiv+0x82>
 8004ea4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004ea8:	d10b      	bne.n	8004ec2 <__aeabi_ddiv+0x11e>
 8004eaa:	ea41 0100 	orr.w	r1, r1, r0
 8004eae:	f04f 0000 	mov.w	r0, #0
 8004eb2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004eb6:	e7b6      	b.n	8004e26 <__aeabi_ddiv+0x82>
 8004eb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004ebc:	bf04      	itt	eq
 8004ebe:	4301      	orreq	r1, r0
 8004ec0:	2000      	moveq	r0, #0
 8004ec2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004ec6:	bf88      	it	hi
 8004ec8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004ecc:	f63f aeaf 	bhi.w	8004c2e <__aeabi_dmul+0xde>
 8004ed0:	ebb5 0c03 	subs.w	ip, r5, r3
 8004ed4:	bf04      	itt	eq
 8004ed6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004eda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004ede:	f150 0000 	adcs.w	r0, r0, #0
 8004ee2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004eec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004ef0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004ef4:	bfc2      	ittt	gt
 8004ef6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004efa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004efe:	bd70      	popgt	{r4, r5, r6, pc}
 8004f00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f04:	f04f 0e00 	mov.w	lr, #0
 8004f08:	3c01      	subs	r4, #1
 8004f0a:	e690      	b.n	8004c2e <__aeabi_dmul+0xde>
 8004f0c:	ea45 0e06 	orr.w	lr, r5, r6
 8004f10:	e68d      	b.n	8004c2e <__aeabi_dmul+0xde>
 8004f12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004f16:	ea94 0f0c 	teq	r4, ip
 8004f1a:	bf08      	it	eq
 8004f1c:	ea95 0f0c 	teqeq	r5, ip
 8004f20:	f43f af3b 	beq.w	8004d9a <__aeabi_dmul+0x24a>
 8004f24:	ea94 0f0c 	teq	r4, ip
 8004f28:	d10a      	bne.n	8004f40 <__aeabi_ddiv+0x19c>
 8004f2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004f2e:	f47f af34 	bne.w	8004d9a <__aeabi_dmul+0x24a>
 8004f32:	ea95 0f0c 	teq	r5, ip
 8004f36:	f47f af25 	bne.w	8004d84 <__aeabi_dmul+0x234>
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	e72c      	b.n	8004d9a <__aeabi_dmul+0x24a>
 8004f40:	ea95 0f0c 	teq	r5, ip
 8004f44:	d106      	bne.n	8004f54 <__aeabi_ddiv+0x1b0>
 8004f46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004f4a:	f43f aefd 	beq.w	8004d48 <__aeabi_dmul+0x1f8>
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	e722      	b.n	8004d9a <__aeabi_dmul+0x24a>
 8004f54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004f58:	bf18      	it	ne
 8004f5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004f5e:	f47f aec5 	bne.w	8004cec <__aeabi_dmul+0x19c>
 8004f62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004f66:	f47f af0d 	bne.w	8004d84 <__aeabi_dmul+0x234>
 8004f6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004f6e:	f47f aeeb 	bne.w	8004d48 <__aeabi_dmul+0x1f8>
 8004f72:	e712      	b.n	8004d9a <__aeabi_dmul+0x24a>

08004f74 <__aeabi_d2iz>:
 8004f74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004f7c:	d215      	bcs.n	8004faa <__aeabi_d2iz+0x36>
 8004f7e:	d511      	bpl.n	8004fa4 <__aeabi_d2iz+0x30>
 8004f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004f88:	d912      	bls.n	8004fb0 <__aeabi_d2iz+0x3c>
 8004f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004f96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004f9a:	fa23 f002 	lsr.w	r0, r3, r2
 8004f9e:	bf18      	it	ne
 8004fa0:	4240      	negne	r0, r0
 8004fa2:	4770      	bx	lr
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	4770      	bx	lr
 8004faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004fae:	d105      	bne.n	8004fbc <__aeabi_d2iz+0x48>
 8004fb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004fb4:	bf08      	it	eq
 8004fb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004fba:	4770      	bx	lr
 8004fbc:	f04f 0000 	mov.w	r0, #0
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop

08004fc4 <__aeabi_d2uiz>:
 8004fc4:	004a      	lsls	r2, r1, #1
 8004fc6:	d211      	bcs.n	8004fec <__aeabi_d2uiz+0x28>
 8004fc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004fcc:	d211      	bcs.n	8004ff2 <__aeabi_d2uiz+0x2e>
 8004fce:	d50d      	bpl.n	8004fec <__aeabi_d2uiz+0x28>
 8004fd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004fd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004fd8:	d40e      	bmi.n	8004ff8 <__aeabi_d2uiz+0x34>
 8004fda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004fe6:	fa23 f002 	lsr.w	r0, r3, r2
 8004fea:	4770      	bx	lr
 8004fec:	f04f 0000 	mov.w	r0, #0
 8004ff0:	4770      	bx	lr
 8004ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004ff6:	d102      	bne.n	8004ffe <__aeabi_d2uiz+0x3a>
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	4770      	bx	lr
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	4770      	bx	lr

08005004 <__aeabi_d2f>:
 8005004:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005008:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800500c:	bf24      	itt	cs
 800500e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005012:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005016:	d90d      	bls.n	8005034 <__aeabi_d2f+0x30>
 8005018:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800501c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005020:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005024:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005028:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800502c:	bf08      	it	eq
 800502e:	f020 0001 	biceq.w	r0, r0, #1
 8005032:	4770      	bx	lr
 8005034:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005038:	d121      	bne.n	800507e <__aeabi_d2f+0x7a>
 800503a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800503e:	bfbc      	itt	lt
 8005040:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005044:	4770      	bxlt	lr
 8005046:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800504a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800504e:	f1c2 0218 	rsb	r2, r2, #24
 8005052:	f1c2 0c20 	rsb	ip, r2, #32
 8005056:	fa10 f30c 	lsls.w	r3, r0, ip
 800505a:	fa20 f002 	lsr.w	r0, r0, r2
 800505e:	bf18      	it	ne
 8005060:	f040 0001 	orrne.w	r0, r0, #1
 8005064:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005068:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800506c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005070:	ea40 000c 	orr.w	r0, r0, ip
 8005074:	fa23 f302 	lsr.w	r3, r3, r2
 8005078:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800507c:	e7cc      	b.n	8005018 <__aeabi_d2f+0x14>
 800507e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005082:	d107      	bne.n	8005094 <__aeabi_d2f+0x90>
 8005084:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005088:	bf1e      	ittt	ne
 800508a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800508e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005092:	4770      	bxne	lr
 8005094:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005098:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800509c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop

080050a4 <__aeabi_ldivmod>:
 80050a4:	b97b      	cbnz	r3, 80050c6 <__aeabi_ldivmod+0x22>
 80050a6:	b972      	cbnz	r2, 80050c6 <__aeabi_ldivmod+0x22>
 80050a8:	2900      	cmp	r1, #0
 80050aa:	bfbe      	ittt	lt
 80050ac:	2000      	movlt	r0, #0
 80050ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80050b2:	e006      	blt.n	80050c2 <__aeabi_ldivmod+0x1e>
 80050b4:	bf08      	it	eq
 80050b6:	2800      	cmpeq	r0, #0
 80050b8:	bf1c      	itt	ne
 80050ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80050be:	f04f 30ff 	movne.w	r0, #4294967295
 80050c2:	f000 b83b 	b.w	800513c <__aeabi_idiv0>
 80050c6:	b082      	sub	sp, #8
 80050c8:	46ec      	mov	ip, sp
 80050ca:	e92d 5000 	stmdb	sp!, {ip, lr}
 80050ce:	f000 f805 	bl	80050dc <__gnu_ldivmod_helper>
 80050d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80050d6:	b002      	add	sp, #8
 80050d8:	bc0c      	pop	{r2, r3}
 80050da:	4770      	bx	lr

080050dc <__gnu_ldivmod_helper>:
 80050dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e0:	9c06      	ldr	r4, [sp, #24]
 80050e2:	4615      	mov	r5, r2
 80050e4:	4606      	mov	r6, r0
 80050e6:	460f      	mov	r7, r1
 80050e8:	4698      	mov	r8, r3
 80050ea:	f000 f829 	bl	8005140 <__divdi3>
 80050ee:	fb05 f301 	mul.w	r3, r5, r1
 80050f2:	fb00 3808 	mla	r8, r0, r8, r3
 80050f6:	fba5 2300 	umull	r2, r3, r5, r0
 80050fa:	1ab2      	subs	r2, r6, r2
 80050fc:	4443      	add	r3, r8
 80050fe:	eb67 0303 	sbc.w	r3, r7, r3
 8005102:	e9c4 2300 	strd	r2, r3, [r4]
 8005106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800510a:	bf00      	nop

0800510c <__gnu_uldivmod_helper>:
 800510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005110:	9c06      	ldr	r4, [sp, #24]
 8005112:	4690      	mov	r8, r2
 8005114:	4606      	mov	r6, r0
 8005116:	460f      	mov	r7, r1
 8005118:	461d      	mov	r5, r3
 800511a:	f000 f95f 	bl	80053dc <__udivdi3>
 800511e:	fb00 f505 	mul.w	r5, r0, r5
 8005122:	fba0 2308 	umull	r2, r3, r0, r8
 8005126:	fb08 5501 	mla	r5, r8, r1, r5
 800512a:	1ab2      	subs	r2, r6, r2
 800512c:	442b      	add	r3, r5
 800512e:	eb67 0303 	sbc.w	r3, r7, r3
 8005132:	e9c4 2300 	strd	r2, r3, [r4]
 8005136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513a:	bf00      	nop

0800513c <__aeabi_idiv0>:
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop

08005140 <__divdi3>:
 8005140:	2900      	cmp	r1, #0
 8005142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005146:	f2c0 80a6 	blt.w	8005296 <__divdi3+0x156>
 800514a:	2600      	movs	r6, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	f2c0 809c 	blt.w	800528a <__divdi3+0x14a>
 8005152:	4688      	mov	r8, r1
 8005154:	4694      	mov	ip, r2
 8005156:	469e      	mov	lr, r3
 8005158:	4615      	mov	r5, r2
 800515a:	4604      	mov	r4, r0
 800515c:	460f      	mov	r7, r1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d13d      	bne.n	80051de <__divdi3+0x9e>
 8005162:	428a      	cmp	r2, r1
 8005164:	d959      	bls.n	800521a <__divdi3+0xda>
 8005166:	fab2 f382 	clz	r3, r2
 800516a:	b13b      	cbz	r3, 800517c <__divdi3+0x3c>
 800516c:	f1c3 0220 	rsb	r2, r3, #32
 8005170:	409f      	lsls	r7, r3
 8005172:	fa20 f202 	lsr.w	r2, r0, r2
 8005176:	409d      	lsls	r5, r3
 8005178:	4317      	orrs	r7, r2
 800517a:	409c      	lsls	r4, r3
 800517c:	0c29      	lsrs	r1, r5, #16
 800517e:	0c22      	lsrs	r2, r4, #16
 8005180:	fbb7 fef1 	udiv	lr, r7, r1
 8005184:	b2a8      	uxth	r0, r5
 8005186:	fb01 771e 	mls	r7, r1, lr, r7
 800518a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800518e:	fb00 f30e 	mul.w	r3, r0, lr
 8005192:	42bb      	cmp	r3, r7
 8005194:	d90a      	bls.n	80051ac <__divdi3+0x6c>
 8005196:	197f      	adds	r7, r7, r5
 8005198:	f10e 32ff 	add.w	r2, lr, #4294967295
 800519c:	f080 8105 	bcs.w	80053aa <__divdi3+0x26a>
 80051a0:	42bb      	cmp	r3, r7
 80051a2:	f240 8102 	bls.w	80053aa <__divdi3+0x26a>
 80051a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80051aa:	442f      	add	r7, r5
 80051ac:	1aff      	subs	r7, r7, r3
 80051ae:	b2a4      	uxth	r4, r4
 80051b0:	fbb7 f3f1 	udiv	r3, r7, r1
 80051b4:	fb01 7713 	mls	r7, r1, r3, r7
 80051b8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80051bc:	fb00 f003 	mul.w	r0, r0, r3
 80051c0:	42b8      	cmp	r0, r7
 80051c2:	d908      	bls.n	80051d6 <__divdi3+0x96>
 80051c4:	197f      	adds	r7, r7, r5
 80051c6:	f103 32ff 	add.w	r2, r3, #4294967295
 80051ca:	f080 80f0 	bcs.w	80053ae <__divdi3+0x26e>
 80051ce:	42b8      	cmp	r0, r7
 80051d0:	f240 80ed 	bls.w	80053ae <__divdi3+0x26e>
 80051d4:	3b02      	subs	r3, #2
 80051d6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80051da:	2200      	movs	r2, #0
 80051dc:	e003      	b.n	80051e6 <__divdi3+0xa6>
 80051de:	428b      	cmp	r3, r1
 80051e0:	d90f      	bls.n	8005202 <__divdi3+0xc2>
 80051e2:	2200      	movs	r2, #0
 80051e4:	4613      	mov	r3, r2
 80051e6:	1c34      	adds	r4, r6, #0
 80051e8:	bf18      	it	ne
 80051ea:	2401      	movne	r4, #1
 80051ec:	4260      	negs	r0, r4
 80051ee:	f04f 0500 	mov.w	r5, #0
 80051f2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80051f6:	4058      	eors	r0, r3
 80051f8:	4051      	eors	r1, r2
 80051fa:	1900      	adds	r0, r0, r4
 80051fc:	4169      	adcs	r1, r5
 80051fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005202:	fab3 f283 	clz	r2, r3
 8005206:	2a00      	cmp	r2, #0
 8005208:	f040 8086 	bne.w	8005318 <__divdi3+0x1d8>
 800520c:	428b      	cmp	r3, r1
 800520e:	d302      	bcc.n	8005216 <__divdi3+0xd6>
 8005210:	4584      	cmp	ip, r0
 8005212:	f200 80db 	bhi.w	80053cc <__divdi3+0x28c>
 8005216:	2301      	movs	r3, #1
 8005218:	e7e5      	b.n	80051e6 <__divdi3+0xa6>
 800521a:	b912      	cbnz	r2, 8005222 <__divdi3+0xe2>
 800521c:	2301      	movs	r3, #1
 800521e:	fbb3 f5f2 	udiv	r5, r3, r2
 8005222:	fab5 f085 	clz	r0, r5
 8005226:	2800      	cmp	r0, #0
 8005228:	d13b      	bne.n	80052a2 <__divdi3+0x162>
 800522a:	1b78      	subs	r0, r7, r5
 800522c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005230:	fa1f fc85 	uxth.w	ip, r5
 8005234:	2201      	movs	r2, #1
 8005236:	fbb0 f8fe 	udiv	r8, r0, lr
 800523a:	0c21      	lsrs	r1, r4, #16
 800523c:	fb0e 0718 	mls	r7, lr, r8, r0
 8005240:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8005244:	fb0c f308 	mul.w	r3, ip, r8
 8005248:	42bb      	cmp	r3, r7
 800524a:	d907      	bls.n	800525c <__divdi3+0x11c>
 800524c:	197f      	adds	r7, r7, r5
 800524e:	f108 31ff 	add.w	r1, r8, #4294967295
 8005252:	d202      	bcs.n	800525a <__divdi3+0x11a>
 8005254:	42bb      	cmp	r3, r7
 8005256:	f200 80bd 	bhi.w	80053d4 <__divdi3+0x294>
 800525a:	4688      	mov	r8, r1
 800525c:	1aff      	subs	r7, r7, r3
 800525e:	b2a4      	uxth	r4, r4
 8005260:	fbb7 f3fe 	udiv	r3, r7, lr
 8005264:	fb0e 7713 	mls	r7, lr, r3, r7
 8005268:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800526c:	fb0c fc03 	mul.w	ip, ip, r3
 8005270:	45bc      	cmp	ip, r7
 8005272:	d907      	bls.n	8005284 <__divdi3+0x144>
 8005274:	197f      	adds	r7, r7, r5
 8005276:	f103 31ff 	add.w	r1, r3, #4294967295
 800527a:	d202      	bcs.n	8005282 <__divdi3+0x142>
 800527c:	45bc      	cmp	ip, r7
 800527e:	f200 80a7 	bhi.w	80053d0 <__divdi3+0x290>
 8005282:	460b      	mov	r3, r1
 8005284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005288:	e7ad      	b.n	80051e6 <__divdi3+0xa6>
 800528a:	4252      	negs	r2, r2
 800528c:	ea6f 0606 	mvn.w	r6, r6
 8005290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005294:	e75d      	b.n	8005152 <__divdi3+0x12>
 8005296:	4240      	negs	r0, r0
 8005298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800529c:	f04f 36ff 	mov.w	r6, #4294967295
 80052a0:	e754      	b.n	800514c <__divdi3+0xc>
 80052a2:	f1c0 0220 	rsb	r2, r0, #32
 80052a6:	fa24 f102 	lsr.w	r1, r4, r2
 80052aa:	fa07 f300 	lsl.w	r3, r7, r0
 80052ae:	4085      	lsls	r5, r0
 80052b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80052b4:	40d7      	lsrs	r7, r2
 80052b6:	4319      	orrs	r1, r3
 80052b8:	fbb7 f2fe 	udiv	r2, r7, lr
 80052bc:	0c0b      	lsrs	r3, r1, #16
 80052be:	fb0e 7712 	mls	r7, lr, r2, r7
 80052c2:	fa1f fc85 	uxth.w	ip, r5
 80052c6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80052ca:	fb0c f702 	mul.w	r7, ip, r2
 80052ce:	429f      	cmp	r7, r3
 80052d0:	fa04 f400 	lsl.w	r4, r4, r0
 80052d4:	d907      	bls.n	80052e6 <__divdi3+0x1a6>
 80052d6:	195b      	adds	r3, r3, r5
 80052d8:	f102 30ff 	add.w	r0, r2, #4294967295
 80052dc:	d274      	bcs.n	80053c8 <__divdi3+0x288>
 80052de:	429f      	cmp	r7, r3
 80052e0:	d972      	bls.n	80053c8 <__divdi3+0x288>
 80052e2:	3a02      	subs	r2, #2
 80052e4:	442b      	add	r3, r5
 80052e6:	1bdf      	subs	r7, r3, r7
 80052e8:	b289      	uxth	r1, r1
 80052ea:	fbb7 f8fe 	udiv	r8, r7, lr
 80052ee:	fb0e 7318 	mls	r3, lr, r8, r7
 80052f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80052f6:	fb0c f708 	mul.w	r7, ip, r8
 80052fa:	429f      	cmp	r7, r3
 80052fc:	d908      	bls.n	8005310 <__divdi3+0x1d0>
 80052fe:	195b      	adds	r3, r3, r5
 8005300:	f108 31ff 	add.w	r1, r8, #4294967295
 8005304:	d25c      	bcs.n	80053c0 <__divdi3+0x280>
 8005306:	429f      	cmp	r7, r3
 8005308:	d95a      	bls.n	80053c0 <__divdi3+0x280>
 800530a:	f1a8 0802 	sub.w	r8, r8, #2
 800530e:	442b      	add	r3, r5
 8005310:	1bd8      	subs	r0, r3, r7
 8005312:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8005316:	e78e      	b.n	8005236 <__divdi3+0xf6>
 8005318:	f1c2 0320 	rsb	r3, r2, #32
 800531c:	fa2c f103 	lsr.w	r1, ip, r3
 8005320:	fa0e fe02 	lsl.w	lr, lr, r2
 8005324:	fa20 f703 	lsr.w	r7, r0, r3
 8005328:	ea41 0e0e 	orr.w	lr, r1, lr
 800532c:	fa08 f002 	lsl.w	r0, r8, r2
 8005330:	fa28 f103 	lsr.w	r1, r8, r3
 8005334:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8005338:	4338      	orrs	r0, r7
 800533a:	fbb1 f8f5 	udiv	r8, r1, r5
 800533e:	0c03      	lsrs	r3, r0, #16
 8005340:	fb05 1118 	mls	r1, r5, r8, r1
 8005344:	fa1f f78e 	uxth.w	r7, lr
 8005348:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800534c:	fb07 f308 	mul.w	r3, r7, r8
 8005350:	428b      	cmp	r3, r1
 8005352:	fa0c fc02 	lsl.w	ip, ip, r2
 8005356:	d909      	bls.n	800536c <__divdi3+0x22c>
 8005358:	eb11 010e 	adds.w	r1, r1, lr
 800535c:	f108 39ff 	add.w	r9, r8, #4294967295
 8005360:	d230      	bcs.n	80053c4 <__divdi3+0x284>
 8005362:	428b      	cmp	r3, r1
 8005364:	d92e      	bls.n	80053c4 <__divdi3+0x284>
 8005366:	f1a8 0802 	sub.w	r8, r8, #2
 800536a:	4471      	add	r1, lr
 800536c:	1ac9      	subs	r1, r1, r3
 800536e:	b280      	uxth	r0, r0
 8005370:	fbb1 f3f5 	udiv	r3, r1, r5
 8005374:	fb05 1113 	mls	r1, r5, r3, r1
 8005378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800537c:	fb07 f703 	mul.w	r7, r7, r3
 8005380:	428f      	cmp	r7, r1
 8005382:	d908      	bls.n	8005396 <__divdi3+0x256>
 8005384:	eb11 010e 	adds.w	r1, r1, lr
 8005388:	f103 30ff 	add.w	r0, r3, #4294967295
 800538c:	d216      	bcs.n	80053bc <__divdi3+0x27c>
 800538e:	428f      	cmp	r7, r1
 8005390:	d914      	bls.n	80053bc <__divdi3+0x27c>
 8005392:	3b02      	subs	r3, #2
 8005394:	4471      	add	r1, lr
 8005396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800539a:	1bc9      	subs	r1, r1, r7
 800539c:	fba3 890c 	umull	r8, r9, r3, ip
 80053a0:	4549      	cmp	r1, r9
 80053a2:	d309      	bcc.n	80053b8 <__divdi3+0x278>
 80053a4:	d005      	beq.n	80053b2 <__divdi3+0x272>
 80053a6:	2200      	movs	r2, #0
 80053a8:	e71d      	b.n	80051e6 <__divdi3+0xa6>
 80053aa:	4696      	mov	lr, r2
 80053ac:	e6fe      	b.n	80051ac <__divdi3+0x6c>
 80053ae:	4613      	mov	r3, r2
 80053b0:	e711      	b.n	80051d6 <__divdi3+0x96>
 80053b2:	4094      	lsls	r4, r2
 80053b4:	4544      	cmp	r4, r8
 80053b6:	d2f6      	bcs.n	80053a6 <__divdi3+0x266>
 80053b8:	3b01      	subs	r3, #1
 80053ba:	e7f4      	b.n	80053a6 <__divdi3+0x266>
 80053bc:	4603      	mov	r3, r0
 80053be:	e7ea      	b.n	8005396 <__divdi3+0x256>
 80053c0:	4688      	mov	r8, r1
 80053c2:	e7a5      	b.n	8005310 <__divdi3+0x1d0>
 80053c4:	46c8      	mov	r8, r9
 80053c6:	e7d1      	b.n	800536c <__divdi3+0x22c>
 80053c8:	4602      	mov	r2, r0
 80053ca:	e78c      	b.n	80052e6 <__divdi3+0x1a6>
 80053cc:	4613      	mov	r3, r2
 80053ce:	e70a      	b.n	80051e6 <__divdi3+0xa6>
 80053d0:	3b02      	subs	r3, #2
 80053d2:	e757      	b.n	8005284 <__divdi3+0x144>
 80053d4:	f1a8 0802 	sub.w	r8, r8, #2
 80053d8:	442f      	add	r7, r5
 80053da:	e73f      	b.n	800525c <__divdi3+0x11c>

080053dc <__udivdi3>:
 80053dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d144      	bne.n	800546e <__udivdi3+0x92>
 80053e4:	428a      	cmp	r2, r1
 80053e6:	4615      	mov	r5, r2
 80053e8:	4604      	mov	r4, r0
 80053ea:	d94f      	bls.n	800548c <__udivdi3+0xb0>
 80053ec:	fab2 f782 	clz	r7, r2
 80053f0:	460e      	mov	r6, r1
 80053f2:	b14f      	cbz	r7, 8005408 <__udivdi3+0x2c>
 80053f4:	f1c7 0320 	rsb	r3, r7, #32
 80053f8:	40b9      	lsls	r1, r7
 80053fa:	fa20 f603 	lsr.w	r6, r0, r3
 80053fe:	fa02 f507 	lsl.w	r5, r2, r7
 8005402:	430e      	orrs	r6, r1
 8005404:	fa00 f407 	lsl.w	r4, r0, r7
 8005408:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800540c:	0c23      	lsrs	r3, r4, #16
 800540e:	fbb6 f0fe 	udiv	r0, r6, lr
 8005412:	b2af      	uxth	r7, r5
 8005414:	fb0e 6110 	mls	r1, lr, r0, r6
 8005418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800541c:	fb07 f100 	mul.w	r1, r7, r0
 8005420:	4299      	cmp	r1, r3
 8005422:	d909      	bls.n	8005438 <__udivdi3+0x5c>
 8005424:	195b      	adds	r3, r3, r5
 8005426:	f100 32ff 	add.w	r2, r0, #4294967295
 800542a:	f080 80ec 	bcs.w	8005606 <__udivdi3+0x22a>
 800542e:	4299      	cmp	r1, r3
 8005430:	f240 80e9 	bls.w	8005606 <__udivdi3+0x22a>
 8005434:	3802      	subs	r0, #2
 8005436:	442b      	add	r3, r5
 8005438:	1a5a      	subs	r2, r3, r1
 800543a:	b2a4      	uxth	r4, r4
 800543c:	fbb2 f3fe 	udiv	r3, r2, lr
 8005440:	fb0e 2213 	mls	r2, lr, r3, r2
 8005444:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8005448:	fb07 f703 	mul.w	r7, r7, r3
 800544c:	4297      	cmp	r7, r2
 800544e:	d908      	bls.n	8005462 <__udivdi3+0x86>
 8005450:	1952      	adds	r2, r2, r5
 8005452:	f103 31ff 	add.w	r1, r3, #4294967295
 8005456:	f080 80d8 	bcs.w	800560a <__udivdi3+0x22e>
 800545a:	4297      	cmp	r7, r2
 800545c:	f240 80d5 	bls.w	800560a <__udivdi3+0x22e>
 8005460:	3b02      	subs	r3, #2
 8005462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005466:	2600      	movs	r6, #0
 8005468:	4631      	mov	r1, r6
 800546a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800546e:	428b      	cmp	r3, r1
 8005470:	d847      	bhi.n	8005502 <__udivdi3+0x126>
 8005472:	fab3 f683 	clz	r6, r3
 8005476:	2e00      	cmp	r6, #0
 8005478:	d148      	bne.n	800550c <__udivdi3+0x130>
 800547a:	428b      	cmp	r3, r1
 800547c:	d302      	bcc.n	8005484 <__udivdi3+0xa8>
 800547e:	4282      	cmp	r2, r0
 8005480:	f200 80cd 	bhi.w	800561e <__udivdi3+0x242>
 8005484:	2001      	movs	r0, #1
 8005486:	4631      	mov	r1, r6
 8005488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548c:	b912      	cbnz	r2, 8005494 <__udivdi3+0xb8>
 800548e:	2501      	movs	r5, #1
 8005490:	fbb5 f5f2 	udiv	r5, r5, r2
 8005494:	fab5 f885 	clz	r8, r5
 8005498:	f1b8 0f00 	cmp.w	r8, #0
 800549c:	d177      	bne.n	800558e <__udivdi3+0x1b2>
 800549e:	1b4a      	subs	r2, r1, r5
 80054a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80054a4:	b2af      	uxth	r7, r5
 80054a6:	2601      	movs	r6, #1
 80054a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80054ac:	0c23      	lsrs	r3, r4, #16
 80054ae:	fb0e 2110 	mls	r1, lr, r0, r2
 80054b2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80054b6:	fb07 f300 	mul.w	r3, r7, r0
 80054ba:	428b      	cmp	r3, r1
 80054bc:	d907      	bls.n	80054ce <__udivdi3+0xf2>
 80054be:	1949      	adds	r1, r1, r5
 80054c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80054c4:	d202      	bcs.n	80054cc <__udivdi3+0xf0>
 80054c6:	428b      	cmp	r3, r1
 80054c8:	f200 80ba 	bhi.w	8005640 <__udivdi3+0x264>
 80054cc:	4610      	mov	r0, r2
 80054ce:	1ac9      	subs	r1, r1, r3
 80054d0:	b2a4      	uxth	r4, r4
 80054d2:	fbb1 f3fe 	udiv	r3, r1, lr
 80054d6:	fb0e 1113 	mls	r1, lr, r3, r1
 80054da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80054de:	fb07 f703 	mul.w	r7, r7, r3
 80054e2:	42a7      	cmp	r7, r4
 80054e4:	d908      	bls.n	80054f8 <__udivdi3+0x11c>
 80054e6:	1964      	adds	r4, r4, r5
 80054e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80054ec:	f080 808f 	bcs.w	800560e <__udivdi3+0x232>
 80054f0:	42a7      	cmp	r7, r4
 80054f2:	f240 808c 	bls.w	800560e <__udivdi3+0x232>
 80054f6:	3b02      	subs	r3, #2
 80054f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80054fc:	4631      	mov	r1, r6
 80054fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005502:	2600      	movs	r6, #0
 8005504:	4630      	mov	r0, r6
 8005506:	4631      	mov	r1, r6
 8005508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800550c:	f1c6 0420 	rsb	r4, r6, #32
 8005510:	fa22 f504 	lsr.w	r5, r2, r4
 8005514:	40b3      	lsls	r3, r6
 8005516:	432b      	orrs	r3, r5
 8005518:	fa20 fc04 	lsr.w	ip, r0, r4
 800551c:	fa01 f706 	lsl.w	r7, r1, r6
 8005520:	fa21 f504 	lsr.w	r5, r1, r4
 8005524:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005528:	ea4c 0707 	orr.w	r7, ip, r7
 800552c:	fbb5 f8fe 	udiv	r8, r5, lr
 8005530:	0c39      	lsrs	r1, r7, #16
 8005532:	fb0e 5518 	mls	r5, lr, r8, r5
 8005536:	fa1f fc83 	uxth.w	ip, r3
 800553a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800553e:	fb0c f108 	mul.w	r1, ip, r8
 8005542:	42a9      	cmp	r1, r5
 8005544:	fa02 f206 	lsl.w	r2, r2, r6
 8005548:	d904      	bls.n	8005554 <__udivdi3+0x178>
 800554a:	18ed      	adds	r5, r5, r3
 800554c:	f108 34ff 	add.w	r4, r8, #4294967295
 8005550:	d367      	bcc.n	8005622 <__udivdi3+0x246>
 8005552:	46a0      	mov	r8, r4
 8005554:	1a6d      	subs	r5, r5, r1
 8005556:	b2bf      	uxth	r7, r7
 8005558:	fbb5 f4fe 	udiv	r4, r5, lr
 800555c:	fb0e 5514 	mls	r5, lr, r4, r5
 8005560:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8005564:	fb0c fc04 	mul.w	ip, ip, r4
 8005568:	458c      	cmp	ip, r1
 800556a:	d904      	bls.n	8005576 <__udivdi3+0x19a>
 800556c:	18c9      	adds	r1, r1, r3
 800556e:	f104 35ff 	add.w	r5, r4, #4294967295
 8005572:	d35c      	bcc.n	800562e <__udivdi3+0x252>
 8005574:	462c      	mov	r4, r5
 8005576:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800557a:	ebcc 0101 	rsb	r1, ip, r1
 800557e:	fba4 2302 	umull	r2, r3, r4, r2
 8005582:	4299      	cmp	r1, r3
 8005584:	d348      	bcc.n	8005618 <__udivdi3+0x23c>
 8005586:	d044      	beq.n	8005612 <__udivdi3+0x236>
 8005588:	4620      	mov	r0, r4
 800558a:	2600      	movs	r6, #0
 800558c:	e76c      	b.n	8005468 <__udivdi3+0x8c>
 800558e:	f1c8 0420 	rsb	r4, r8, #32
 8005592:	fa01 f308 	lsl.w	r3, r1, r8
 8005596:	fa05 f508 	lsl.w	r5, r5, r8
 800559a:	fa20 f704 	lsr.w	r7, r0, r4
 800559e:	40e1      	lsrs	r1, r4
 80055a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80055a4:	431f      	orrs	r7, r3
 80055a6:	fbb1 f6fe 	udiv	r6, r1, lr
 80055aa:	0c3a      	lsrs	r2, r7, #16
 80055ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80055b0:	fa1f fc85 	uxth.w	ip, r5
 80055b4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80055b8:	fb0c f206 	mul.w	r2, ip, r6
 80055bc:	429a      	cmp	r2, r3
 80055be:	fa00 f408 	lsl.w	r4, r0, r8
 80055c2:	d907      	bls.n	80055d4 <__udivdi3+0x1f8>
 80055c4:	195b      	adds	r3, r3, r5
 80055c6:	f106 31ff 	add.w	r1, r6, #4294967295
 80055ca:	d237      	bcs.n	800563c <__udivdi3+0x260>
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d935      	bls.n	800563c <__udivdi3+0x260>
 80055d0:	3e02      	subs	r6, #2
 80055d2:	442b      	add	r3, r5
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	b2bf      	uxth	r7, r7
 80055d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80055dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80055e0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80055e4:	fb0c f100 	mul.w	r1, ip, r0
 80055e8:	4299      	cmp	r1, r3
 80055ea:	d907      	bls.n	80055fc <__udivdi3+0x220>
 80055ec:	195b      	adds	r3, r3, r5
 80055ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80055f2:	d221      	bcs.n	8005638 <__udivdi3+0x25c>
 80055f4:	4299      	cmp	r1, r3
 80055f6:	d91f      	bls.n	8005638 <__udivdi3+0x25c>
 80055f8:	3802      	subs	r0, #2
 80055fa:	442b      	add	r3, r5
 80055fc:	1a5a      	subs	r2, r3, r1
 80055fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8005602:	4667      	mov	r7, ip
 8005604:	e750      	b.n	80054a8 <__udivdi3+0xcc>
 8005606:	4610      	mov	r0, r2
 8005608:	e716      	b.n	8005438 <__udivdi3+0x5c>
 800560a:	460b      	mov	r3, r1
 800560c:	e729      	b.n	8005462 <__udivdi3+0x86>
 800560e:	4613      	mov	r3, r2
 8005610:	e772      	b.n	80054f8 <__udivdi3+0x11c>
 8005612:	40b0      	lsls	r0, r6
 8005614:	4290      	cmp	r0, r2
 8005616:	d2b7      	bcs.n	8005588 <__udivdi3+0x1ac>
 8005618:	1e60      	subs	r0, r4, #1
 800561a:	2600      	movs	r6, #0
 800561c:	e724      	b.n	8005468 <__udivdi3+0x8c>
 800561e:	4630      	mov	r0, r6
 8005620:	e722      	b.n	8005468 <__udivdi3+0x8c>
 8005622:	42a9      	cmp	r1, r5
 8005624:	d995      	bls.n	8005552 <__udivdi3+0x176>
 8005626:	f1a8 0802 	sub.w	r8, r8, #2
 800562a:	441d      	add	r5, r3
 800562c:	e792      	b.n	8005554 <__udivdi3+0x178>
 800562e:	458c      	cmp	ip, r1
 8005630:	d9a0      	bls.n	8005574 <__udivdi3+0x198>
 8005632:	3c02      	subs	r4, #2
 8005634:	4419      	add	r1, r3
 8005636:	e79e      	b.n	8005576 <__udivdi3+0x19a>
 8005638:	4610      	mov	r0, r2
 800563a:	e7df      	b.n	80055fc <__udivdi3+0x220>
 800563c:	460e      	mov	r6, r1
 800563e:	e7c9      	b.n	80055d4 <__udivdi3+0x1f8>
 8005640:	3802      	subs	r0, #2
 8005642:	4429      	add	r1, r5
 8005644:	e743      	b.n	80054ce <__udivdi3+0xf2>
 8005646:	bf00      	nop

08005648 <memcpy>:
 8005648:	4684      	mov	ip, r0
 800564a:	ea41 0300 	orr.w	r3, r1, r0
 800564e:	f013 0303 	ands.w	r3, r3, #3
 8005652:	d16d      	bne.n	8005730 <memcpy+0xe8>
 8005654:	3a40      	subs	r2, #64	; 0x40
 8005656:	d341      	bcc.n	80056dc <memcpy+0x94>
 8005658:	f851 3b04 	ldr.w	r3, [r1], #4
 800565c:	f840 3b04 	str.w	r3, [r0], #4
 8005660:	f851 3b04 	ldr.w	r3, [r1], #4
 8005664:	f840 3b04 	str.w	r3, [r0], #4
 8005668:	f851 3b04 	ldr.w	r3, [r1], #4
 800566c:	f840 3b04 	str.w	r3, [r0], #4
 8005670:	f851 3b04 	ldr.w	r3, [r1], #4
 8005674:	f840 3b04 	str.w	r3, [r0], #4
 8005678:	f851 3b04 	ldr.w	r3, [r1], #4
 800567c:	f840 3b04 	str.w	r3, [r0], #4
 8005680:	f851 3b04 	ldr.w	r3, [r1], #4
 8005684:	f840 3b04 	str.w	r3, [r0], #4
 8005688:	f851 3b04 	ldr.w	r3, [r1], #4
 800568c:	f840 3b04 	str.w	r3, [r0], #4
 8005690:	f851 3b04 	ldr.w	r3, [r1], #4
 8005694:	f840 3b04 	str.w	r3, [r0], #4
 8005698:	f851 3b04 	ldr.w	r3, [r1], #4
 800569c:	f840 3b04 	str.w	r3, [r0], #4
 80056a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80056a4:	f840 3b04 	str.w	r3, [r0], #4
 80056a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80056ac:	f840 3b04 	str.w	r3, [r0], #4
 80056b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80056b4:	f840 3b04 	str.w	r3, [r0], #4
 80056b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80056bc:	f840 3b04 	str.w	r3, [r0], #4
 80056c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80056c4:	f840 3b04 	str.w	r3, [r0], #4
 80056c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80056cc:	f840 3b04 	str.w	r3, [r0], #4
 80056d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80056d4:	f840 3b04 	str.w	r3, [r0], #4
 80056d8:	3a40      	subs	r2, #64	; 0x40
 80056da:	d2bd      	bcs.n	8005658 <memcpy+0x10>
 80056dc:	3230      	adds	r2, #48	; 0x30
 80056de:	d311      	bcc.n	8005704 <memcpy+0xbc>
 80056e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80056e4:	f840 3b04 	str.w	r3, [r0], #4
 80056e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80056ec:	f840 3b04 	str.w	r3, [r0], #4
 80056f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80056f4:	f840 3b04 	str.w	r3, [r0], #4
 80056f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80056fc:	f840 3b04 	str.w	r3, [r0], #4
 8005700:	3a10      	subs	r2, #16
 8005702:	d2ed      	bcs.n	80056e0 <memcpy+0x98>
 8005704:	320c      	adds	r2, #12
 8005706:	d305      	bcc.n	8005714 <memcpy+0xcc>
 8005708:	f851 3b04 	ldr.w	r3, [r1], #4
 800570c:	f840 3b04 	str.w	r3, [r0], #4
 8005710:	3a04      	subs	r2, #4
 8005712:	d2f9      	bcs.n	8005708 <memcpy+0xc0>
 8005714:	3204      	adds	r2, #4
 8005716:	d008      	beq.n	800572a <memcpy+0xe2>
 8005718:	07d2      	lsls	r2, r2, #31
 800571a:	bf1c      	itt	ne
 800571c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005720:	f800 3b01 	strbne.w	r3, [r0], #1
 8005724:	d301      	bcc.n	800572a <memcpy+0xe2>
 8005726:	880b      	ldrh	r3, [r1, #0]
 8005728:	8003      	strh	r3, [r0, #0]
 800572a:	4660      	mov	r0, ip
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	2a08      	cmp	r2, #8
 8005732:	d313      	bcc.n	800575c <memcpy+0x114>
 8005734:	078b      	lsls	r3, r1, #30
 8005736:	d08d      	beq.n	8005654 <memcpy+0xc>
 8005738:	f010 0303 	ands.w	r3, r0, #3
 800573c:	d08a      	beq.n	8005654 <memcpy+0xc>
 800573e:	f1c3 0304 	rsb	r3, r3, #4
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	07db      	lsls	r3, r3, #31
 8005746:	bf1c      	itt	ne
 8005748:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800574c:	f800 3b01 	strbne.w	r3, [r0], #1
 8005750:	d380      	bcc.n	8005654 <memcpy+0xc>
 8005752:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005756:	f820 3b02 	strh.w	r3, [r0], #2
 800575a:	e77b      	b.n	8005654 <memcpy+0xc>
 800575c:	3a04      	subs	r2, #4
 800575e:	d3d9      	bcc.n	8005714 <memcpy+0xcc>
 8005760:	3a01      	subs	r2, #1
 8005762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005766:	f800 3b01 	strb.w	r3, [r0], #1
 800576a:	d2f9      	bcs.n	8005760 <memcpy+0x118>
 800576c:	780b      	ldrb	r3, [r1, #0]
 800576e:	7003      	strb	r3, [r0, #0]
 8005770:	784b      	ldrb	r3, [r1, #1]
 8005772:	7043      	strb	r3, [r0, #1]
 8005774:	788b      	ldrb	r3, [r1, #2]
 8005776:	7083      	strb	r3, [r0, #2]
 8005778:	4660      	mov	r0, ip
 800577a:	4770      	bx	lr

0800577c <__gedf2>:
 800577c:	f04f 3cff 	mov.w	ip, #4294967295
 8005780:	e006      	b.n	8005790 <__cmpdf2+0x4>
 8005782:	bf00      	nop

08005784 <__ledf2>:
 8005784:	f04f 0c01 	mov.w	ip, #1
 8005788:	e002      	b.n	8005790 <__cmpdf2+0x4>
 800578a:	bf00      	nop

0800578c <__cmpdf2>:
 800578c:	f04f 0c01 	mov.w	ip, #1
 8005790:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005794:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005798:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800579c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80057a0:	bf18      	it	ne
 80057a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80057a6:	d01b      	beq.n	80057e0 <__cmpdf2+0x54>
 80057a8:	b001      	add	sp, #4
 80057aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80057ae:	bf0c      	ite	eq
 80057b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80057b4:	ea91 0f03 	teqne	r1, r3
 80057b8:	bf02      	ittt	eq
 80057ba:	ea90 0f02 	teqeq	r0, r2
 80057be:	2000      	moveq	r0, #0
 80057c0:	4770      	bxeq	lr
 80057c2:	f110 0f00 	cmn.w	r0, #0
 80057c6:	ea91 0f03 	teq	r1, r3
 80057ca:	bf58      	it	pl
 80057cc:	4299      	cmppl	r1, r3
 80057ce:	bf08      	it	eq
 80057d0:	4290      	cmpeq	r0, r2
 80057d2:	bf2c      	ite	cs
 80057d4:	17d8      	asrcs	r0, r3, #31
 80057d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80057da:	f040 0001 	orr.w	r0, r0, #1
 80057de:	4770      	bx	lr
 80057e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80057e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80057e8:	d102      	bne.n	80057f0 <__cmpdf2+0x64>
 80057ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80057ee:	d107      	bne.n	8005800 <__cmpdf2+0x74>
 80057f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80057f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80057f8:	d1d6      	bne.n	80057a8 <__cmpdf2+0x1c>
 80057fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80057fe:	d0d3      	beq.n	80057a8 <__cmpdf2+0x1c>
 8005800:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop

08005808 <__aeabi_cdrcmple>:
 8005808:	4684      	mov	ip, r0
 800580a:	4610      	mov	r0, r2
 800580c:	4662      	mov	r2, ip
 800580e:	468c      	mov	ip, r1
 8005810:	4619      	mov	r1, r3
 8005812:	4663      	mov	r3, ip
 8005814:	e000      	b.n	8005818 <__aeabi_cdcmpeq>
 8005816:	bf00      	nop

08005818 <__aeabi_cdcmpeq>:
 8005818:	b501      	push	{r0, lr}
 800581a:	f7ff ffb7 	bl	800578c <__cmpdf2>
 800581e:	2800      	cmp	r0, #0
 8005820:	bf48      	it	mi
 8005822:	f110 0f00 	cmnmi.w	r0, #0
 8005826:	bd01      	pop	{r0, pc}

08005828 <__aeabi_dcmpeq>:
 8005828:	f84d ed08 	str.w	lr, [sp, #-8]!
 800582c:	f7ff fff4 	bl	8005818 <__aeabi_cdcmpeq>
 8005830:	bf0c      	ite	eq
 8005832:	2001      	moveq	r0, #1
 8005834:	2000      	movne	r0, #0
 8005836:	f85d fb08 	ldr.w	pc, [sp], #8
 800583a:	bf00      	nop

0800583c <__aeabi_dcmplt>:
 800583c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005840:	f7ff ffea 	bl	8005818 <__aeabi_cdcmpeq>
 8005844:	bf34      	ite	cc
 8005846:	2001      	movcc	r0, #1
 8005848:	2000      	movcs	r0, #0
 800584a:	f85d fb08 	ldr.w	pc, [sp], #8
 800584e:	bf00      	nop

08005850 <__aeabi_dcmple>:
 8005850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005854:	f7ff ffe0 	bl	8005818 <__aeabi_cdcmpeq>
 8005858:	bf94      	ite	ls
 800585a:	2001      	movls	r0, #1
 800585c:	2000      	movhi	r0, #0
 800585e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005862:	bf00      	nop

08005864 <__aeabi_dcmpge>:
 8005864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005868:	f7ff ffce 	bl	8005808 <__aeabi_cdrcmple>
 800586c:	bf94      	ite	ls
 800586e:	2001      	movls	r0, #1
 8005870:	2000      	movhi	r0, #0
 8005872:	f85d fb08 	ldr.w	pc, [sp], #8
 8005876:	bf00      	nop

08005878 <__aeabi_dcmpgt>:
 8005878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800587c:	f7ff ffc4 	bl	8005808 <__aeabi_cdrcmple>
 8005880:	bf34      	ite	cc
 8005882:	2001      	movcc	r0, #1
 8005884:	2000      	movcs	r0, #0
 8005886:	f85d fb08 	ldr.w	pc, [sp], #8
 800588a:	bf00      	nop

0800588c <__aeabi_uldivmod>:
 800588c:	b953      	cbnz	r3, 80058a4 <__aeabi_uldivmod+0x18>
 800588e:	b94a      	cbnz	r2, 80058a4 <__aeabi_uldivmod+0x18>
 8005890:	2900      	cmp	r1, #0
 8005892:	bf08      	it	eq
 8005894:	2800      	cmpeq	r0, #0
 8005896:	bf1c      	itt	ne
 8005898:	f04f 31ff 	movne.w	r1, #4294967295
 800589c:	f04f 30ff 	movne.w	r0, #4294967295
 80058a0:	f7ff bc4c 	b.w	800513c <__aeabi_idiv0>
 80058a4:	b082      	sub	sp, #8
 80058a6:	46ec      	mov	ip, sp
 80058a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80058ac:	f7ff fc2e 	bl	800510c <__gnu_uldivmod_helper>
 80058b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80058b4:	b002      	add	sp, #8
 80058b6:	bc0c      	pop	{r2, r3}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop

080058bc <calibrate_offset>:
 * @brief Calibrate out the 0V and 0A offsets
 * @details Reads the ADC value at 0V and 0A and records
 * their offsets in the EEPROM
 */
void calibrate_offset() {
  zero_volts = voltage_reading;
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <calibrate_offset+0x14>)
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <calibrate_offset+0x18>)
 80058c2:	801a      	strh	r2, [r3, #0]
  zero_amps = current_reading;
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <calibrate_offset+0x1c>)
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <calibrate_offset+0x20>)
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000c08 	.word	0x20000c08
 80058d4:	20000f0c 	.word	0x20000f0c
 80058d8:	20000e7c 	.word	0x20000e7c
 80058dc:	20000c58 	.word	0x20000c58

080058e0 <calibrate_voltage>:
/**
 * @brief Updates calibration for the standard voltage
 * @details Calculates the calibration value read from the ADC
 * and stores the result in the EEPROM
 */
void calibrate_voltage() {
 80058e0:	4770      	bx	lr

080058e2 <calibrate_current>:
/**
 * @brief Updates calibration for the standard current
 * @details Calculates the calibration value read from the ADC
 * and stores the result in the EEPROM
 */
void calibrate_current() {
 80058e2:	4770      	bx	lr

080058e4 <meter_init>:

/**
 * @brief Initialize the energy meter
 * @details Reads the calibration values from the EEPROM
 */
void meter_init() {
 80058e4:	4770      	bx	lr
	...

080058e8 <meter_display>:
/**
 * @brief Displays energy meter data
 * @details Replace with code to update the display with
 * your own
 */
void meter_display() {
 80058e8:	b500      	push	{lr}
  char buf1[20];
  char buf2 [20];

  snprintf(buf1,20,"Test Volt: %d",voltage_reading);
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <meter_display+0x4c>)
 80058ec:	4a12      	ldr	r2, [pc, #72]	; (8005938 <meter_display+0x50>)
 80058ee:	881b      	ldrh	r3, [r3, #0]
/**
 * @brief Displays energy meter data
 * @details Replace with code to update the display with
 * your own
 */
void meter_display() {
 80058f0:	b08b      	sub	sp, #44	; 0x2c
  char buf1[20];
  char buf2 [20];

  snprintf(buf1,20,"Test Volt: %d",voltage_reading);
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2114      	movs	r1, #20
 80058f6:	4668      	mov	r0, sp
 80058f8:	f000 fa4a 	bl	8005d90 <snprintf>
  // sprintf(buf,"V:%4.2f",(float)voltage_reading*volts_per_div);
  lcd_clear();
 80058fc:	f7fb f84a 	bl	8000994 <lcd_clear>
  lcd_goto(0,0);
 8005900:	2000      	movs	r0, #0
 8005902:	4601      	mov	r1, r0
 8005904:	f7fb f842 	bl	800098c <lcd_goto>
  lcd_puts(buf1);
 8005908:	4668      	mov	r0, sp
 800590a:	f7fb f841 	bl	8000990 <lcd_puts>

  snprintf(buf2,20,"Test Current:%d",current_reading);
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <meter_display+0x54>)
 8005910:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <meter_display+0x58>)
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	a805      	add	r0, sp, #20
 8005916:	b29b      	uxth	r3, r3
 8005918:	2114      	movs	r1, #20
 800591a:	f000 fa39 	bl	8005d90 <snprintf>
  lcd_goto(0,1);
 800591e:	2101      	movs	r1, #1
 8005920:	2000      	movs	r0, #0
 8005922:	f7fb f833 	bl	800098c <lcd_goto>
  lcd_puts(buf2);
 8005926:	a805      	add	r0, sp, #20
 8005928:	f7fb f832 	bl	8000990 <lcd_puts>
  //Code here
}
 800592c:	b00b      	add	sp, #44	; 0x2c
 800592e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005932:	bf00      	nop
 8005934:	20000c08 	.word	0x20000c08
 8005938:	08009f8a 	.word	0x08009f8a
 800593c:	20000e7c 	.word	0x20000e7c
 8005940:	08009f98 	.word	0x08009f98

08005944 <my_adc_callback>:
 */


void my_adc_callback(uint16_t *data) {

  voltage_reading = (uint16_t) data[0];
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <my_adc_callback+0x10>)
 8005946:	8802      	ldrh	r2, [r0, #0]
 8005948:	801a      	strh	r2, [r3, #0]
  current_reading = (uint16_t) data[1];
 800594a:	4b03      	ldr	r3, [pc, #12]	; (8005958 <my_adc_callback+0x14>)
 800594c:	8842      	ldrh	r2, [r0, #2]
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000c08 	.word	0x20000c08
 8005958:	20000e7c 	.word	0x20000e7c

0800595c <change_state>:
enum DISP_STATES {DISP_MAIN, DISP_OFF, DISP_CALV, DISP_CALI};

uint8_t state = DISP_MAIN;
bool btn_pressed = false;

void change_state() {
 800595c:	b508      	push	{r3, lr}
  if (!gpio_read_pin(GE_PBTN1)) {
 800595e:	2020      	movs	r0, #32
 8005960:	f7fb f804 	bl	800096c <gpio_read_pin>
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <change_state+0x2c>)
 8005966:	b958      	cbnz	r0, 8005980 <change_state+0x24>
    if (!btn_pressed) {
 8005968:	7810      	ldrb	r0, [r2, #0]
 800596a:	b938      	cbnz	r0, 800597c <change_state+0x20>
      state++;
 800596c:	4907      	ldr	r1, [pc, #28]	; (800598c <change_state+0x30>)
 800596e:	780b      	ldrb	r3, [r1, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	b2db      	uxtb	r3, r3
      if (state > DISP_CALI) state = DISP_MAIN;
 8005974:	2b03      	cmp	r3, #3
bool btn_pressed = false;

void change_state() {
  if (!gpio_read_pin(GE_PBTN1)) {
    if (!btn_pressed) {
      state++;
 8005976:	bf94      	ite	ls
 8005978:	700b      	strbls	r3, [r1, #0]
      if (state > DISP_CALI) state = DISP_MAIN;
 800597a:	7008      	strbhi	r0, [r1, #0]
    }
    btn_pressed = true;
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <change_state+0x26>
  } else {
    btn_pressed = false;
 8005980:	2300      	movs	r3, #0
 8005982:	7013      	strb	r3, [r2, #0]
 8005984:	bd08      	pop	{r3, pc}
 8005986:	bf00      	nop
 8005988:	20000bc8 	.word	0x20000bc8
 800598c:	20000bc9 	.word	0x20000bc9

08005990 <setup_buttons>:
/**
 * @brief Initializes buttons
 * @details Sets PB1 to go to the next menu screen.
 * PB2 to trigger calibration.
 */
void setup_buttons() {
 8005990:	b510      	push	{r4, lr}
  gpio_setup_pin(GE_PBTN1, GPIO_INPUT, false, false);
 8005992:	2100      	movs	r1, #0
 8005994:	460a      	mov	r2, r1
 8005996:	460b      	mov	r3, r1
 8005998:	2020      	movs	r0, #32
 800599a:	f7fa ffa9 	bl	80008f0 <gpio_setup_pin>
  gpio_setup_pin(GE_PBTN2, GPIO_INPUT, false, false);
 800599e:	2100      	movs	r1, #0
 80059a0:	2021      	movs	r0, #33	; 0x21
 80059a2:	460a      	mov	r2, r1
 80059a4:	460b      	mov	r3, r1
}
 80059a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @details Sets PB1 to go to the next menu screen.
 * PB2 to trigger calibration.
 */
void setup_buttons() {
  gpio_setup_pin(GE_PBTN1, GPIO_INPUT, false, false);
  gpio_setup_pin(GE_PBTN2, GPIO_INPUT, false, false);
 80059aa:	f7fa bfa1 	b.w	80008f0 <gpio_setup_pin>
	...

080059b0 <start_conversion>:
}

void start_conversion() {
 80059b0:	b507      	push	{r0, r1, r2, lr}
  adc_set_fs(1000);
 80059b2:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80059e0 <start_conversion+0x30>
 80059b6:	f7fa fea5 	bl	8000704 <adc_set_fs>
  // Initialize ADC channels (A3 - voltage reading, A1 - current reading)
  ADC_CHAN_Type chan_to_convert[2] = {GE_A3, GE_A1};
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <start_conversion+0x34>)
  adc_enable_channels(chan_to_convert, 2);
 80059bc:	2102      	movs	r1, #2
}

void start_conversion() {
  adc_set_fs(1000);
  // Initialize ADC channels (A3 - voltage reading, A1 - current reading)
  ADC_CHAN_Type chan_to_convert[2] = {GE_A3, GE_A1};
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f8ad 3004 	strh.w	r3, [sp, #4]
  adc_enable_channels(chan_to_convert, 2);
 80059c4:	a801      	add	r0, sp, #4
 80059c6:	f7fa fd93 	bl	80004f0 <adc_enable_channels>
  adc_initialize_channels();
 80059ca:	f7fa fdb7 	bl	800053c <adc_initialize_channels>
  adc_callback(&my_adc_callback);
 80059ce:	4806      	ldr	r0, [pc, #24]	; (80059e8 <start_conversion+0x38>)
 80059d0:	f7fa fe92 	bl	80006f8 <adc_callback>
  adc_start();
 80059d4:	f7fa fd3e 	bl	8000454 <adc_start>
}
 80059d8:	b003      	add	sp, #12
 80059da:	f85d fb04 	ldr.w	pc, [sp], #4
 80059de:	bf00      	nop
 80059e0:	447a0000 	.word	0x447a0000
 80059e4:	080098b0 	.word	0x080098b0
 80059e8:	08005945 	.word	0x08005945

080059ec <main>:

int main() {
 80059ec:	b538      	push	{r3, r4, r5, lr}
  //Initialize systems
  ge_init();
 80059ee:	f7fa ffd3 	bl	8000998 <ge_init>

  setup_buttons();
 80059f2:	f7ff ffcd 	bl	8005990 <setup_buttons>

  timer_id_t state_tim = timer_register(50, &change_state, GE_PERIODIC);
 80059f6:	4941      	ldr	r1, [pc, #260]	; (8005afc <main+0x110>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	2032      	movs	r0, #50	; 0x32
 80059fc:	f7fb f882 	bl	8000b04 <timer_register>

  timer_start(state_tim);
 8005a00:	f7fb f8b4 	bl	8000b6c <timer_start>

  start_conversion();
 8005a04:	f7ff ffd4 	bl	80059b0 <start_conversion>

  //initialize power meter
  meter_init();
 8005a08:	f7ff ff6c 	bl	80058e4 <meter_init>

  //handle display
  uint8_t last_state = 255;
 8005a0c:	25ff      	movs	r5, #255	; 0xff
  while (1) {

    if (state != last_state) {
 8005a0e:	4c3c      	ldr	r4, [pc, #240]	; (8005b00 <main+0x114>)
 8005a10:	7823      	ldrb	r3, [r4, #0]
 8005a12:	42ab      	cmp	r3, r5
 8005a14:	d002      	beq.n	8005a1c <main+0x30>
      lcd_clear();
 8005a16:	f7fa ffbd 	bl	8000994 <lcd_clear>
      last_state = state;
 8005a1a:	7825      	ldrb	r5, [r4, #0]
    }

    switch(state) {
 8005a1c:	7823      	ldrb	r3, [r4, #0]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d865      	bhi.n	8005aee <main+0x102>
 8005a22:	e8df f003 	tbb	[pc, r3]
 8005a26:	0502      	.short	0x0502
 8005a28:	4723      	.short	0x4723
      case DISP_MAIN:
        meter_display();
 8005a2a:	f7ff ff5d 	bl	80058e8 <meter_display>
        break;
 8005a2e:	e060      	b.n	8005af2 <main+0x106>
      case DISP_OFF:
        lcd_goto(0, 0);
 8005a30:	2000      	movs	r0, #0
 8005a32:	4601      	mov	r1, r0
 8005a34:	f7fa ffaa 	bl	800098c <lcd_goto>
        lcd_puts("Calibration: offsets");
 8005a38:	4832      	ldr	r0, [pc, #200]	; (8005b04 <main+0x118>)
 8005a3a:	f7fa ffa9 	bl	8000990 <lcd_puts>
        lcd_goto(0, 1);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	2000      	movs	r0, #0
 8005a42:	f7fa ffa3 	bl	800098c <lcd_goto>
        lcd_puts("Apply 0V and 0A");
 8005a46:	4830      	ldr	r0, [pc, #192]	; (8005b08 <main+0x11c>)
 8005a48:	f7fa ffa2 	bl	8000990 <lcd_puts>
        lcd_goto(0, 3);
 8005a4c:	2103      	movs	r1, #3
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f7fa ff9c 	bl	800098c <lcd_goto>
        lcd_puts("2 - OK");
 8005a54:	482d      	ldr	r0, [pc, #180]	; (8005b0c <main+0x120>)
 8005a56:	f7fa ff9b 	bl	8000990 <lcd_puts>

        if (!gpio_read_pin(GE_PBTN2)) {
 8005a5a:	2021      	movs	r0, #33	; 0x21
 8005a5c:	f7fa ff86 	bl	800096c <gpio_read_pin>
 8005a60:	4604      	mov	r4, r0
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d145      	bne.n	8005af2 <main+0x106>
          calibrate_offset();
 8005a66:	f7ff ff29 	bl	80058bc <calibrate_offset>
 8005a6a:	e01b      	b.n	8005aa4 <main+0xb8>
          lcd_goto(0, 2);
          lcd_puts("Stored");
        }
        break;
      case DISP_CALV:
        lcd_goto(0, 0);
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	4601      	mov	r1, r0
 8005a70:	f7fa ff8c 	bl	800098c <lcd_goto>
        lcd_puts("Calibration: voltage");
 8005a74:	4826      	ldr	r0, [pc, #152]	; (8005b10 <main+0x124>)
 8005a76:	f7fa ff8b 	bl	8000990 <lcd_puts>
        lcd_goto(0, 1);
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f7fa ff85 	bl	800098c <lcd_goto>
        lcd_puts("Apply " STR(CAL_VOLTS) "V");
 8005a82:	4824      	ldr	r0, [pc, #144]	; (8005b14 <main+0x128>)
 8005a84:	f7fa ff84 	bl	8000990 <lcd_puts>
        lcd_goto(0, 3);
 8005a88:	2103      	movs	r1, #3
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f7fa ff7e 	bl	800098c <lcd_goto>
        lcd_puts("2 - OK");
 8005a90:	481e      	ldr	r0, [pc, #120]	; (8005b0c <main+0x120>)
 8005a92:	f7fa ff7d 	bl	8000990 <lcd_puts>

        if (!gpio_read_pin(GE_PBTN2)) {
 8005a96:	2021      	movs	r0, #33	; 0x21
 8005a98:	f7fa ff68 	bl	800096c <gpio_read_pin>
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	bb40      	cbnz	r0, 8005af2 <main+0x106>
          calibrate_voltage();
 8005aa0:	f7ff ff1e 	bl	80058e0 <calibrate_voltage>
          lcd_goto(0, 2);
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	2102      	movs	r1, #2
 8005aa8:	f7fa ff70 	bl	800098c <lcd_goto>
          lcd_puts("Stored");
 8005aac:	481a      	ldr	r0, [pc, #104]	; (8005b18 <main+0x12c>)
 8005aae:	f7fa ff6f 	bl	8000990 <lcd_puts>
 8005ab2:	e01e      	b.n	8005af2 <main+0x106>
        }
        break;
      case DISP_CALI:
        lcd_goto(0, 0);
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	f7fa ff68 	bl	800098c <lcd_goto>
        lcd_puts("Calibration: current");
 8005abc:	4817      	ldr	r0, [pc, #92]	; (8005b1c <main+0x130>)
 8005abe:	f7fa ff67 	bl	8000990 <lcd_puts>
        lcd_goto(0, 1);
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7fa ff61 	bl	800098c <lcd_goto>
        lcd_puts("Apply " STR(CAL_CURR) "A");
 8005aca:	4815      	ldr	r0, [pc, #84]	; (8005b20 <main+0x134>)
 8005acc:	f7fa ff60 	bl	8000990 <lcd_puts>
        lcd_goto(0, 3);
 8005ad0:	2103      	movs	r1, #3
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7fa ff5a 	bl	800098c <lcd_goto>
        lcd_puts("2 - OK");
 8005ad8:	480c      	ldr	r0, [pc, #48]	; (8005b0c <main+0x120>)
 8005ada:	f7fa ff59 	bl	8000990 <lcd_puts>

        if (!gpio_read_pin(GE_PBTN2)) {
 8005ade:	2021      	movs	r0, #33	; 0x21
 8005ae0:	f7fa ff44 	bl	800096c <gpio_read_pin>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	b920      	cbnz	r0, 8005af2 <main+0x106>
          calibrate_current();
 8005ae8:	f7ff fefb 	bl	80058e2 <calibrate_current>
 8005aec:	e7da      	b.n	8005aa4 <main+0xb8>
          lcd_goto(0, 2);
          lcd_puts("Stored");
        }
        break;
      default:
        state = DISP_MAIN;
 8005aee:	2300      	movs	r3, #0
 8005af0:	7023      	strb	r3, [r4, #0]
        break;
    }

    delay_ms(50);
 8005af2:	2032      	movs	r0, #50	; 0x32
 8005af4:	f7fa ff7e 	bl	80009f4 <delay_ms>
  }
 8005af8:	e789      	b.n	8005a0e <main+0x22>
 8005afa:	bf00      	nop
 8005afc:	0800595d 	.word	0x0800595d
 8005b00:	20000bc9 	.word	0x20000bc9
 8005b04:	08009fa8 	.word	0x08009fa8
 8005b08:	08009fbd 	.word	0x08009fbd
 8005b0c:	08009fcd 	.word	0x08009fcd
 8005b10:	08009fdb 	.word	0x08009fdb
 8005b14:	08009ff0 	.word	0x08009ff0
 8005b18:	08009fd4 	.word	0x08009fd4
 8005b1c:	08009ffc 	.word	0x08009ffc
 8005b20:	0800a011 	.word	0x0800a011

08005b24 <_sbrk>:

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <_sbrk+0x2c>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	b90a      	cbnz	r2, 8005b2e <_sbrk+0xa>
        heap_end = &_ebss;
 8005b2a:	4a0a      	ldr	r2, [pc, #40]	; (8005b54 <_sbrk+0x30>)
 8005b2c:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8005b2e:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8005b30:	f3ef 8208 	mrs	r2, MSP

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
 8005b34:	4418      	add	r0, r3
 8005b36:	4290      	cmp	r0, r2
     {
        // _write (STDERR_FILENO, "Heap and stack collision\n", 25);
         errno = ENOMEM;
 8005b38:	bf89      	itett	hi
 8005b3a:	4b07      	ldrhi	r3, [pc, #28]	; (8005b58 <_sbrk+0x34>)
         return  (caddr_t) -1;
         //abort ();
     }

    heap_end += incr;
 8005b3c:	4a04      	ldrls	r2, [pc, #16]	; (8005b50 <_sbrk+0x2c>)

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
     {
        // _write (STDERR_FILENO, "Heap and stack collision\n", 25);
         errno = ENOMEM;
 8005b3e:	220c      	movhi	r2, #12
         return  (caddr_t) -1;
 8005b40:	f04f 30ff 	movhi.w	r0, #4294967295
         //abort ();
     }

    heap_end += incr;
 8005b44:	bf96      	itet	ls
 8005b46:	6010      	strls	r0, [r2, #0]

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
     {
        // _write (STDERR_FILENO, "Heap and stack collision\n", 25);
         errno = ENOMEM;
 8005b48:	601a      	strhi	r2, [r3, #0]
         return  (caddr_t) -1;
         //abort ();
     }

    heap_end += incr;
    return (caddr_t) prev_heap_end;
 8005b4a:	4618      	movls	r0, r3

}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000bcc 	.word	0x20000bcc
 8005b54:	20001368 	.word	0x20001368
 8005b58:	20000c04 	.word	0x20000c04

08005b5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b5c:	4a39      	ldr	r2, [pc, #228]	; (8005c44 <SystemInit+0xe8>)
 8005b5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005b62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005b6a:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <SystemInit+0xec>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8005b74:	6859      	ldr	r1, [r3, #4]
 8005b76:	4a35      	ldr	r2, [pc, #212]	; (8005c4c <SystemInit+0xf0>)
 8005b78:	400a      	ands	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005b82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b86:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005b96:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8005b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9a:	f022 020f 	bic.w	r2, r2, #15
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8005ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ba2:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <SystemInit+0xf4>)
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ba4:	b082      	sub	sp, #8

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8005ba6:	400a      	ands	r2, r1
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005baa:	2200      	movs	r2, #0
 8005bac:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005bae:	9200      	str	r2, [sp, #0]
 8005bb0:	9201      	str	r2, [sp, #4]
 #if defined (PLL_SOURCE_HSE)
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 #elif defined (PLL_SOURCE_HSE_BYPASS)
  /* HSE oscillator bypassed with external clock */    
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8005bb8:	601a      	str	r2, [r3, #0]
 #endif /* PLL_SOURCE_HSE */
   
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005bc0:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8005bc2:	9a00      	ldr	r2, [sp, #0]
 8005bc4:	3201      	adds	r2, #1
 8005bc6:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005bc8:	9a01      	ldr	r2, [sp, #4]
 8005bca:	b91a      	cbnz	r2, 8005bd4 <SystemInit+0x78>
 8005bcc:	9a00      	ldr	r2, [sp, #0]
 8005bce:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8005bd2:	d1f2      	bne.n	8005bba <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8005bda:	bf18      	it	ne
 8005bdc:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005bde:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8005be0:	9a01      	ldr	r2, [sp, #4]
 8005be2:	2a01      	cmp	r2, #1
 8005be4:	d005      	beq.n	8005bf2 <SystemInit+0x96>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005be6:	4b17      	ldr	r3, [pc, #92]	; (8005c44 <SystemInit+0xe8>)
 8005be8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bec:	609a      	str	r2, [r3, #8]
#endif  
}
 8005bee:	b002      	add	sp, #8
 8005bf0:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8005bf2:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <SystemInit+0xf8>)
 8005bf4:	2112      	movs	r1, #18
 8005bf6:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c06:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8005c0e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8005c16:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005c1e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <SystemInit+0xec>)
 8005c24:	0189      	lsls	r1, r1, #6
 8005c26:	d5fb      	bpl.n	8005c20 <SystemInit+0xc4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005c28:	6851      	ldr	r1, [r2, #4]
 8005c2a:	f021 0103 	bic.w	r1, r1, #3
 8005c2e:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8005c30:	6851      	ldr	r1, [r2, #4]
 8005c32:	f041 0102 	orr.w	r1, r1, #2
 8005c36:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	f002 020c 	and.w	r2, r2, #12
 8005c3e:	2a08      	cmp	r2, #8
 8005c40:	d1fa      	bne.n	8005c38 <SystemInit+0xdc>
 8005c42:	e7d0      	b.n	8005be6 <SystemInit+0x8a>
 8005c44:	e000ed00 	.word	0xe000ed00
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	f87fc00c 	.word	0xf87fc00c
 8005c50:	ff00fccc 	.word	0xff00fccc
 8005c54:	40022000 	.word	0x40022000

08005c58 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005c58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005c5a:	e003      	b.n	8005c64 <LoopCopyDataInit>

08005c5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8005c5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005c60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005c62:	3104      	adds	r1, #4

08005c64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005c64:	480a      	ldr	r0, [pc, #40]	; (8005c90 <LoopForever+0x6>)
	ldr	r3, =_edata
 8005c66:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <LoopForever+0xa>)
	adds	r2, r0, r1
 8005c68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005c6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005c6c:	d3f6      	bcc.n	8005c5c <CopyDataInit>
	ldr	r2, =_sbss
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <LoopForever+0xe>)
	b	LoopFillZerobss
 8005c70:	e002      	b.n	8005c78 <LoopFillZerobss>

08005c72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005c72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005c74:	f842 3b04 	str.w	r3, [r2], #4

08005c78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005c78:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <LoopForever+0x12>)
	cmp	r2, r3
 8005c7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005c7c:	d3f9      	bcc.n	8005c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c7e:	f7ff ff6d 	bl	8005b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c82:	f000 f80f 	bl	8005ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005c86:	f7ff feb1 	bl	80059ec <main>

08005c8a <LoopForever>:

LoopForever:
    b LoopForever
 8005c8a:	e7fe      	b.n	8005c8a <LoopForever>
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8005c8c:	0800a1d4 	.word	0x0800a1d4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005c90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005c94:	20000994 	.word	0x20000994
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8005c98:	20000994 	.word	0x20000994
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8005c9c:	20001368 	.word	0x20001368

08005ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ca0:	e7fe      	b.n	8005ca0 <ADC1_2_IRQHandler>
	...

08005ca4 <__libc_init_array>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4e0f      	ldr	r6, [pc, #60]	; (8005ce4 <__libc_init_array+0x40>)
 8005ca8:	4d0f      	ldr	r5, [pc, #60]	; (8005ce8 <__libc_init_array+0x44>)
 8005caa:	1b76      	subs	r6, r6, r5
 8005cac:	10b6      	asrs	r6, r6, #2
 8005cae:	bf18      	it	ne
 8005cb0:	2400      	movne	r4, #0
 8005cb2:	d005      	beq.n	8005cc0 <__libc_init_array+0x1c>
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cba:	4798      	blx	r3
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d1f9      	bne.n	8005cb4 <__libc_init_array+0x10>
 8005cc0:	4e0a      	ldr	r6, [pc, #40]	; (8005cec <__libc_init_array+0x48>)
 8005cc2:	4d0b      	ldr	r5, [pc, #44]	; (8005cf0 <__libc_init_array+0x4c>)
 8005cc4:	1b76      	subs	r6, r6, r5
 8005cc6:	f004 fa6f 	bl	800a1a8 <_init>
 8005cca:	10b6      	asrs	r6, r6, #2
 8005ccc:	bf18      	it	ne
 8005cce:	2400      	movne	r4, #0
 8005cd0:	d006      	beq.n	8005ce0 <__libc_init_array+0x3c>
 8005cd2:	3401      	adds	r4, #1
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d1f9      	bne.n	8005cd2 <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	bf00      	nop
 8005ce4:	0800a1c8 	.word	0x0800a1c8
 8005ce8:	0800a1c8 	.word	0x0800a1c8
 8005cec:	0800a1d0 	.word	0x0800a1d0
 8005cf0:	0800a1c8 	.word	0x0800a1c8

08005cf4 <memset>:
 8005cf4:	b470      	push	{r4, r5, r6}
 8005cf6:	0784      	lsls	r4, r0, #30
 8005cf8:	d046      	beq.n	8005d88 <memset+0x94>
 8005cfa:	1e54      	subs	r4, r2, #1
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	d041      	beq.n	8005d84 <memset+0x90>
 8005d00:	b2cd      	uxtb	r5, r1
 8005d02:	4603      	mov	r3, r0
 8005d04:	e002      	b.n	8005d0c <memset+0x18>
 8005d06:	1e62      	subs	r2, r4, #1
 8005d08:	b3e4      	cbz	r4, 8005d84 <memset+0x90>
 8005d0a:	4614      	mov	r4, r2
 8005d0c:	f803 5b01 	strb.w	r5, [r3], #1
 8005d10:	079a      	lsls	r2, r3, #30
 8005d12:	d1f8      	bne.n	8005d06 <memset+0x12>
 8005d14:	2c03      	cmp	r4, #3
 8005d16:	d92e      	bls.n	8005d76 <memset+0x82>
 8005d18:	b2cd      	uxtb	r5, r1
 8005d1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005d1e:	2c0f      	cmp	r4, #15
 8005d20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005d24:	d919      	bls.n	8005d5a <memset+0x66>
 8005d26:	f103 0210 	add.w	r2, r3, #16
 8005d2a:	4626      	mov	r6, r4
 8005d2c:	3e10      	subs	r6, #16
 8005d2e:	2e0f      	cmp	r6, #15
 8005d30:	f842 5c10 	str.w	r5, [r2, #-16]
 8005d34:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005d38:	f842 5c08 	str.w	r5, [r2, #-8]
 8005d3c:	f842 5c04 	str.w	r5, [r2, #-4]
 8005d40:	f102 0210 	add.w	r2, r2, #16
 8005d44:	d8f2      	bhi.n	8005d2c <memset+0x38>
 8005d46:	f1a4 0210 	sub.w	r2, r4, #16
 8005d4a:	f022 020f 	bic.w	r2, r2, #15
 8005d4e:	f004 040f 	and.w	r4, r4, #15
 8005d52:	3210      	adds	r2, #16
 8005d54:	2c03      	cmp	r4, #3
 8005d56:	4413      	add	r3, r2
 8005d58:	d90d      	bls.n	8005d76 <memset+0x82>
 8005d5a:	461e      	mov	r6, r3
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	3a04      	subs	r2, #4
 8005d60:	2a03      	cmp	r2, #3
 8005d62:	f846 5b04 	str.w	r5, [r6], #4
 8005d66:	d8fa      	bhi.n	8005d5e <memset+0x6a>
 8005d68:	1f22      	subs	r2, r4, #4
 8005d6a:	f022 0203 	bic.w	r2, r2, #3
 8005d6e:	3204      	adds	r2, #4
 8005d70:	4413      	add	r3, r2
 8005d72:	f004 0403 	and.w	r4, r4, #3
 8005d76:	b12c      	cbz	r4, 8005d84 <memset+0x90>
 8005d78:	b2c9      	uxtb	r1, r1
 8005d7a:	441c      	add	r4, r3
 8005d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d1fb      	bne.n	8005d7c <memset+0x88>
 8005d84:	bc70      	pop	{r4, r5, r6}
 8005d86:	4770      	bx	lr
 8005d88:	4614      	mov	r4, r2
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	e7c2      	b.n	8005d14 <memset+0x20>
 8005d8e:	bf00      	nop

08005d90 <snprintf>:
 8005d90:	b40c      	push	{r2, r3}
 8005d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d94:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <snprintf+0x98>)
 8005d96:	2900      	cmp	r1, #0
 8005d98:	b09d      	sub	sp, #116	; 0x74
 8005d9a:	681d      	ldr	r5, [r3, #0]
 8005d9c:	db3e      	blt.n	8005e1c <snprintf+0x8c>
 8005d9e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005da2:	460c      	mov	r4, r1
 8005da4:	9002      	str	r0, [sp, #8]
 8005da6:	9006      	str	r0, [sp, #24]
 8005da8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dac:	ae23      	add	r6, sp, #140	; 0x8c
 8005dae:	d017      	beq.n	8005de0 <snprintf+0x50>
 8005db0:	1e4c      	subs	r4, r1, #1
 8005db2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005db4:	9404      	str	r4, [sp, #16]
 8005db6:	4633      	mov	r3, r6
 8005db8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	a902      	add	r1, sp, #8
 8005dc0:	9407      	str	r4, [sp, #28]
 8005dc2:	9601      	str	r6, [sp, #4]
 8005dc4:	f8ad 7016 	strh.w	r7, [sp, #22]
 8005dc8:	f000 f832 	bl	8005e30 <_svfprintf_r>
 8005dcc:	1c42      	adds	r2, r0, #1
 8005dce:	db22      	blt.n	8005e16 <snprintf+0x86>
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	b01d      	add	sp, #116	; 0x74
 8005dd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005ddc:	b002      	add	sp, #8
 8005dde:	4770      	bx	lr
 8005de0:	4633      	mov	r3, r6
 8005de2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005de6:	4628      	mov	r0, r5
 8005de8:	a902      	add	r1, sp, #8
 8005dea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005dec:	9404      	str	r4, [sp, #16]
 8005dee:	9407      	str	r4, [sp, #28]
 8005df0:	9601      	str	r6, [sp, #4]
 8005df2:	f8ad 7016 	strh.w	r7, [sp, #22]
 8005df6:	f000 f81b 	bl	8005e30 <_svfprintf_r>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	db04      	blt.n	8005e08 <snprintf+0x78>
 8005dfe:	b01d      	add	sp, #116	; 0x74
 8005e00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005e04:	b002      	add	sp, #8
 8005e06:	4770      	bx	lr
 8005e08:	238b      	movs	r3, #139	; 0x8b
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	b01d      	add	sp, #116	; 0x74
 8005e0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005e12:	b002      	add	sp, #8
 8005e14:	4770      	bx	lr
 8005e16:	238b      	movs	r3, #139	; 0x8b
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	e7d9      	b.n	8005dd0 <snprintf+0x40>
 8005e1c:	238b      	movs	r3, #139	; 0x8b
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	e7eb      	b.n	8005dfe <snprintf+0x6e>
 8005e26:	bf00      	nop
 8005e28:	20000548 	.word	0x20000548
 8005e2c:	00000000 	.word	0x00000000

08005e30 <_svfprintf_r>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	b0bf      	sub	sp, #252	; 0xfc
 8005e36:	4689      	mov	r9, r1
 8005e38:	9206      	str	r2, [sp, #24]
 8005e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e3c:	9004      	str	r0, [sp, #16]
 8005e3e:	f002 fa6b 	bl	8008318 <_localeconv_r>
 8005e42:	6803      	ldr	r3, [r0, #0]
 8005e44:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e46:	4618      	mov	r0, r3
 8005e48:	f003 f880 	bl	8008f4c <strlen>
 8005e4c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e50:	9014      	str	r0, [sp, #80]	; 0x50
 8005e52:	061a      	lsls	r2, r3, #24
 8005e54:	d504      	bpl.n	8005e60 <_svfprintf_r+0x30>
 8005e56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f001 80a1 	beq.w	8006fa2 <_svfprintf_r+0x1172>
 8005e60:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80060c8 <_svfprintf_r+0x298>
 8005e64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005e68:	2300      	movs	r3, #0
 8005e6a:	af2e      	add	r7, sp, #184	; 0xb8
 8005e6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e6e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e70:	9322      	str	r3, [sp, #136]	; 0x88
 8005e72:	9312      	str	r3, [sp, #72]	; 0x48
 8005e74:	9315      	str	r3, [sp, #84]	; 0x54
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	9721      	str	r7, [sp, #132]	; 0x84
 8005e7a:	463c      	mov	r4, r7
 8005e7c:	464e      	mov	r6, r9
 8005e7e:	9d06      	ldr	r5, [sp, #24]
 8005e80:	782b      	ldrb	r3, [r5, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80a9 	beq.w	8005fda <_svfprintf_r+0x1aa>
 8005e88:	2b25      	cmp	r3, #37	; 0x25
 8005e8a:	d102      	bne.n	8005e92 <_svfprintf_r+0x62>
 8005e8c:	e0a5      	b.n	8005fda <_svfprintf_r+0x1aa>
 8005e8e:	2b25      	cmp	r3, #37	; 0x25
 8005e90:	d003      	beq.n	8005e9a <_svfprintf_r+0x6a>
 8005e92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f9      	bne.n	8005e8e <_svfprintf_r+0x5e>
 8005e9a:	9b06      	ldr	r3, [sp, #24]
 8005e9c:	1aeb      	subs	r3, r5, r3
 8005e9e:	b173      	cbz	r3, 8005ebe <_svfprintf_r+0x8e>
 8005ea0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ea2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	6020      	str	r0, [r4, #0]
 8005ea8:	3201      	adds	r2, #1
 8005eaa:	4419      	add	r1, r3
 8005eac:	2a07      	cmp	r2, #7
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	9123      	str	r1, [sp, #140]	; 0x8c
 8005eb2:	9222      	str	r2, [sp, #136]	; 0x88
 8005eb4:	dc72      	bgt.n	8005f9c <_svfprintf_r+0x16c>
 8005eb6:	3408      	adds	r4, #8
 8005eb8:	9a07      	ldr	r2, [sp, #28]
 8005eba:	441a      	add	r2, r3
 8005ebc:	9207      	str	r2, [sp, #28]
 8005ebe:	782b      	ldrb	r3, [r5, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 87cb 	beq.w	8006e5c <_svfprintf_r+0x102c>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	1c69      	adds	r1, r5, #1
 8005eca:	786d      	ldrb	r5, [r5, #1]
 8005ecc:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	9308      	str	r3, [sp, #32]
 8005ed4:	9303      	str	r3, [sp, #12]
 8005ed6:	f04f 3aff 	mov.w	sl, #4294967295
 8005eda:	1c4b      	adds	r3, r1, #1
 8005edc:	f1a5 0120 	sub.w	r1, r5, #32
 8005ee0:	2958      	cmp	r1, #88	; 0x58
 8005ee2:	f200 83e4 	bhi.w	80066ae <_svfprintf_r+0x87e>
 8005ee6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005eea:	0277      	.short	0x0277
 8005eec:	03e203e2 	.word	0x03e203e2
 8005ef0:	03e2037b 	.word	0x03e2037b
 8005ef4:	03e203e2 	.word	0x03e203e2
 8005ef8:	03e203e2 	.word	0x03e203e2
 8005efc:	02f703e2 	.word	0x02f703e2
 8005f00:	03e20214 	.word	0x03e20214
 8005f04:	021801fb 	.word	0x021801fb
 8005f08:	038203e2 	.word	0x038203e2
 8005f0c:	02c102c1 	.word	0x02c102c1
 8005f10:	02c102c1 	.word	0x02c102c1
 8005f14:	02c102c1 	.word	0x02c102c1
 8005f18:	02c102c1 	.word	0x02c102c1
 8005f1c:	03e202c1 	.word	0x03e202c1
 8005f20:	03e203e2 	.word	0x03e203e2
 8005f24:	03e203e2 	.word	0x03e203e2
 8005f28:	03e203e2 	.word	0x03e203e2
 8005f2c:	03e203e2 	.word	0x03e203e2
 8005f30:	02d003e2 	.word	0x02d003e2
 8005f34:	03e20391 	.word	0x03e20391
 8005f38:	03e20391 	.word	0x03e20391
 8005f3c:	03e203e2 	.word	0x03e203e2
 8005f40:	037403e2 	.word	0x037403e2
 8005f44:	03e203e2 	.word	0x03e203e2
 8005f48:	03e2030c 	.word	0x03e2030c
 8005f4c:	03e203e2 	.word	0x03e203e2
 8005f50:	03e203e2 	.word	0x03e203e2
 8005f54:	03e2032a 	.word	0x03e2032a
 8005f58:	034403e2 	.word	0x034403e2
 8005f5c:	03e203e2 	.word	0x03e203e2
 8005f60:	03e203e2 	.word	0x03e203e2
 8005f64:	03e203e2 	.word	0x03e203e2
 8005f68:	03e203e2 	.word	0x03e203e2
 8005f6c:	03e203e2 	.word	0x03e203e2
 8005f70:	0233035f 	.word	0x0233035f
 8005f74:	03910391 	.word	0x03910391
 8005f78:	03050391 	.word	0x03050391
 8005f7c:	03e20233 	.word	0x03e20233
 8005f80:	02ed03e2 	.word	0x02ed03e2
 8005f84:	028503e2 	.word	0x028503e2
 8005f88:	03cb0202 	.word	0x03cb0202
 8005f8c:	03e2027e 	.word	0x03e2027e
 8005f90:	03e20299 	.word	0x03e20299
 8005f94:	03e2007a 	.word	0x03e2007a
 8005f98:	025103e2 	.word	0x025103e2
 8005f9c:	9804      	ldr	r0, [sp, #16]
 8005f9e:	9303      	str	r3, [sp, #12]
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	aa21      	add	r2, sp, #132	; 0x84
 8005fa4:	f003 f800 	bl	8008fa8 <__ssprint_r>
 8005fa8:	b950      	cbnz	r0, 8005fc0 <_svfprintf_r+0x190>
 8005faa:	463c      	mov	r4, r7
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	e783      	b.n	8005eb8 <_svfprintf_r+0x88>
 8005fb0:	9804      	ldr	r0, [sp, #16]
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	aa21      	add	r2, sp, #132	; 0x84
 8005fb6:	f002 fff7 	bl	8008fa8 <__ssprint_r>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	f000 818c 	beq.w	80062d8 <_svfprintf_r+0x4a8>
 8005fc0:	46b1      	mov	r9, r6
 8005fc2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005fc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fca:	9b07      	ldr	r3, [sp, #28]
 8005fcc:	bf18      	it	ne
 8005fce:	f04f 33ff 	movne.w	r3, #4294967295
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	b03f      	add	sp, #252	; 0xfc
 8005fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fda:	9d06      	ldr	r5, [sp, #24]
 8005fdc:	e76f      	b.n	8005ebe <_svfprintf_r+0x8e>
 8005fde:	9306      	str	r3, [sp, #24]
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	0698      	lsls	r0, r3, #26
 8005fe4:	f140 82b4 	bpl.w	8006550 <_svfprintf_r+0x720>
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fea:	f103 0907 	add.w	r9, r3, #7
 8005fee:	f029 0307 	bic.w	r3, r9, #7
 8005ff2:	f103 0208 	add.w	r2, r3, #8
 8005ff6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ffa:	920a      	str	r2, [sp, #40]	; 0x28
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f04f 0c00 	mov.w	ip, #0
 8006002:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8006006:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800600a:	f1ba 0f00 	cmp.w	sl, #0
 800600e:	db03      	blt.n	8006018 <_svfprintf_r+0x1e8>
 8006010:	9a03      	ldr	r2, [sp, #12]
 8006012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006016:	9203      	str	r2, [sp, #12]
 8006018:	ea58 0209 	orrs.w	r2, r8, r9
 800601c:	f040 8357 	bne.w	80066ce <_svfprintf_r+0x89e>
 8006020:	f1ba 0f00 	cmp.w	sl, #0
 8006024:	f000 845c 	beq.w	80068e0 <_svfprintf_r+0xab0>
 8006028:	2b01      	cmp	r3, #1
 800602a:	f000 835a 	beq.w	80066e2 <_svfprintf_r+0x8b2>
 800602e:	2b02      	cmp	r3, #2
 8006030:	f000 849a 	beq.w	8006968 <_svfprintf_r+0xb38>
 8006034:	4639      	mov	r1, r7
 8006036:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 800603a:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 800603e:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8006042:	f008 0307 	and.w	r3, r8, #7
 8006046:	4681      	mov	r9, r0
 8006048:	4690      	mov	r8, r2
 800604a:	3330      	adds	r3, #48	; 0x30
 800604c:	ea58 0209 	orrs.w	r2, r8, r9
 8006050:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8006054:	d1ef      	bne.n	8006036 <_svfprintf_r+0x206>
 8006056:	9a03      	ldr	r2, [sp, #12]
 8006058:	910c      	str	r1, [sp, #48]	; 0x30
 800605a:	07d2      	lsls	r2, r2, #31
 800605c:	f100 856e 	bmi.w	8006b3c <_svfprintf_r+0xd0c>
 8006060:	1a7b      	subs	r3, r7, r1
 8006062:	9309      	str	r3, [sp, #36]	; 0x24
 8006064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006066:	4592      	cmp	sl, r2
 8006068:	4653      	mov	r3, sl
 800606a:	bfb8      	it	lt
 800606c:	4613      	movlt	r3, r2
 800606e:	9305      	str	r3, [sp, #20]
 8006070:	2300      	movs	r3, #0
 8006072:	930e      	str	r3, [sp, #56]	; 0x38
 8006074:	f1bc 0f00 	cmp.w	ip, #0
 8006078:	d002      	beq.n	8006080 <_svfprintf_r+0x250>
 800607a:	9b05      	ldr	r3, [sp, #20]
 800607c:	3301      	adds	r3, #1
 800607e:	9305      	str	r3, [sp, #20]
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	f013 0302 	ands.w	r3, r3, #2
 8006086:	930b      	str	r3, [sp, #44]	; 0x2c
 8006088:	d002      	beq.n	8006090 <_svfprintf_r+0x260>
 800608a:	9b05      	ldr	r3, [sp, #20]
 800608c:	3302      	adds	r3, #2
 800608e:	9305      	str	r3, [sp, #20]
 8006090:	9b03      	ldr	r3, [sp, #12]
 8006092:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8006096:	f040 8317 	bne.w	80066c8 <_svfprintf_r+0x898>
 800609a:	9b08      	ldr	r3, [sp, #32]
 800609c:	9a05      	ldr	r2, [sp, #20]
 800609e:	ebc2 0803 	rsb	r8, r2, r3
 80060a2:	f1b8 0f00 	cmp.w	r8, #0
 80060a6:	f340 830f 	ble.w	80066c8 <_svfprintf_r+0x898>
 80060aa:	f1b8 0f10 	cmp.w	r8, #16
 80060ae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80060b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060b2:	f8df a01c 	ldr.w	sl, [pc, #28]	; 80060d0 <_svfprintf_r+0x2a0>
 80060b6:	dd30      	ble.n	800611a <_svfprintf_r+0x2ea>
 80060b8:	4653      	mov	r3, sl
 80060ba:	f04f 0b10 	mov.w	fp, #16
 80060be:	46c2      	mov	sl, r8
 80060c0:	46a8      	mov	r8, r5
 80060c2:	461d      	mov	r5, r3
 80060c4:	e00d      	b.n	80060e2 <_svfprintf_r+0x2b2>
 80060c6:	bf00      	nop
	...
 80060d0:	0800a034 	.word	0x0800a034
 80060d4:	f1aa 0a10 	sub.w	sl, sl, #16
 80060d8:	f1ba 0f10 	cmp.w	sl, #16
 80060dc:	f104 0408 	add.w	r4, r4, #8
 80060e0:	dd17      	ble.n	8006112 <_svfprintf_r+0x2e2>
 80060e2:	3201      	adds	r2, #1
 80060e4:	3110      	adds	r1, #16
 80060e6:	2a07      	cmp	r2, #7
 80060e8:	9123      	str	r1, [sp, #140]	; 0x8c
 80060ea:	9222      	str	r2, [sp, #136]	; 0x88
 80060ec:	e884 0820 	stmia.w	r4, {r5, fp}
 80060f0:	ddf0      	ble.n	80060d4 <_svfprintf_r+0x2a4>
 80060f2:	9804      	ldr	r0, [sp, #16]
 80060f4:	4631      	mov	r1, r6
 80060f6:	aa21      	add	r2, sp, #132	; 0x84
 80060f8:	f002 ff56 	bl	8008fa8 <__ssprint_r>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f47f af5f 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006102:	f1aa 0a10 	sub.w	sl, sl, #16
 8006106:	f1ba 0f10 	cmp.w	sl, #16
 800610a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800610c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800610e:	463c      	mov	r4, r7
 8006110:	dce7      	bgt.n	80060e2 <_svfprintf_r+0x2b2>
 8006112:	462b      	mov	r3, r5
 8006114:	4645      	mov	r5, r8
 8006116:	46d0      	mov	r8, sl
 8006118:	469a      	mov	sl, r3
 800611a:	3201      	adds	r2, #1
 800611c:	eb08 0b01 	add.w	fp, r8, r1
 8006120:	2a07      	cmp	r2, #7
 8006122:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006126:	9222      	str	r2, [sp, #136]	; 0x88
 8006128:	f8c4 a000 	str.w	sl, [r4]
 800612c:	f8c4 8004 	str.w	r8, [r4, #4]
 8006130:	f300 847e 	bgt.w	8006a30 <_svfprintf_r+0xc00>
 8006134:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006138:	3408      	adds	r4, #8
 800613a:	f1bc 0f00 	cmp.w	ip, #0
 800613e:	d00f      	beq.n	8006160 <_svfprintf_r+0x330>
 8006140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006142:	3301      	adds	r3, #1
 8006144:	f10b 0b01 	add.w	fp, fp, #1
 8006148:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 800614c:	2201      	movs	r2, #1
 800614e:	2b07      	cmp	r3, #7
 8006150:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006154:	9322      	str	r3, [sp, #136]	; 0x88
 8006156:	e884 0006 	stmia.w	r4, {r1, r2}
 800615a:	f300 83ea 	bgt.w	8006932 <_svfprintf_r+0xb02>
 800615e:	3408      	adds	r4, #8
 8006160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006162:	b173      	cbz	r3, 8006182 <_svfprintf_r+0x352>
 8006164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006166:	3301      	adds	r3, #1
 8006168:	f10b 0b02 	add.w	fp, fp, #2
 800616c:	a91a      	add	r1, sp, #104	; 0x68
 800616e:	2202      	movs	r2, #2
 8006170:	2b07      	cmp	r3, #7
 8006172:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006176:	9322      	str	r3, [sp, #136]	; 0x88
 8006178:	e884 0006 	stmia.w	r4, {r1, r2}
 800617c:	f300 83cd 	bgt.w	800691a <_svfprintf_r+0xaea>
 8006180:	3408      	adds	r4, #8
 8006182:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006186:	f000 8315 	beq.w	80067b4 <_svfprintf_r+0x984>
 800618a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800618c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618e:	ebc2 0a03 	rsb	sl, r2, r3
 8006192:	f1ba 0f00 	cmp.w	sl, #0
 8006196:	dd3c      	ble.n	8006212 <_svfprintf_r+0x3e2>
 8006198:	f1ba 0f10 	cmp.w	sl, #16
 800619c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800619e:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 8006604 <_svfprintf_r+0x7d4>
 80061a2:	dd2b      	ble.n	80061fc <_svfprintf_r+0x3cc>
 80061a4:	4649      	mov	r1, r9
 80061a6:	465b      	mov	r3, fp
 80061a8:	46a9      	mov	r9, r5
 80061aa:	f04f 0810 	mov.w	r8, #16
 80061ae:	f8dd b010 	ldr.w	fp, [sp, #16]
 80061b2:	460d      	mov	r5, r1
 80061b4:	e006      	b.n	80061c4 <_svfprintf_r+0x394>
 80061b6:	f1aa 0a10 	sub.w	sl, sl, #16
 80061ba:	f1ba 0f10 	cmp.w	sl, #16
 80061be:	f104 0408 	add.w	r4, r4, #8
 80061c2:	dd17      	ble.n	80061f4 <_svfprintf_r+0x3c4>
 80061c4:	3201      	adds	r2, #1
 80061c6:	3310      	adds	r3, #16
 80061c8:	2a07      	cmp	r2, #7
 80061ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80061cc:	9222      	str	r2, [sp, #136]	; 0x88
 80061ce:	e884 0120 	stmia.w	r4, {r5, r8}
 80061d2:	ddf0      	ble.n	80061b6 <_svfprintf_r+0x386>
 80061d4:	4658      	mov	r0, fp
 80061d6:	4631      	mov	r1, r6
 80061d8:	aa21      	add	r2, sp, #132	; 0x84
 80061da:	f002 fee5 	bl	8008fa8 <__ssprint_r>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f47f aeee 	bne.w	8005fc0 <_svfprintf_r+0x190>
 80061e4:	f1aa 0a10 	sub.w	sl, sl, #16
 80061e8:	f1ba 0f10 	cmp.w	sl, #16
 80061ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061f0:	463c      	mov	r4, r7
 80061f2:	dce7      	bgt.n	80061c4 <_svfprintf_r+0x394>
 80061f4:	469b      	mov	fp, r3
 80061f6:	462b      	mov	r3, r5
 80061f8:	464d      	mov	r5, r9
 80061fa:	4699      	mov	r9, r3
 80061fc:	3201      	adds	r2, #1
 80061fe:	44d3      	add	fp, sl
 8006200:	2a07      	cmp	r2, #7
 8006202:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006206:	9222      	str	r2, [sp, #136]	; 0x88
 8006208:	e884 0600 	stmia.w	r4, {r9, sl}
 800620c:	f300 8379 	bgt.w	8006902 <_svfprintf_r+0xad2>
 8006210:	3408      	adds	r4, #8
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	05d9      	lsls	r1, r3, #23
 8006216:	f100 8270 	bmi.w	80066fa <_svfprintf_r+0x8ca>
 800621a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800621c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800621e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006220:	6022      	str	r2, [r4, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	448b      	add	fp, r1
 8006226:	2b07      	cmp	r3, #7
 8006228:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800622c:	6061      	str	r1, [r4, #4]
 800622e:	9322      	str	r3, [sp, #136]	; 0x88
 8006230:	f300 834a 	bgt.w	80068c8 <_svfprintf_r+0xa98>
 8006234:	3408      	adds	r4, #8
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	075a      	lsls	r2, r3, #29
 800623a:	d541      	bpl.n	80062c0 <_svfprintf_r+0x490>
 800623c:	9b08      	ldr	r3, [sp, #32]
 800623e:	9a05      	ldr	r2, [sp, #20]
 8006240:	1a9d      	subs	r5, r3, r2
 8006242:	2d00      	cmp	r5, #0
 8006244:	dd3c      	ble.n	80062c0 <_svfprintf_r+0x490>
 8006246:	2d10      	cmp	r5, #16
 8006248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800624a:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8006608 <_svfprintf_r+0x7d8>
 800624e:	dd23      	ble.n	8006298 <_svfprintf_r+0x468>
 8006250:	f04f 0810 	mov.w	r8, #16
 8006254:	465a      	mov	r2, fp
 8006256:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800625a:	e004      	b.n	8006266 <_svfprintf_r+0x436>
 800625c:	3d10      	subs	r5, #16
 800625e:	2d10      	cmp	r5, #16
 8006260:	f104 0408 	add.w	r4, r4, #8
 8006264:	dd17      	ble.n	8006296 <_svfprintf_r+0x466>
 8006266:	3301      	adds	r3, #1
 8006268:	3210      	adds	r2, #16
 800626a:	2b07      	cmp	r3, #7
 800626c:	9223      	str	r2, [sp, #140]	; 0x8c
 800626e:	9322      	str	r3, [sp, #136]	; 0x88
 8006270:	f8c4 a000 	str.w	sl, [r4]
 8006274:	f8c4 8004 	str.w	r8, [r4, #4]
 8006278:	ddf0      	ble.n	800625c <_svfprintf_r+0x42c>
 800627a:	4648      	mov	r0, r9
 800627c:	4631      	mov	r1, r6
 800627e:	aa21      	add	r2, sp, #132	; 0x84
 8006280:	f002 fe92 	bl	8008fa8 <__ssprint_r>
 8006284:	2800      	cmp	r0, #0
 8006286:	f47f ae9b 	bne.w	8005fc0 <_svfprintf_r+0x190>
 800628a:	3d10      	subs	r5, #16
 800628c:	2d10      	cmp	r5, #16
 800628e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006290:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006292:	463c      	mov	r4, r7
 8006294:	dce7      	bgt.n	8006266 <_svfprintf_r+0x436>
 8006296:	4693      	mov	fp, r2
 8006298:	3301      	adds	r3, #1
 800629a:	44ab      	add	fp, r5
 800629c:	2b07      	cmp	r3, #7
 800629e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80062a2:	9322      	str	r3, [sp, #136]	; 0x88
 80062a4:	f8c4 a000 	str.w	sl, [r4]
 80062a8:	6065      	str	r5, [r4, #4]
 80062aa:	dd09      	ble.n	80062c0 <_svfprintf_r+0x490>
 80062ac:	9804      	ldr	r0, [sp, #16]
 80062ae:	4631      	mov	r1, r6
 80062b0:	aa21      	add	r2, sp, #132	; 0x84
 80062b2:	f002 fe79 	bl	8008fa8 <__ssprint_r>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f47f ae82 	bne.w	8005fc0 <_svfprintf_r+0x190>
 80062bc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80062c0:	9b07      	ldr	r3, [sp, #28]
 80062c2:	9a05      	ldr	r2, [sp, #20]
 80062c4:	9908      	ldr	r1, [sp, #32]
 80062c6:	428a      	cmp	r2, r1
 80062c8:	bfac      	ite	ge
 80062ca:	189b      	addge	r3, r3, r2
 80062cc:	185b      	addlt	r3, r3, r1
 80062ce:	9307      	str	r3, [sp, #28]
 80062d0:	f1bb 0f00 	cmp.w	fp, #0
 80062d4:	f47f ae6c 	bne.w	8005fb0 <_svfprintf_r+0x180>
 80062d8:	2300      	movs	r3, #0
 80062da:	9322      	str	r3, [sp, #136]	; 0x88
 80062dc:	463c      	mov	r4, r7
 80062de:	e5ce      	b.n	8005e7e <_svfprintf_r+0x4e>
 80062e0:	4619      	mov	r1, r3
 80062e2:	9803      	ldr	r0, [sp, #12]
 80062e4:	781d      	ldrb	r5, [r3, #0]
 80062e6:	f040 0004 	orr.w	r0, r0, #4
 80062ea:	9003      	str	r0, [sp, #12]
 80062ec:	e5f5      	b.n	8005eda <_svfprintf_r+0xaa>
 80062ee:	9306      	str	r3, [sp, #24]
 80062f0:	9b03      	ldr	r3, [sp, #12]
 80062f2:	f013 0320 	ands.w	r3, r3, #32
 80062f6:	f000 810e 	beq.w	8006516 <_svfprintf_r+0x6e6>
 80062fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fc:	f103 0907 	add.w	r9, r3, #7
 8006300:	f029 0307 	bic.w	r3, r9, #7
 8006304:	f103 0208 	add.w	r2, r3, #8
 8006308:	e9d3 8900 	ldrd	r8, r9, [r3]
 800630c:	920a      	str	r2, [sp, #40]	; 0x28
 800630e:	2300      	movs	r3, #0
 8006310:	e675      	b.n	8005ffe <_svfprintf_r+0x1ce>
 8006312:	781d      	ldrb	r5, [r3, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	222b      	movs	r2, #43	; 0x2b
 8006318:	e5df      	b.n	8005eda <_svfprintf_r+0xaa>
 800631a:	781d      	ldrb	r5, [r3, #0]
 800631c:	2d2a      	cmp	r5, #42	; 0x2a
 800631e:	f103 0101 	add.w	r1, r3, #1
 8006322:	f000 87b8 	beq.w	8007296 <_svfprintf_r+0x1466>
 8006326:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800632a:	2809      	cmp	r0, #9
 800632c:	460b      	mov	r3, r1
 800632e:	f04f 0a00 	mov.w	sl, #0
 8006332:	f63f add3 	bhi.w	8005edc <_svfprintf_r+0xac>
 8006336:	f813 5b01 	ldrb.w	r5, [r3], #1
 800633a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800633e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8006342:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006346:	2809      	cmp	r0, #9
 8006348:	d9f5      	bls.n	8006336 <_svfprintf_r+0x506>
 800634a:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 800634e:	e5c5      	b.n	8005edc <_svfprintf_r+0xac>
 8006350:	9306      	str	r3, [sp, #24]
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006358:	069b      	lsls	r3, r3, #26
 800635a:	f140 80a1 	bpl.w	80064a0 <_svfprintf_r+0x670>
 800635e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006360:	f103 0907 	add.w	r9, r3, #7
 8006364:	f029 0907 	bic.w	r9, r9, #7
 8006368:	e9d9 2300 	ldrd	r2, r3, [r9]
 800636c:	f109 0108 	add.w	r1, r9, #8
 8006370:	910a      	str	r1, [sp, #40]	; 0x28
 8006372:	4690      	mov	r8, r2
 8006374:	4699      	mov	r9, r3
 8006376:	2a00      	cmp	r2, #0
 8006378:	f173 0300 	sbcs.w	r3, r3, #0
 800637c:	f2c0 840e 	blt.w	8006b9c <_svfprintf_r+0xd6c>
 8006380:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006384:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006388:	2301      	movs	r3, #1
 800638a:	e63e      	b.n	800600a <_svfprintf_r+0x1da>
 800638c:	9306      	str	r3, [sp, #24]
 800638e:	4b9b      	ldr	r3, [pc, #620]	; (80065fc <_svfprintf_r+0x7cc>)
 8006390:	9312      	str	r3, [sp, #72]	; 0x48
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006398:	069b      	lsls	r3, r3, #26
 800639a:	f140 80f3 	bpl.w	8006584 <_svfprintf_r+0x754>
 800639e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a0:	f103 0907 	add.w	r9, r3, #7
 80063a4:	f029 0307 	bic.w	r3, r9, #7
 80063a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ac:	f103 0208 	add.w	r2, r3, #8
 80063b0:	920a      	str	r2, [sp, #40]	; 0x28
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	07d9      	lsls	r1, r3, #31
 80063b6:	f140 80f5 	bpl.w	80065a4 <_svfprintf_r+0x774>
 80063ba:	ea58 0309 	orrs.w	r3, r8, r9
 80063be:	f000 80f1 	beq.w	80065a4 <_svfprintf_r+0x774>
 80063c2:	9a03      	ldr	r2, [sp, #12]
 80063c4:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 80063c8:	2330      	movs	r3, #48	; 0x30
 80063ca:	f042 0202 	orr.w	r2, r2, #2
 80063ce:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80063d2:	9203      	str	r2, [sp, #12]
 80063d4:	2302      	movs	r3, #2
 80063d6:	e612      	b.n	8005ffe <_svfprintf_r+0x1ce>
 80063d8:	781d      	ldrb	r5, [r3, #0]
 80063da:	4619      	mov	r1, r3
 80063dc:	2a00      	cmp	r2, #0
 80063de:	f47f ad7c 	bne.w	8005eda <_svfprintf_r+0xaa>
 80063e2:	2220      	movs	r2, #32
 80063e4:	e579      	b.n	8005eda <_svfprintf_r+0xaa>
 80063e6:	9903      	ldr	r1, [sp, #12]
 80063e8:	f041 0120 	orr.w	r1, r1, #32
 80063ec:	9103      	str	r1, [sp, #12]
 80063ee:	781d      	ldrb	r5, [r3, #0]
 80063f0:	4619      	mov	r1, r3
 80063f2:	e572      	b.n	8005eda <_svfprintf_r+0xaa>
 80063f4:	9306      	str	r3, [sp, #24]
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80063fc:	069a      	lsls	r2, r3, #26
 80063fe:	f140 84b0 	bpl.w	8006d62 <_svfprintf_r+0xf32>
 8006402:	9907      	ldr	r1, [sp, #28]
 8006404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006406:	ea4f 79e1 	mov.w	r9, r1, asr #31
 800640a:	6813      	ldr	r3, [r2, #0]
 800640c:	4608      	mov	r0, r1
 800640e:	4688      	mov	r8, r1
 8006410:	3204      	adds	r2, #4
 8006412:	4649      	mov	r1, r9
 8006414:	920a      	str	r2, [sp, #40]	; 0x28
 8006416:	e9c3 0100 	strd	r0, r1, [r3]
 800641a:	e530      	b.n	8005e7e <_svfprintf_r+0x4e>
 800641c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800641e:	9306      	str	r3, [sp, #24]
 8006420:	6813      	ldr	r3, [r2, #0]
 8006422:	930c      	str	r3, [sp, #48]	; 0x30
 8006424:	f04f 0b00 	mov.w	fp, #0
 8006428:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 800642c:	f102 0904 	add.w	r9, r2, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8646 	beq.w	80070c2 <_svfprintf_r+0x1292>
 8006436:	f1ba 0f00 	cmp.w	sl, #0
 800643a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800643c:	f2c0 85f6 	blt.w	800702c <_svfprintf_r+0x11fc>
 8006440:	4659      	mov	r1, fp
 8006442:	4652      	mov	r2, sl
 8006444:	f002 f9fe 	bl	8008844 <memchr>
 8006448:	2800      	cmp	r0, #0
 800644a:	f000 8677 	beq.w	800713c <_svfprintf_r+0x130c>
 800644e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006450:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006454:	1ac3      	subs	r3, r0, r3
 8006456:	9309      	str	r3, [sp, #36]	; 0x24
 8006458:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800645c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006466:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800646a:	e603      	b.n	8006074 <_svfprintf_r+0x244>
 800646c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006470:	2100      	movs	r1, #0
 8006472:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006476:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800647a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800647e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006482:	2809      	cmp	r0, #9
 8006484:	d9f5      	bls.n	8006472 <_svfprintf_r+0x642>
 8006486:	9108      	str	r1, [sp, #32]
 8006488:	e528      	b.n	8005edc <_svfprintf_r+0xac>
 800648a:	9306      	str	r3, [sp, #24]
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006492:	f043 0310 	orr.w	r3, r3, #16
 8006496:	9303      	str	r3, [sp, #12]
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	069b      	lsls	r3, r3, #26
 800649c:	f53f af5f 	bmi.w	800635e <_svfprintf_r+0x52e>
 80064a0:	9b03      	ldr	r3, [sp, #12]
 80064a2:	06d8      	lsls	r0, r3, #27
 80064a4:	f100 836b 	bmi.w	8006b7e <_svfprintf_r+0xd4e>
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	0659      	lsls	r1, r3, #25
 80064ac:	f140 8367 	bpl.w	8006b7e <_svfprintf_r+0xd4e>
 80064b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064b2:	f9b1 8000 	ldrsh.w	r8, [r1]
 80064b6:	3104      	adds	r1, #4
 80064b8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80064bc:	4642      	mov	r2, r8
 80064be:	464b      	mov	r3, r9
 80064c0:	910a      	str	r1, [sp, #40]	; 0x28
 80064c2:	e758      	b.n	8006376 <_svfprintf_r+0x546>
 80064c4:	781d      	ldrb	r5, [r3, #0]
 80064c6:	9903      	ldr	r1, [sp, #12]
 80064c8:	2d6c      	cmp	r5, #108	; 0x6c
 80064ca:	f000 84d3 	beq.w	8006e74 <_svfprintf_r+0x1044>
 80064ce:	f041 0110 	orr.w	r1, r1, #16
 80064d2:	9103      	str	r1, [sp, #12]
 80064d4:	4619      	mov	r1, r3
 80064d6:	e500      	b.n	8005eda <_svfprintf_r+0xaa>
 80064d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80064da:	6829      	ldr	r1, [r5, #0]
 80064dc:	9108      	str	r1, [sp, #32]
 80064de:	4608      	mov	r0, r1
 80064e0:	2800      	cmp	r0, #0
 80064e2:	4629      	mov	r1, r5
 80064e4:	f101 0104 	add.w	r1, r1, #4
 80064e8:	f2c0 84cb 	blt.w	8006e82 <_svfprintf_r+0x1052>
 80064ec:	910a      	str	r1, [sp, #40]	; 0x28
 80064ee:	781d      	ldrb	r5, [r3, #0]
 80064f0:	4619      	mov	r1, r3
 80064f2:	e4f2      	b.n	8005eda <_svfprintf_r+0xaa>
 80064f4:	9903      	ldr	r1, [sp, #12]
 80064f6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80064fa:	9103      	str	r1, [sp, #12]
 80064fc:	781d      	ldrb	r5, [r3, #0]
 80064fe:	4619      	mov	r1, r3
 8006500:	e4eb      	b.n	8005eda <_svfprintf_r+0xaa>
 8006502:	9306      	str	r3, [sp, #24]
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	f043 0310 	orr.w	r3, r3, #16
 800650a:	9303      	str	r3, [sp, #12]
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	f013 0320 	ands.w	r3, r3, #32
 8006512:	f47f aef2 	bne.w	80062fa <_svfprintf_r+0x4ca>
 8006516:	9a03      	ldr	r2, [sp, #12]
 8006518:	f012 0210 	ands.w	r2, r2, #16
 800651c:	f040 831c 	bne.w	8006b58 <_svfprintf_r+0xd28>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006526:	f000 8317 	beq.w	8006b58 <_svfprintf_r+0xd28>
 800652a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800652c:	4613      	mov	r3, r2
 800652e:	460a      	mov	r2, r1
 8006530:	3204      	adds	r2, #4
 8006532:	f8b1 8000 	ldrh.w	r8, [r1]
 8006536:	920a      	str	r2, [sp, #40]	; 0x28
 8006538:	f04f 0900 	mov.w	r9, #0
 800653c:	e55f      	b.n	8005ffe <_svfprintf_r+0x1ce>
 800653e:	9306      	str	r3, [sp, #24]
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	f043 0310 	orr.w	r3, r3, #16
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	0698      	lsls	r0, r3, #26
 800654c:	f53f ad4c 	bmi.w	8005fe8 <_svfprintf_r+0x1b8>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	06d9      	lsls	r1, r3, #27
 8006554:	f100 8309 	bmi.w	8006b6a <_svfprintf_r+0xd3a>
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	065a      	lsls	r2, r3, #25
 800655c:	f140 8305 	bpl.w	8006b6a <_svfprintf_r+0xd3a>
 8006560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006562:	f8b2 8000 	ldrh.w	r8, [r2]
 8006566:	3204      	adds	r2, #4
 8006568:	f04f 0900 	mov.w	r9, #0
 800656c:	2301      	movs	r3, #1
 800656e:	920a      	str	r2, [sp, #40]	; 0x28
 8006570:	e545      	b.n	8005ffe <_svfprintf_r+0x1ce>
 8006572:	9306      	str	r3, [sp, #24]
 8006574:	4b22      	ldr	r3, [pc, #136]	; (8006600 <_svfprintf_r+0x7d0>)
 8006576:	9312      	str	r3, [sp, #72]	; 0x48
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800657e:	069b      	lsls	r3, r3, #26
 8006580:	f53f af0d 	bmi.w	800639e <_svfprintf_r+0x56e>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	06d8      	lsls	r0, r3, #27
 8006588:	f140 83dc 	bpl.w	8006d44 <_svfprintf_r+0xf14>
 800658c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800658e:	4613      	mov	r3, r2
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4698      	mov	r8, r3
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	3204      	adds	r2, #4
 8006598:	07d9      	lsls	r1, r3, #31
 800659a:	920a      	str	r2, [sp, #40]	; 0x28
 800659c:	f04f 0900 	mov.w	r9, #0
 80065a0:	f53f af0b 	bmi.w	80063ba <_svfprintf_r+0x58a>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e52a      	b.n	8005ffe <_svfprintf_r+0x1ce>
 80065a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065aa:	9306      	str	r3, [sp, #24]
 80065ac:	680a      	ldr	r2, [r1, #0]
 80065ae:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80065b2:	2300      	movs	r3, #0
 80065b4:	2201      	movs	r2, #1
 80065b6:	3104      	adds	r1, #4
 80065b8:	469c      	mov	ip, r3
 80065ba:	9205      	str	r2, [sp, #20]
 80065bc:	910a      	str	r1, [sp, #40]	; 0x28
 80065be:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80065c2:	ab24      	add	r3, sp, #144	; 0x90
 80065c4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80065c8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80065cc:	9209      	str	r2, [sp, #36]	; 0x24
 80065ce:	930c      	str	r3, [sp, #48]	; 0x30
 80065d0:	e556      	b.n	8006080 <_svfprintf_r+0x250>
 80065d2:	9903      	ldr	r1, [sp, #12]
 80065d4:	f041 0108 	orr.w	r1, r1, #8
 80065d8:	9103      	str	r1, [sp, #12]
 80065da:	781d      	ldrb	r5, [r3, #0]
 80065dc:	4619      	mov	r1, r3
 80065de:	e47c      	b.n	8005eda <_svfprintf_r+0xaa>
 80065e0:	9903      	ldr	r1, [sp, #12]
 80065e2:	f041 0101 	orr.w	r1, r1, #1
 80065e6:	9103      	str	r1, [sp, #12]
 80065e8:	781d      	ldrb	r5, [r3, #0]
 80065ea:	4619      	mov	r1, r3
 80065ec:	e475      	b.n	8005eda <_svfprintf_r+0xaa>
 80065ee:	9903      	ldr	r1, [sp, #12]
 80065f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80065f4:	9103      	str	r1, [sp, #12]
 80065f6:	781d      	ldrb	r5, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	e46e      	b.n	8005eda <_svfprintf_r+0xaa>
 80065fc:	0800a068 	.word	0x0800a068
 8006600:	0800a054 	.word	0x0800a054
 8006604:	0800a024 	.word	0x0800a024
 8006608:	0800a034 	.word	0x0800a034
 800660c:	9306      	str	r3, [sp, #24]
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006614:	f013 0f08 	tst.w	r3, #8
 8006618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661a:	46d3      	mov	fp, sl
 800661c:	f103 0907 	add.w	r9, r3, #7
 8006620:	f000 8386 	beq.w	8006d30 <_svfprintf_r+0xf00>
 8006624:	f029 0307 	bic.w	r3, r9, #7
 8006628:	ed93 7b00 	vldr	d7, [r3]
 800662c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006630:	f103 0208 	add.w	r2, r3, #8
 8006634:	920a      	str	r2, [sp, #40]	; 0x28
 8006636:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800663a:	f002 fc47 	bl	8008ecc <__fpclassifyd>
 800663e:	2801      	cmp	r0, #1
 8006640:	f040 835a 	bne.w	8006cf8 <_svfprintf_r+0xec8>
 8006644:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006648:	2200      	movs	r2, #0
 800664a:	2300      	movs	r3, #0
 800664c:	f7ff f8f6 	bl	800583c <__aeabi_dcmplt>
 8006650:	2800      	cmp	r0, #0
 8006652:	f040 856b 	bne.w	800712c <_svfprintf_r+0x12fc>
 8006656:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	4abd      	ldr	r2, [pc, #756]	; (8006954 <_svfprintf_r+0xb24>)
 800665e:	f8df e300 	ldr.w	lr, [pc, #768]	; 8006960 <_svfprintf_r+0xb30>
 8006662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006666:	9303      	str	r3, [sp, #12]
 8006668:	4613      	mov	r3, r2
 800666a:	2103      	movs	r1, #3
 800666c:	2000      	movs	r0, #0
 800666e:	2d47      	cmp	r5, #71	; 0x47
 8006670:	bfd8      	it	le
 8006672:	4673      	movle	r3, lr
 8006674:	9105      	str	r1, [sp, #20]
 8006676:	900d      	str	r0, [sp, #52]	; 0x34
 8006678:	930c      	str	r3, [sp, #48]	; 0x30
 800667a:	9109      	str	r1, [sp, #36]	; 0x24
 800667c:	900e      	str	r0, [sp, #56]	; 0x38
 800667e:	e4f9      	b.n	8006074 <_svfprintf_r+0x244>
 8006680:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006682:	9903      	ldr	r1, [sp, #12]
 8006684:	9306      	str	r3, [sp, #24]
 8006686:	2230      	movs	r2, #48	; 0x30
 8006688:	6803      	ldr	r3, [r0, #0]
 800668a:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 800668e:	4602      	mov	r2, r0
 8006690:	2578      	movs	r5, #120	; 0x78
 8006692:	f041 0102 	orr.w	r1, r1, #2
 8006696:	3204      	adds	r2, #4
 8006698:	4698      	mov	r8, r3
 800669a:	4baf      	ldr	r3, [pc, #700]	; (8006958 <_svfprintf_r+0xb28>)
 800669c:	9312      	str	r3, [sp, #72]	; 0x48
 800669e:	9103      	str	r1, [sp, #12]
 80066a0:	920a      	str	r2, [sp, #40]	; 0x28
 80066a2:	f04f 0900 	mov.w	r9, #0
 80066a6:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 80066aa:	2302      	movs	r3, #2
 80066ac:	e4a7      	b.n	8005ffe <_svfprintf_r+0x1ce>
 80066ae:	9306      	str	r3, [sp, #24]
 80066b0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80066b4:	2d00      	cmp	r5, #0
 80066b6:	f000 83d1 	beq.w	8006e5c <_svfprintf_r+0x102c>
 80066ba:	2300      	movs	r3, #0
 80066bc:	2201      	movs	r2, #1
 80066be:	469c      	mov	ip, r3
 80066c0:	9205      	str	r2, [sp, #20]
 80066c2:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 80066c6:	e77a      	b.n	80065be <_svfprintf_r+0x78e>
 80066c8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80066cc:	e535      	b.n	800613a <_svfprintf_r+0x30a>
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	f47f acad 	bne.w	800602e <_svfprintf_r+0x1fe>
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	bf08      	it	eq
 80066da:	f1b8 0f0a 	cmpeq.w	r8, #10
 80066de:	f080 820d 	bcs.w	8006afc <_svfprintf_r+0xccc>
 80066e2:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80066e6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80066ea:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 80066ee:	ebcb 0307 	rsb	r3, fp, r7
 80066f2:	9309      	str	r3, [sp, #36]	; 0x24
 80066f4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80066f8:	e4b4      	b.n	8006064 <_svfprintf_r+0x234>
 80066fa:	2d65      	cmp	r5, #101	; 0x65
 80066fc:	f340 80a0 	ble.w	8006840 <_svfprintf_r+0xa10>
 8006700:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	f7ff f88e 	bl	8005828 <__aeabi_dcmpeq>
 800670c:	2800      	cmp	r0, #0
 800670e:	f000 8144 	beq.w	800699a <_svfprintf_r+0xb6a>
 8006712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006714:	4a91      	ldr	r2, [pc, #580]	; (800695c <_svfprintf_r+0xb2c>)
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	f10b 0b01 	add.w	fp, fp, #1
 800671e:	2201      	movs	r2, #1
 8006720:	2b07      	cmp	r3, #7
 8006722:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006726:	9322      	str	r3, [sp, #136]	; 0x88
 8006728:	6062      	str	r2, [r4, #4]
 800672a:	f300 833f 	bgt.w	8006dac <_svfprintf_r+0xf7c>
 800672e:	3408      	adds	r4, #8
 8006730:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006732:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006734:	4293      	cmp	r3, r2
 8006736:	db03      	blt.n	8006740 <_svfprintf_r+0x910>
 8006738:	9b03      	ldr	r3, [sp, #12]
 800673a:	07da      	lsls	r2, r3, #31
 800673c:	f57f ad7b 	bpl.w	8006236 <_svfprintf_r+0x406>
 8006740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006742:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006746:	6022      	str	r2, [r4, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	448b      	add	fp, r1
 800674c:	2b07      	cmp	r3, #7
 800674e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006752:	6061      	str	r1, [r4, #4]
 8006754:	9322      	str	r3, [sp, #136]	; 0x88
 8006756:	f300 839b 	bgt.w	8006e90 <_svfprintf_r+0x1060>
 800675a:	3408      	adds	r4, #8
 800675c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800675e:	1e5d      	subs	r5, r3, #1
 8006760:	2d00      	cmp	r5, #0
 8006762:	f77f ad68 	ble.w	8006236 <_svfprintf_r+0x406>
 8006766:	2d10      	cmp	r5, #16
 8006768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8006964 <_svfprintf_r+0xb34>
 800676e:	f340 81b9 	ble.w	8006ae4 <_svfprintf_r+0xcb4>
 8006772:	f04f 0810 	mov.w	r8, #16
 8006776:	465a      	mov	r2, fp
 8006778:	f8dd a010 	ldr.w	sl, [sp, #16]
 800677c:	e004      	b.n	8006788 <_svfprintf_r+0x958>
 800677e:	3408      	adds	r4, #8
 8006780:	3d10      	subs	r5, #16
 8006782:	2d10      	cmp	r5, #16
 8006784:	f340 81ad 	ble.w	8006ae2 <_svfprintf_r+0xcb2>
 8006788:	3301      	adds	r3, #1
 800678a:	3210      	adds	r2, #16
 800678c:	2b07      	cmp	r3, #7
 800678e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006790:	9322      	str	r3, [sp, #136]	; 0x88
 8006792:	f8c4 9000 	str.w	r9, [r4]
 8006796:	f8c4 8004 	str.w	r8, [r4, #4]
 800679a:	ddf0      	ble.n	800677e <_svfprintf_r+0x94e>
 800679c:	4650      	mov	r0, sl
 800679e:	4631      	mov	r1, r6
 80067a0:	aa21      	add	r2, sp, #132	; 0x84
 80067a2:	f002 fc01 	bl	8008fa8 <__ssprint_r>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f47f ac0a 	bne.w	8005fc0 <_svfprintf_r+0x190>
 80067ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80067ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067b0:	463c      	mov	r4, r7
 80067b2:	e7e5      	b.n	8006780 <_svfprintf_r+0x950>
 80067b4:	9b08      	ldr	r3, [sp, #32]
 80067b6:	9a05      	ldr	r2, [sp, #20]
 80067b8:	ebc2 0a03 	rsb	sl, r2, r3
 80067bc:	f1ba 0f00 	cmp.w	sl, #0
 80067c0:	f77f ace3 	ble.w	800618a <_svfprintf_r+0x35a>
 80067c4:	f1ba 0f10 	cmp.w	sl, #16
 80067c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067ca:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8006964 <_svfprintf_r+0xb34>
 80067ce:	dd2b      	ble.n	8006828 <_svfprintf_r+0x9f8>
 80067d0:	4649      	mov	r1, r9
 80067d2:	465b      	mov	r3, fp
 80067d4:	46a9      	mov	r9, r5
 80067d6:	f04f 0810 	mov.w	r8, #16
 80067da:	f8dd b010 	ldr.w	fp, [sp, #16]
 80067de:	460d      	mov	r5, r1
 80067e0:	e006      	b.n	80067f0 <_svfprintf_r+0x9c0>
 80067e2:	f1aa 0a10 	sub.w	sl, sl, #16
 80067e6:	f1ba 0f10 	cmp.w	sl, #16
 80067ea:	f104 0408 	add.w	r4, r4, #8
 80067ee:	dd17      	ble.n	8006820 <_svfprintf_r+0x9f0>
 80067f0:	3201      	adds	r2, #1
 80067f2:	3310      	adds	r3, #16
 80067f4:	2a07      	cmp	r2, #7
 80067f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80067f8:	9222      	str	r2, [sp, #136]	; 0x88
 80067fa:	e884 0120 	stmia.w	r4, {r5, r8}
 80067fe:	ddf0      	ble.n	80067e2 <_svfprintf_r+0x9b2>
 8006800:	4658      	mov	r0, fp
 8006802:	4631      	mov	r1, r6
 8006804:	aa21      	add	r2, sp, #132	; 0x84
 8006806:	f002 fbcf 	bl	8008fa8 <__ssprint_r>
 800680a:	2800      	cmp	r0, #0
 800680c:	f47f abd8 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006810:	f1aa 0a10 	sub.w	sl, sl, #16
 8006814:	f1ba 0f10 	cmp.w	sl, #16
 8006818:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800681a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800681c:	463c      	mov	r4, r7
 800681e:	dce7      	bgt.n	80067f0 <_svfprintf_r+0x9c0>
 8006820:	469b      	mov	fp, r3
 8006822:	462b      	mov	r3, r5
 8006824:	464d      	mov	r5, r9
 8006826:	4699      	mov	r9, r3
 8006828:	3201      	adds	r2, #1
 800682a:	44d3      	add	fp, sl
 800682c:	2a07      	cmp	r2, #7
 800682e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006832:	9222      	str	r2, [sp, #136]	; 0x88
 8006834:	e884 0600 	stmia.w	r4, {r9, sl}
 8006838:	f300 8251 	bgt.w	8006cde <_svfprintf_r+0xeae>
 800683c:	3408      	adds	r4, #8
 800683e:	e4a4      	b.n	800618a <_svfprintf_r+0x35a>
 8006840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006842:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006844:	2b01      	cmp	r3, #1
 8006846:	f340 821f 	ble.w	8006c88 <_svfprintf_r+0xe58>
 800684a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	3501      	adds	r5, #1
 8006850:	f10b 0301 	add.w	r3, fp, #1
 8006854:	2201      	movs	r2, #1
 8006856:	2d07      	cmp	r5, #7
 8006858:	9323      	str	r3, [sp, #140]	; 0x8c
 800685a:	9522      	str	r5, [sp, #136]	; 0x88
 800685c:	6062      	str	r2, [r4, #4]
 800685e:	f300 8225 	bgt.w	8006cac <_svfprintf_r+0xe7c>
 8006862:	3408      	adds	r4, #8
 8006864:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006866:	6061      	str	r1, [r4, #4]
 8006868:	3501      	adds	r5, #1
 800686a:	eb03 0b01 	add.w	fp, r3, r1
 800686e:	2d07      	cmp	r5, #7
 8006870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006872:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006876:	9522      	str	r5, [sp, #136]	; 0x88
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	f300 8223 	bgt.w	8006cc4 <_svfprintf_r+0xe94>
 800687e:	3408      	adds	r4, #8
 8006880:	2300      	movs	r3, #0
 8006882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006886:	2200      	movs	r2, #0
 8006888:	f7fe ffce 	bl	8005828 <__aeabi_dcmpeq>
 800688c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800688e:	2800      	cmp	r0, #0
 8006890:	f040 80dd 	bne.w	8006a4e <_svfprintf_r+0xc1e>
 8006894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006896:	3b01      	subs	r3, #1
 8006898:	3501      	adds	r5, #1
 800689a:	3201      	adds	r2, #1
 800689c:	449b      	add	fp, r3
 800689e:	2d07      	cmp	r5, #7
 80068a0:	9522      	str	r5, [sp, #136]	; 0x88
 80068a2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80068a6:	6022      	str	r2, [r4, #0]
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	f300 810d 	bgt.w	8006ac8 <_svfprintf_r+0xc98>
 80068ae:	3408      	adds	r4, #8
 80068b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80068b2:	6062      	str	r2, [r4, #4]
 80068b4:	3501      	adds	r5, #1
 80068b6:	4493      	add	fp, r2
 80068b8:	ab1d      	add	r3, sp, #116	; 0x74
 80068ba:	2d07      	cmp	r5, #7
 80068bc:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80068c0:	9522      	str	r5, [sp, #136]	; 0x88
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	f77f acb6 	ble.w	8006234 <_svfprintf_r+0x404>
 80068c8:	9804      	ldr	r0, [sp, #16]
 80068ca:	4631      	mov	r1, r6
 80068cc:	aa21      	add	r2, sp, #132	; 0x84
 80068ce:	f002 fb6b 	bl	8008fa8 <__ssprint_r>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f47f ab74 	bne.w	8005fc0 <_svfprintf_r+0x190>
 80068d8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80068dc:	463c      	mov	r4, r7
 80068de:	e4aa      	b.n	8006236 <_svfprintf_r+0x406>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d132      	bne.n	800694a <_svfprintf_r+0xb1a>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	07d8      	lsls	r0, r3, #31
 80068e8:	d52f      	bpl.n	800694a <_svfprintf_r+0xb1a>
 80068ea:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80068ee:	2330      	movs	r3, #48	; 0x30
 80068f0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80068f4:	ebcb 0307 	rsb	r3, fp, r7
 80068f8:	9309      	str	r3, [sp, #36]	; 0x24
 80068fa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80068fe:	f7ff bbb1 	b.w	8006064 <_svfprintf_r+0x234>
 8006902:	9804      	ldr	r0, [sp, #16]
 8006904:	4631      	mov	r1, r6
 8006906:	aa21      	add	r2, sp, #132	; 0x84
 8006908:	f002 fb4e 	bl	8008fa8 <__ssprint_r>
 800690c:	2800      	cmp	r0, #0
 800690e:	f47f ab57 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006912:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006916:	463c      	mov	r4, r7
 8006918:	e47b      	b.n	8006212 <_svfprintf_r+0x3e2>
 800691a:	9804      	ldr	r0, [sp, #16]
 800691c:	4631      	mov	r1, r6
 800691e:	aa21      	add	r2, sp, #132	; 0x84
 8006920:	f002 fb42 	bl	8008fa8 <__ssprint_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	f47f ab4b 	bne.w	8005fc0 <_svfprintf_r+0x190>
 800692a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800692e:	463c      	mov	r4, r7
 8006930:	e427      	b.n	8006182 <_svfprintf_r+0x352>
 8006932:	9804      	ldr	r0, [sp, #16]
 8006934:	4631      	mov	r1, r6
 8006936:	aa21      	add	r2, sp, #132	; 0x84
 8006938:	f002 fb36 	bl	8008fa8 <__ssprint_r>
 800693c:	2800      	cmp	r0, #0
 800693e:	f47f ab3f 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006942:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006946:	463c      	mov	r4, r7
 8006948:	e40a      	b.n	8006160 <_svfprintf_r+0x330>
 800694a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800694e:	970c      	str	r7, [sp, #48]	; 0x30
 8006950:	f7ff bb88 	b.w	8006064 <_svfprintf_r+0x234>
 8006954:	0800a048 	.word	0x0800a048
 8006958:	0800a068 	.word	0x0800a068
 800695c:	0800a084 	.word	0x0800a084
 8006960:	0800a044 	.word	0x0800a044
 8006964:	0800a024 	.word	0x0800a024
 8006968:	9812      	ldr	r0, [sp, #72]	; 0x48
 800696a:	46bb      	mov	fp, r7
 800696c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8006970:	f008 010f 	and.w	r1, r8, #15
 8006974:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 8006978:	ea4f 1219 	mov.w	r2, r9, lsr #4
 800697c:	4698      	mov	r8, r3
 800697e:	4691      	mov	r9, r2
 8006980:	5c43      	ldrb	r3, [r0, r1]
 8006982:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006986:	ea58 0309 	orrs.w	r3, r8, r9
 800698a:	d1ef      	bne.n	800696c <_svfprintf_r+0xb3c>
 800698c:	465b      	mov	r3, fp
 800698e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006992:	1afb      	subs	r3, r7, r3
 8006994:	9309      	str	r3, [sp, #36]	; 0x24
 8006996:	f7ff bb65 	b.w	8006064 <_svfprintf_r+0x234>
 800699a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800699c:	2d00      	cmp	r5, #0
 800699e:	f340 8211 	ble.w	8006dc4 <_svfprintf_r+0xf94>
 80069a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80069a6:	428a      	cmp	r2, r1
 80069a8:	4613      	mov	r3, r2
 80069aa:	bfa8      	it	ge
 80069ac:	460b      	movge	r3, r1
 80069ae:	461d      	mov	r5, r3
 80069b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069b2:	2d00      	cmp	r5, #0
 80069b4:	eb01 0a02 	add.w	sl, r1, r2
 80069b8:	dd0b      	ble.n	80069d2 <_svfprintf_r+0xba2>
 80069ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069bc:	6021      	str	r1, [r4, #0]
 80069be:	3301      	adds	r3, #1
 80069c0:	44ab      	add	fp, r5
 80069c2:	2b07      	cmp	r3, #7
 80069c4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80069c8:	6065      	str	r5, [r4, #4]
 80069ca:	9322      	str	r3, [sp, #136]	; 0x88
 80069cc:	f300 8355 	bgt.w	800707a <_svfprintf_r+0x124a>
 80069d0:	3408      	adds	r4, #8
 80069d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d4:	2d00      	cmp	r5, #0
 80069d6:	bfa8      	it	ge
 80069d8:	1b5b      	subge	r3, r3, r5
 80069da:	2b00      	cmp	r3, #0
 80069dc:	461d      	mov	r5, r3
 80069de:	f340 80f5 	ble.w	8006bcc <_svfprintf_r+0xd9c>
 80069e2:	2d10      	cmp	r5, #16
 80069e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069e6:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8006ff0 <_svfprintf_r+0x11c0>
 80069ea:	f340 81d2 	ble.w	8006d92 <_svfprintf_r+0xf62>
 80069ee:	465a      	mov	r2, fp
 80069f0:	f04f 0810 	mov.w	r8, #16
 80069f4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80069f8:	e004      	b.n	8006a04 <_svfprintf_r+0xbd4>
 80069fa:	3408      	adds	r4, #8
 80069fc:	3d10      	subs	r5, #16
 80069fe:	2d10      	cmp	r5, #16
 8006a00:	f340 81c6 	ble.w	8006d90 <_svfprintf_r+0xf60>
 8006a04:	3301      	adds	r3, #1
 8006a06:	3210      	adds	r2, #16
 8006a08:	2b07      	cmp	r3, #7
 8006a0a:	9223      	str	r2, [sp, #140]	; 0x8c
 8006a0c:	9322      	str	r3, [sp, #136]	; 0x88
 8006a0e:	f8c4 9000 	str.w	r9, [r4]
 8006a12:	f8c4 8004 	str.w	r8, [r4, #4]
 8006a16:	ddf0      	ble.n	80069fa <_svfprintf_r+0xbca>
 8006a18:	4658      	mov	r0, fp
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	aa21      	add	r2, sp, #132	; 0x84
 8006a1e:	f002 fac3 	bl	8008fa8 <__ssprint_r>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f47f aacc 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006a28:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006a2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2c:	463c      	mov	r4, r7
 8006a2e:	e7e5      	b.n	80069fc <_svfprintf_r+0xbcc>
 8006a30:	9804      	ldr	r0, [sp, #16]
 8006a32:	4631      	mov	r1, r6
 8006a34:	aa21      	add	r2, sp, #132	; 0x84
 8006a36:	f002 fab7 	bl	8008fa8 <__ssprint_r>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f47f aac0 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006a40:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006a44:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006a48:	463c      	mov	r4, r7
 8006a4a:	f7ff bb76 	b.w	800613a <_svfprintf_r+0x30a>
 8006a4e:	f103 38ff 	add.w	r8, r3, #4294967295
 8006a52:	f1b8 0f00 	cmp.w	r8, #0
 8006a56:	f77f af2b 	ble.w	80068b0 <_svfprintf_r+0xa80>
 8006a5a:	f1b8 0f10 	cmp.w	r8, #16
 8006a5e:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 8006ff0 <_svfprintf_r+0x11c0>
 8006a62:	dd25      	ble.n	8006ab0 <_svfprintf_r+0xc80>
 8006a64:	465b      	mov	r3, fp
 8006a66:	f04f 0a10 	mov.w	sl, #16
 8006a6a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006a6e:	e006      	b.n	8006a7e <_svfprintf_r+0xc4e>
 8006a70:	f1a8 0810 	sub.w	r8, r8, #16
 8006a74:	f1b8 0f10 	cmp.w	r8, #16
 8006a78:	f104 0408 	add.w	r4, r4, #8
 8006a7c:	dd17      	ble.n	8006aae <_svfprintf_r+0xc7e>
 8006a7e:	3501      	adds	r5, #1
 8006a80:	3310      	adds	r3, #16
 8006a82:	2d07      	cmp	r5, #7
 8006a84:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a86:	9522      	str	r5, [sp, #136]	; 0x88
 8006a88:	e884 0600 	stmia.w	r4, {r9, sl}
 8006a8c:	ddf0      	ble.n	8006a70 <_svfprintf_r+0xc40>
 8006a8e:	4658      	mov	r0, fp
 8006a90:	4631      	mov	r1, r6
 8006a92:	aa21      	add	r2, sp, #132	; 0x84
 8006a94:	f002 fa88 	bl	8008fa8 <__ssprint_r>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f47f aa91 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006a9e:	f1a8 0810 	sub.w	r8, r8, #16
 8006aa2:	f1b8 0f10 	cmp.w	r8, #16
 8006aa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aa8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006aaa:	463c      	mov	r4, r7
 8006aac:	dce7      	bgt.n	8006a7e <_svfprintf_r+0xc4e>
 8006aae:	469b      	mov	fp, r3
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	44c3      	add	fp, r8
 8006ab4:	2d07      	cmp	r5, #7
 8006ab6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006aba:	9522      	str	r5, [sp, #136]	; 0x88
 8006abc:	f8c4 9000 	str.w	r9, [r4]
 8006ac0:	f8c4 8004 	str.w	r8, [r4, #4]
 8006ac4:	f77f aef3 	ble.w	80068ae <_svfprintf_r+0xa7e>
 8006ac8:	9804      	ldr	r0, [sp, #16]
 8006aca:	4631      	mov	r1, r6
 8006acc:	aa21      	add	r2, sp, #132	; 0x84
 8006ace:	f002 fa6b 	bl	8008fa8 <__ssprint_r>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f47f aa74 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006ad8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006adc:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006ade:	463c      	mov	r4, r7
 8006ae0:	e6e6      	b.n	80068b0 <_svfprintf_r+0xa80>
 8006ae2:	4693      	mov	fp, r2
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	44ab      	add	fp, r5
 8006ae8:	2b07      	cmp	r3, #7
 8006aea:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006aee:	9322      	str	r3, [sp, #136]	; 0x88
 8006af0:	f8c4 9000 	str.w	r9, [r4]
 8006af4:	6065      	str	r5, [r4, #4]
 8006af6:	f77f ab9d 	ble.w	8006234 <_svfprintf_r+0x404>
 8006afa:	e6e5      	b.n	80068c8 <_svfprintf_r+0xa98>
 8006afc:	46bb      	mov	fp, r7
 8006afe:	f8cd c014 	str.w	ip, [sp, #20]
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	220a      	movs	r2, #10
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f7fe febf 	bl	800588c <__aeabi_uldivmod>
 8006b0e:	3230      	adds	r2, #48	; 0x30
 8006b10:	4640      	mov	r0, r8
 8006b12:	4649      	mov	r1, r9
 8006b14:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8006b18:	2300      	movs	r3, #0
 8006b1a:	220a      	movs	r2, #10
 8006b1c:	f7fe feb6 	bl	800588c <__aeabi_uldivmod>
 8006b20:	4680      	mov	r8, r0
 8006b22:	4689      	mov	r9, r1
 8006b24:	ea58 0309 	orrs.w	r3, r8, r9
 8006b28:	d1eb      	bne.n	8006b02 <_svfprintf_r+0xcd2>
 8006b2a:	465b      	mov	r3, fp
 8006b2c:	1afb      	subs	r3, r7, r3
 8006b2e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8006b32:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006b36:	9309      	str	r3, [sp, #36]	; 0x24
 8006b38:	f7ff ba94 	b.w	8006064 <_svfprintf_r+0x234>
 8006b3c:	2b30      	cmp	r3, #48	; 0x30
 8006b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b40:	f43f af27 	beq.w	8006992 <_svfprintf_r+0xb62>
 8006b44:	3b01      	subs	r3, #1
 8006b46:	461a      	mov	r2, r3
 8006b48:	930c      	str	r3, [sp, #48]	; 0x30
 8006b4a:	1aba      	subs	r2, r7, r2
 8006b4c:	2330      	movs	r3, #48	; 0x30
 8006b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b50:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006b54:	f7ff ba86 	b.w	8006064 <_svfprintf_r+0x234>
 8006b58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b5a:	680a      	ldr	r2, [r1, #0]
 8006b5c:	3104      	adds	r1, #4
 8006b5e:	910a      	str	r1, [sp, #40]	; 0x28
 8006b60:	4690      	mov	r8, r2
 8006b62:	f04f 0900 	mov.w	r9, #0
 8006b66:	f7ff ba4a 	b.w	8005ffe <_svfprintf_r+0x1ce>
 8006b6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b6c:	680a      	ldr	r2, [r1, #0]
 8006b6e:	3104      	adds	r1, #4
 8006b70:	2301      	movs	r3, #1
 8006b72:	910a      	str	r1, [sp, #40]	; 0x28
 8006b74:	4690      	mov	r8, r2
 8006b76:	f04f 0900 	mov.w	r9, #0
 8006b7a:	f7ff ba40 	b.w	8005ffe <_svfprintf_r+0x1ce>
 8006b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b80:	6813      	ldr	r3, [r2, #0]
 8006b82:	4698      	mov	r8, r3
 8006b84:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8006b88:	4613      	mov	r3, r2
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	464b      	mov	r3, r9
 8006b94:	f173 0300 	sbcs.w	r3, r3, #0
 8006b98:	f6bf abf2 	bge.w	8006380 <_svfprintf_r+0x550>
 8006b9c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8006ba0:	f1d8 0800 	rsbs	r8, r8, #0
 8006ba4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8006ba8:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8006bac:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f7ff ba2a 	b.w	800600a <_svfprintf_r+0x1da>
 8006bb6:	9804      	ldr	r0, [sp, #16]
 8006bb8:	4631      	mov	r1, r6
 8006bba:	aa21      	add	r2, sp, #132	; 0x84
 8006bbc:	f002 f9f4 	bl	8008fa8 <__ssprint_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f47f a9fd 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006bc6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006bca:	463c      	mov	r4, r7
 8006bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bce:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006bd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bd2:	440a      	add	r2, r1
 8006bd4:	4690      	mov	r8, r2
 8006bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	db46      	blt.n	8006c6a <_svfprintf_r+0xe3a>
 8006bdc:	9a03      	ldr	r2, [sp, #12]
 8006bde:	07d0      	lsls	r0, r2, #31
 8006be0:	d443      	bmi.n	8006c6a <_svfprintf_r+0xe3a>
 8006be2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006be4:	ebc8 050a 	rsb	r5, r8, sl
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	429d      	cmp	r5, r3
 8006bec:	bfa8      	it	ge
 8006bee:	461d      	movge	r5, r3
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	dd0c      	ble.n	8006c0e <_svfprintf_r+0xdde>
 8006bf4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bf6:	f8c4 8000 	str.w	r8, [r4]
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	44ab      	add	fp, r5
 8006bfe:	2a07      	cmp	r2, #7
 8006c00:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006c04:	6065      	str	r5, [r4, #4]
 8006c06:	9222      	str	r2, [sp, #136]	; 0x88
 8006c08:	f300 826f 	bgt.w	80070ea <_svfprintf_r+0x12ba>
 8006c0c:	3408      	adds	r4, #8
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	bfac      	ite	ge
 8006c12:	1b5d      	subge	r5, r3, r5
 8006c14:	461d      	movlt	r5, r3
 8006c16:	2d00      	cmp	r5, #0
 8006c18:	f77f ab0d 	ble.w	8006236 <_svfprintf_r+0x406>
 8006c1c:	2d10      	cmp	r5, #16
 8006c1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c20:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8006ff0 <_svfprintf_r+0x11c0>
 8006c24:	f77f af5e 	ble.w	8006ae4 <_svfprintf_r+0xcb4>
 8006c28:	f04f 0810 	mov.w	r8, #16
 8006c2c:	465a      	mov	r2, fp
 8006c2e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006c32:	e004      	b.n	8006c3e <_svfprintf_r+0xe0e>
 8006c34:	3408      	adds	r4, #8
 8006c36:	3d10      	subs	r5, #16
 8006c38:	2d10      	cmp	r5, #16
 8006c3a:	f77f af52 	ble.w	8006ae2 <_svfprintf_r+0xcb2>
 8006c3e:	3301      	adds	r3, #1
 8006c40:	3210      	adds	r2, #16
 8006c42:	2b07      	cmp	r3, #7
 8006c44:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c46:	9322      	str	r3, [sp, #136]	; 0x88
 8006c48:	f8c4 9000 	str.w	r9, [r4]
 8006c4c:	f8c4 8004 	str.w	r8, [r4, #4]
 8006c50:	ddf0      	ble.n	8006c34 <_svfprintf_r+0xe04>
 8006c52:	4650      	mov	r0, sl
 8006c54:	4631      	mov	r1, r6
 8006c56:	aa21      	add	r2, sp, #132	; 0x84
 8006c58:	f002 f9a6 	bl	8008fa8 <__ssprint_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f47f a9af 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006c62:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006c64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c66:	463c      	mov	r4, r7
 8006c68:	e7e5      	b.n	8006c36 <_svfprintf_r+0xe06>
 8006c6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c6c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006c6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006c70:	6021      	str	r1, [r4, #0]
 8006c72:	3201      	adds	r2, #1
 8006c74:	4483      	add	fp, r0
 8006c76:	2a07      	cmp	r2, #7
 8006c78:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006c7c:	6060      	str	r0, [r4, #4]
 8006c7e:	9222      	str	r2, [sp, #136]	; 0x88
 8006c80:	f300 8207 	bgt.w	8007092 <_svfprintf_r+0x1262>
 8006c84:	3408      	adds	r4, #8
 8006c86:	e7ac      	b.n	8006be2 <_svfprintf_r+0xdb2>
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	f53f addd 	bmi.w	800684a <_svfprintf_r+0xa1a>
 8006c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	3501      	adds	r5, #1
 8006c96:	f10b 0b01 	add.w	fp, fp, #1
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	2d07      	cmp	r5, #7
 8006c9e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006ca2:	9522      	str	r5, [sp, #136]	; 0x88
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	f77f ae02 	ble.w	80068ae <_svfprintf_r+0xa7e>
 8006caa:	e70d      	b.n	8006ac8 <_svfprintf_r+0xc98>
 8006cac:	9804      	ldr	r0, [sp, #16]
 8006cae:	4631      	mov	r1, r6
 8006cb0:	aa21      	add	r2, sp, #132	; 0x84
 8006cb2:	f002 f979 	bl	8008fa8 <__ssprint_r>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f47f a982 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006cbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cbe:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006cc0:	463c      	mov	r4, r7
 8006cc2:	e5cf      	b.n	8006864 <_svfprintf_r+0xa34>
 8006cc4:	9804      	ldr	r0, [sp, #16]
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	aa21      	add	r2, sp, #132	; 0x84
 8006cca:	f002 f96d 	bl	8008fa8 <__ssprint_r>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f47f a976 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006cd4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006cd8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006cda:	463c      	mov	r4, r7
 8006cdc:	e5d0      	b.n	8006880 <_svfprintf_r+0xa50>
 8006cde:	9804      	ldr	r0, [sp, #16]
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	aa21      	add	r2, sp, #132	; 0x84
 8006ce4:	f002 f960 	bl	8008fa8 <__ssprint_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	f47f a969 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006cee:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006cf2:	463c      	mov	r4, r7
 8006cf4:	f7ff ba49 	b.w	800618a <_svfprintf_r+0x35a>
 8006cf8:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8006cfc:	f002 f8e6 	bl	8008ecc <__fpclassifyd>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f040 80d1 	bne.w	8006ea8 <_svfprintf_r+0x1078>
 8006d06:	4686      	mov	lr, r0
 8006d08:	4ab6      	ldr	r2, [pc, #728]	; (8006fe4 <_svfprintf_r+0x11b4>)
 8006d0a:	4bb7      	ldr	r3, [pc, #732]	; (8006fe8 <_svfprintf_r+0x11b8>)
 8006d0c:	900d      	str	r0, [sp, #52]	; 0x34
 8006d0e:	9803      	ldr	r0, [sp, #12]
 8006d10:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006d14:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8006d18:	2103      	movs	r1, #3
 8006d1a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006d1e:	2d47      	cmp	r5, #71	; 0x47
 8006d20:	bfd8      	it	le
 8006d22:	461a      	movle	r2, r3
 8006d24:	9105      	str	r1, [sp, #20]
 8006d26:	9003      	str	r0, [sp, #12]
 8006d28:	920c      	str	r2, [sp, #48]	; 0x30
 8006d2a:	9109      	str	r1, [sp, #36]	; 0x24
 8006d2c:	f7ff b9a2 	b.w	8006074 <_svfprintf_r+0x244>
 8006d30:	f029 0907 	bic.w	r9, r9, #7
 8006d34:	ed99 7b00 	vldr	d7, [r9]
 8006d38:	f109 0308 	add.w	r3, r9, #8
 8006d3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006d40:	930a      	str	r3, [sp, #40]	; 0x28
 8006d42:	e478      	b.n	8006636 <_svfprintf_r+0x806>
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	f43f ac1f 	beq.w	8006590 <_svfprintf_r+0x760>
 8006d52:	3304      	adds	r3, #4
 8006d54:	f8b2 8000 	ldrh.w	r8, [r2]
 8006d58:	930a      	str	r3, [sp, #40]	; 0x28
 8006d5a:	f04f 0900 	mov.w	r9, #0
 8006d5e:	f7ff bb28 	b.w	80063b2 <_svfprintf_r+0x582>
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	06db      	lsls	r3, r3, #27
 8006d66:	d40b      	bmi.n	8006d80 <_svfprintf_r+0xf50>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	065d      	lsls	r5, r3, #25
 8006d6c:	d508      	bpl.n	8006d80 <_svfprintf_r+0xf50>
 8006d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	3204      	adds	r2, #4
 8006d74:	920a      	str	r2, [sp, #40]	; 0x28
 8006d76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	f7ff b87f 	b.w	8005e7e <_svfprintf_r+0x4e>
 8006d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	3204      	adds	r2, #4
 8006d86:	920a      	str	r2, [sp, #40]	; 0x28
 8006d88:	9a07      	ldr	r2, [sp, #28]
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f7ff b877 	b.w	8005e7e <_svfprintf_r+0x4e>
 8006d90:	4693      	mov	fp, r2
 8006d92:	3301      	adds	r3, #1
 8006d94:	44ab      	add	fp, r5
 8006d96:	2b07      	cmp	r3, #7
 8006d98:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006d9c:	9322      	str	r3, [sp, #136]	; 0x88
 8006d9e:	f8c4 9000 	str.w	r9, [r4]
 8006da2:	6065      	str	r5, [r4, #4]
 8006da4:	f73f af07 	bgt.w	8006bb6 <_svfprintf_r+0xd86>
 8006da8:	3408      	adds	r4, #8
 8006daa:	e70f      	b.n	8006bcc <_svfprintf_r+0xd9c>
 8006dac:	9804      	ldr	r0, [sp, #16]
 8006dae:	4631      	mov	r1, r6
 8006db0:	aa21      	add	r2, sp, #132	; 0x84
 8006db2:	f002 f8f9 	bl	8008fa8 <__ssprint_r>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f47f a902 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006dbc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006dc0:	463c      	mov	r4, r7
 8006dc2:	e4b5      	b.n	8006730 <_svfprintf_r+0x900>
 8006dc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dc6:	4a89      	ldr	r2, [pc, #548]	; (8006fec <_svfprintf_r+0x11bc>)
 8006dc8:	6022      	str	r2, [r4, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	f10b 0b01 	add.w	fp, fp, #1
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	2b07      	cmp	r3, #7
 8006dd4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006dd8:	9322      	str	r3, [sp, #136]	; 0x88
 8006dda:	6062      	str	r2, [r4, #4]
 8006ddc:	f300 80f1 	bgt.w	8006fc2 <_svfprintf_r+0x1192>
 8006de0:	3408      	adds	r4, #8
 8006de2:	b92d      	cbnz	r5, 8006df0 <_svfprintf_r+0xfc0>
 8006de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006de6:	b91b      	cbnz	r3, 8006df0 <_svfprintf_r+0xfc0>
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	07db      	lsls	r3, r3, #31
 8006dec:	f57f aa23 	bpl.w	8006236 <_svfprintf_r+0x406>
 8006df0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006df2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006df4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	eb0b 0100 	add.w	r1, fp, r0
 8006dfe:	2b07      	cmp	r3, #7
 8006e00:	9123      	str	r1, [sp, #140]	; 0x8c
 8006e02:	6060      	str	r0, [r4, #4]
 8006e04:	9322      	str	r3, [sp, #136]	; 0x88
 8006e06:	f300 81ef 	bgt.w	80071e8 <_svfprintf_r+0x13b8>
 8006e0a:	f104 0208 	add.w	r2, r4, #8
 8006e0e:	426d      	negs	r5, r5
 8006e10:	2d00      	cmp	r5, #0
 8006e12:	f340 80fa 	ble.w	800700a <_svfprintf_r+0x11da>
 8006e16:	2d10      	cmp	r5, #16
 8006e18:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8006ff0 <_svfprintf_r+0x11c0>
 8006e1c:	f340 8146 	ble.w	80070ac <_svfprintf_r+0x127c>
 8006e20:	2410      	movs	r4, #16
 8006e22:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006e26:	e004      	b.n	8006e32 <_svfprintf_r+0x1002>
 8006e28:	3208      	adds	r2, #8
 8006e2a:	3d10      	subs	r5, #16
 8006e2c:	2d10      	cmp	r5, #16
 8006e2e:	f340 813d 	ble.w	80070ac <_svfprintf_r+0x127c>
 8006e32:	3301      	adds	r3, #1
 8006e34:	3110      	adds	r1, #16
 8006e36:	2b07      	cmp	r3, #7
 8006e38:	9123      	str	r1, [sp, #140]	; 0x8c
 8006e3a:	9322      	str	r3, [sp, #136]	; 0x88
 8006e3c:	f8c2 9000 	str.w	r9, [r2]
 8006e40:	6054      	str	r4, [r2, #4]
 8006e42:	ddf1      	ble.n	8006e28 <_svfprintf_r+0xff8>
 8006e44:	4640      	mov	r0, r8
 8006e46:	4631      	mov	r1, r6
 8006e48:	aa21      	add	r2, sp, #132	; 0x84
 8006e4a:	f002 f8ad 	bl	8008fa8 <__ssprint_r>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f47f a8b6 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006e54:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8006e56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e58:	463a      	mov	r2, r7
 8006e5a:	e7e6      	b.n	8006e2a <_svfprintf_r+0xffa>
 8006e5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e5e:	46b1      	mov	r9, r6
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f43f a8ae 	beq.w	8005fc2 <_svfprintf_r+0x192>
 8006e66:	9804      	ldr	r0, [sp, #16]
 8006e68:	4631      	mov	r1, r6
 8006e6a:	aa21      	add	r2, sp, #132	; 0x84
 8006e6c:	f002 f89c 	bl	8008fa8 <__ssprint_r>
 8006e70:	f7ff b8a7 	b.w	8005fc2 <_svfprintf_r+0x192>
 8006e74:	f041 0120 	orr.w	r1, r1, #32
 8006e78:	9103      	str	r1, [sp, #12]
 8006e7a:	785d      	ldrb	r5, [r3, #1]
 8006e7c:	1c59      	adds	r1, r3, #1
 8006e7e:	f7ff b82c 	b.w	8005eda <_svfprintf_r+0xaa>
 8006e82:	9808      	ldr	r0, [sp, #32]
 8006e84:	910a      	str	r1, [sp, #40]	; 0x28
 8006e86:	4240      	negs	r0, r0
 8006e88:	9008      	str	r0, [sp, #32]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f7ff ba29 	b.w	80062e2 <_svfprintf_r+0x4b2>
 8006e90:	9804      	ldr	r0, [sp, #16]
 8006e92:	4631      	mov	r1, r6
 8006e94:	aa21      	add	r2, sp, #132	; 0x84
 8006e96:	f002 f887 	bl	8008fa8 <__ssprint_r>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f47f a890 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006ea0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006ea4:	463c      	mov	r4, r7
 8006ea6:	e459      	b.n	800675c <_svfprintf_r+0x92c>
 8006ea8:	f025 0320 	bic.w	r3, r5, #32
 8006eac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006eb0:	9305      	str	r3, [sp, #20]
 8006eb2:	f000 8093 	beq.w	8006fdc <_svfprintf_r+0x11ac>
 8006eb6:	2b47      	cmp	r3, #71	; 0x47
 8006eb8:	d105      	bne.n	8006ec6 <_svfprintf_r+0x1096>
 8006eba:	f1ba 0f00 	cmp.w	sl, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	46d3      	movne	fp, sl
 8006ec2:	f04f 0b01 	moveq.w	fp, #1
 8006ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ec8:	9a03      	ldr	r2, [sp, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ed0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ed2:	f2c0 81a4 	blt.w	800721e <_svfprintf_r+0x13ee>
 8006ed6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8006eda:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8006ede:	f04f 0a00 	mov.w	sl, #0
 8006ee2:	2d66      	cmp	r5, #102	; 0x66
 8006ee4:	f000 80ac 	beq.w	8007040 <_svfprintf_r+0x1210>
 8006ee8:	2d46      	cmp	r5, #70	; 0x46
 8006eea:	f000 80a9 	beq.w	8007040 <_svfprintf_r+0x1210>
 8006eee:	9b05      	ldr	r3, [sp, #20]
 8006ef0:	9804      	ldr	r0, [sp, #16]
 8006ef2:	2b45      	cmp	r3, #69	; 0x45
 8006ef4:	bf0c      	ite	eq
 8006ef6:	f10b 0901 	addeq.w	r9, fp, #1
 8006efa:	46d9      	movne	r9, fp
 8006efc:	aa1c      	add	r2, sp, #112	; 0x70
 8006efe:	ab1f      	add	r3, sp, #124	; 0x7c
 8006f00:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006f04:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8006f08:	2102      	movs	r1, #2
 8006f0a:	464a      	mov	r2, r9
 8006f0c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f0e:	f000 fa9b 	bl	8007448 <_dtoa_r>
 8006f12:	2d67      	cmp	r5, #103	; 0x67
 8006f14:	900c      	str	r0, [sp, #48]	; 0x30
 8006f16:	d002      	beq.n	8006f1e <_svfprintf_r+0x10ee>
 8006f18:	2d47      	cmp	r5, #71	; 0x47
 8006f1a:	f040 809f 	bne.w	800705c <_svfprintf_r+0x122c>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	07db      	lsls	r3, r3, #31
 8006f22:	f140 8192 	bpl.w	800724a <_svfprintf_r+0x141a>
 8006f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f28:	eb03 0809 	add.w	r8, r3, r9
 8006f2c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	f7fe fc78 	bl	8005828 <__aeabi_dcmpeq>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	f040 80fd 	bne.w	8007138 <_svfprintf_r+0x1308>
 8006f3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f40:	4598      	cmp	r8, r3
 8006f42:	d906      	bls.n	8006f52 <_svfprintf_r+0x1122>
 8006f44:	2130      	movs	r1, #48	; 0x30
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f4a:	7019      	strb	r1, [r3, #0]
 8006f4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f4e:	4598      	cmp	r8, r3
 8006f50:	d8f9      	bhi.n	8006f46 <_svfprintf_r+0x1116>
 8006f52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f58:	9b05      	ldr	r3, [sp, #20]
 8006f5a:	2b47      	cmp	r3, #71	; 0x47
 8006f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f5e:	f000 80de 	beq.w	800711e <_svfprintf_r+0x12ee>
 8006f62:	2d65      	cmp	r5, #101	; 0x65
 8006f64:	f340 80f8 	ble.w	8007158 <_svfprintf_r+0x1328>
 8006f68:	2d66      	cmp	r5, #102	; 0x66
 8006f6a:	930e      	str	r3, [sp, #56]	; 0x38
 8006f6c:	f000 8160 	beq.w	8007230 <_svfprintf_r+0x1400>
 8006f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f74:	4293      	cmp	r3, r2
 8006f76:	f300 8144 	bgt.w	8007202 <_svfprintf_r+0x13d2>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	07d9      	lsls	r1, r3, #31
 8006f7e:	f100 8166 	bmi.w	800724e <_svfprintf_r+0x141e>
 8006f82:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f86:	9209      	str	r2, [sp, #36]	; 0x24
 8006f88:	f1ba 0f00 	cmp.w	sl, #0
 8006f8c:	f040 80bc 	bne.w	8007108 <_svfprintf_r+0x12d8>
 8006f90:	9305      	str	r3, [sp, #20]
 8006f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f94:	9303      	str	r3, [sp, #12]
 8006f96:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006f9a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006f9e:	f7ff b869 	b.w	8006074 <_svfprintf_r+0x244>
 8006fa2:	9804      	ldr	r0, [sp, #16]
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	f001 f9bb 	bl	8008320 <_malloc_r>
 8006faa:	f8c9 0000 	str.w	r0, [r9]
 8006fae:	f8c9 0010 	str.w	r0, [r9, #16]
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f000 8197 	beq.w	80072e6 <_svfprintf_r+0x14b6>
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	f8c9 3014 	str.w	r3, [r9, #20]
 8006fbe:	f7fe bf4f 	b.w	8005e60 <_svfprintf_r+0x30>
 8006fc2:	9804      	ldr	r0, [sp, #16]
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	aa21      	add	r2, sp, #132	; 0x84
 8006fc8:	f001 ffee 	bl	8008fa8 <__ssprint_r>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	f47e aff7 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8006fd2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006fd4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006fd8:	463c      	mov	r4, r7
 8006fda:	e702      	b.n	8006de2 <_svfprintf_r+0xfb2>
 8006fdc:	f04f 0b06 	mov.w	fp, #6
 8006fe0:	e771      	b.n	8006ec6 <_svfprintf_r+0x1096>
 8006fe2:	bf00      	nop
 8006fe4:	0800a050 	.word	0x0800a050
 8006fe8:	0800a04c 	.word	0x0800a04c
 8006fec:	0800a084 	.word	0x0800a084
 8006ff0:	0800a024 	.word	0x0800a024
 8006ff4:	9804      	ldr	r0, [sp, #16]
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	aa21      	add	r2, sp, #132	; 0x84
 8006ffa:	f001 ffd5 	bl	8008fa8 <__ssprint_r>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f47e afde 	bne.w	8005fc0 <_svfprintf_r+0x190>
 8007004:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007006:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007008:	463a      	mov	r2, r7
 800700a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800700c:	6054      	str	r4, [r2, #4]
 800700e:	3301      	adds	r3, #1
 8007010:	eb01 0b04 	add.w	fp, r1, r4
 8007014:	2b07      	cmp	r3, #7
 8007016:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007018:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800701c:	9322      	str	r3, [sp, #136]	; 0x88
 800701e:	6011      	str	r1, [r2, #0]
 8007020:	f73f ac52 	bgt.w	80068c8 <_svfprintf_r+0xa98>
 8007024:	f102 0408 	add.w	r4, r2, #8
 8007028:	f7ff b905 	b.w	8006236 <_svfprintf_r+0x406>
 800702c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8007030:	f001 ff8c 	bl	8008f4c <strlen>
 8007034:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007038:	9009      	str	r0, [sp, #36]	; 0x24
 800703a:	4603      	mov	r3, r0
 800703c:	f7ff ba0e 	b.w	800645c <_svfprintf_r+0x62c>
 8007040:	aa1c      	add	r2, sp, #112	; 0x70
 8007042:	ab1f      	add	r3, sp, #124	; 0x7c
 8007044:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007048:	9804      	ldr	r0, [sp, #16]
 800704a:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 800704e:	2103      	movs	r1, #3
 8007050:	465a      	mov	r2, fp
 8007052:	ab1b      	add	r3, sp, #108	; 0x6c
 8007054:	f000 f9f8 	bl	8007448 <_dtoa_r>
 8007058:	46d9      	mov	r9, fp
 800705a:	900c      	str	r0, [sp, #48]	; 0x30
 800705c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800705e:	eb03 0809 	add.w	r8, r3, r9
 8007062:	9b05      	ldr	r3, [sp, #20]
 8007064:	2b46      	cmp	r3, #70	; 0x46
 8007066:	f47f af61 	bne.w	8006f2c <_svfprintf_r+0x10fc>
 800706a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b30      	cmp	r3, #48	; 0x30
 8007070:	f000 8103 	beq.w	800727a <_svfprintf_r+0x144a>
 8007074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007076:	4498      	add	r8, r3
 8007078:	e758      	b.n	8006f2c <_svfprintf_r+0x10fc>
 800707a:	9804      	ldr	r0, [sp, #16]
 800707c:	4631      	mov	r1, r6
 800707e:	aa21      	add	r2, sp, #132	; 0x84
 8007080:	f001 ff92 	bl	8008fa8 <__ssprint_r>
 8007084:	2800      	cmp	r0, #0
 8007086:	f47e af9b 	bne.w	8005fc0 <_svfprintf_r+0x190>
 800708a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800708e:	463c      	mov	r4, r7
 8007090:	e49f      	b.n	80069d2 <_svfprintf_r+0xba2>
 8007092:	9804      	ldr	r0, [sp, #16]
 8007094:	4631      	mov	r1, r6
 8007096:	aa21      	add	r2, sp, #132	; 0x84
 8007098:	f001 ff86 	bl	8008fa8 <__ssprint_r>
 800709c:	2800      	cmp	r0, #0
 800709e:	f47e af8f 	bne.w	8005fc0 <_svfprintf_r+0x190>
 80070a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070a4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80070a8:	463c      	mov	r4, r7
 80070aa:	e59a      	b.n	8006be2 <_svfprintf_r+0xdb2>
 80070ac:	3301      	adds	r3, #1
 80070ae:	4429      	add	r1, r5
 80070b0:	2b07      	cmp	r3, #7
 80070b2:	9123      	str	r1, [sp, #140]	; 0x8c
 80070b4:	9322      	str	r3, [sp, #136]	; 0x88
 80070b6:	f8c2 9000 	str.w	r9, [r2]
 80070ba:	6055      	str	r5, [r2, #4]
 80070bc:	dc9a      	bgt.n	8006ff4 <_svfprintf_r+0x11c4>
 80070be:	3208      	adds	r2, #8
 80070c0:	e7a3      	b.n	800700a <_svfprintf_r+0x11da>
 80070c2:	4653      	mov	r3, sl
 80070c4:	2b06      	cmp	r3, #6
 80070c6:	bf28      	it	cs
 80070c8:	2306      	movcs	r3, #6
 80070ca:	9309      	str	r3, [sp, #36]	; 0x24
 80070cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070d0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 80070d4:	9305      	str	r3, [sp, #20]
 80070d6:	4b87      	ldr	r3, [pc, #540]	; (80072f4 <_svfprintf_r+0x14c4>)
 80070d8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80070dc:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80070e0:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80070e4:	930c      	str	r3, [sp, #48]	; 0x30
 80070e6:	f7fe bfc5 	b.w	8006074 <_svfprintf_r+0x244>
 80070ea:	9804      	ldr	r0, [sp, #16]
 80070ec:	4631      	mov	r1, r6
 80070ee:	aa21      	add	r2, sp, #132	; 0x84
 80070f0:	f001 ff5a 	bl	8008fa8 <__ssprint_r>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	f47e af63 	bne.w	8005fc0 <_svfprintf_r+0x190>
 80070fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070fe:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	463c      	mov	r4, r7
 8007106:	e582      	b.n	8006c0e <_svfprintf_r+0xdde>
 8007108:	9305      	str	r3, [sp, #20]
 800710a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800710c:	9303      	str	r3, [sp, #12]
 800710e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8007112:	2300      	movs	r3, #0
 8007114:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8007118:	930d      	str	r3, [sp, #52]	; 0x34
 800711a:	f7fe bfae 	b.w	800607a <_svfprintf_r+0x24a>
 800711e:	1cda      	adds	r2, r3, #3
 8007120:	db19      	blt.n	8007156 <_svfprintf_r+0x1326>
 8007122:	459b      	cmp	fp, r3
 8007124:	db17      	blt.n	8007156 <_svfprintf_r+0x1326>
 8007126:	930e      	str	r3, [sp, #56]	; 0x38
 8007128:	2567      	movs	r5, #103	; 0x67
 800712a:	e721      	b.n	8006f70 <_svfprintf_r+0x1140>
 800712c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8007130:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8007134:	f7ff ba91 	b.w	800665a <_svfprintf_r+0x82a>
 8007138:	4643      	mov	r3, r8
 800713a:	e70a      	b.n	8006f52 <_svfprintf_r+0x1122>
 800713c:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007140:	900d      	str	r0, [sp, #52]	; 0x34
 8007142:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007146:	900e      	str	r0, [sp, #56]	; 0x38
 8007148:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007152:	f7fe bf8f 	b.w	8006074 <_svfprintf_r+0x244>
 8007156:	3d02      	subs	r5, #2
 8007158:	3b01      	subs	r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	931b      	str	r3, [sp, #108]	; 0x6c
 800715e:	bfba      	itte	lt
 8007160:	425b      	neglt	r3, r3
 8007162:	222d      	movlt	r2, #45	; 0x2d
 8007164:	222b      	movge	r2, #43	; 0x2b
 8007166:	2b09      	cmp	r3, #9
 8007168:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 800716c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8007170:	dd7b      	ble.n	800726a <_svfprintf_r+0x143a>
 8007172:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
 8007176:	4670      	mov	r0, lr
 8007178:	4a5f      	ldr	r2, [pc, #380]	; (80072f8 <_svfprintf_r+0x14c8>)
 800717a:	fb82 2103 	smull	r2, r1, r2, r3
 800717e:	17da      	asrs	r2, r3, #31
 8007180:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8007184:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007188:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800718c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007190:	2a09      	cmp	r2, #9
 8007192:	4613      	mov	r3, r2
 8007194:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8007198:	dcee      	bgt.n	8007178 <_svfprintf_r+0x1348>
 800719a:	4602      	mov	r2, r0
 800719c:	3330      	adds	r3, #48	; 0x30
 800719e:	b2d9      	uxtb	r1, r3
 80071a0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80071a4:	4596      	cmp	lr, r2
 80071a6:	f240 809b 	bls.w	80072e0 <_svfprintf_r+0x14b0>
 80071aa:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 80071ae:	4603      	mov	r3, r0
 80071b0:	e001      	b.n	80071b6 <_svfprintf_r+0x1386>
 80071b2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80071b6:	f802 1b01 	strb.w	r1, [r2], #1
 80071ba:	4573      	cmp	r3, lr
 80071bc:	d1f9      	bne.n	80071b2 <_svfprintf_r+0x1382>
 80071be:	ab21      	add	r3, sp, #132	; 0x84
 80071c0:	1a1b      	subs	r3, r3, r0
 80071c2:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 80071c6:	4413      	add	r3, r2
 80071c8:	aa1d      	add	r2, sp, #116	; 0x74
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071ce:	9315      	str	r3, [sp, #84]	; 0x54
 80071d0:	2a01      	cmp	r2, #1
 80071d2:	4413      	add	r3, r2
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	dd74      	ble.n	80072c2 <_svfprintf_r+0x1492>
 80071d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071da:	2200      	movs	r2, #0
 80071dc:	3301      	adds	r3, #1
 80071de:	9309      	str	r3, [sp, #36]	; 0x24
 80071e0:	920e      	str	r2, [sp, #56]	; 0x38
 80071e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071e6:	e6cf      	b.n	8006f88 <_svfprintf_r+0x1158>
 80071e8:	9804      	ldr	r0, [sp, #16]
 80071ea:	4631      	mov	r1, r6
 80071ec:	aa21      	add	r2, sp, #132	; 0x84
 80071ee:	f001 fedb 	bl	8008fa8 <__ssprint_r>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f47e aee4 	bne.w	8005fc0 <_svfprintf_r+0x190>
 80071f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80071fa:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80071fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071fe:	463a      	mov	r2, r7
 8007200:	e605      	b.n	8006e0e <_svfprintf_r+0xfde>
 8007202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	bfd8      	it	le
 8007208:	f1c3 0802 	rsble	r8, r3, #2
 800720c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800720e:	bfc8      	it	gt
 8007210:	f04f 0801 	movgt.w	r8, #1
 8007214:	4443      	add	r3, r8
 8007216:	9309      	str	r3, [sp, #36]	; 0x24
 8007218:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800721c:	e6b4      	b.n	8006f88 <_svfprintf_r+0x1158>
 800721e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007226:	9016      	str	r0, [sp, #88]	; 0x58
 8007228:	9317      	str	r3, [sp, #92]	; 0x5c
 800722a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 800722e:	e658      	b.n	8006ee2 <_svfprintf_r+0x10b2>
 8007230:	2b00      	cmp	r3, #0
 8007232:	dd3d      	ble.n	80072b0 <_svfprintf_r+0x1480>
 8007234:	f1bb 0f00 	cmp.w	fp, #0
 8007238:	d10f      	bne.n	800725a <_svfprintf_r+0x142a>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	07db      	lsls	r3, r3, #31
 800723e:	d40c      	bmi.n	800725a <_svfprintf_r+0x142a>
 8007240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007242:	9209      	str	r2, [sp, #36]	; 0x24
 8007244:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007248:	e69e      	b.n	8006f88 <_svfprintf_r+0x1158>
 800724a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800724c:	e681      	b.n	8006f52 <_svfprintf_r+0x1122>
 800724e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007250:	3301      	adds	r3, #1
 8007252:	9309      	str	r3, [sp, #36]	; 0x24
 8007254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007258:	e696      	b.n	8006f88 <_svfprintf_r+0x1158>
 800725a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800725c:	f10b 0801 	add.w	r8, fp, #1
 8007260:	4443      	add	r3, r8
 8007262:	9309      	str	r3, [sp, #36]	; 0x24
 8007264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007268:	e68e      	b.n	8006f88 <_svfprintf_r+0x1158>
 800726a:	3330      	adds	r3, #48	; 0x30
 800726c:	2230      	movs	r2, #48	; 0x30
 800726e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8007272:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8007276:	ab1e      	add	r3, sp, #120	; 0x78
 8007278:	e7a6      	b.n	80071c8 <_svfprintf_r+0x1398>
 800727a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800727e:	2200      	movs	r2, #0
 8007280:	2300      	movs	r3, #0
 8007282:	f7fe fad1 	bl	8005828 <__aeabi_dcmpeq>
 8007286:	2800      	cmp	r0, #0
 8007288:	f47f aef4 	bne.w	8007074 <_svfprintf_r+0x1244>
 800728c:	f1c9 0301 	rsb	r3, r9, #1
 8007290:	931b      	str	r3, [sp, #108]	; 0x6c
 8007292:	4498      	add	r8, r3
 8007294:	e64a      	b.n	8006f2c <_svfprintf_r+0x10fc>
 8007296:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007298:	f8d5 a000 	ldr.w	sl, [r5]
 800729c:	4628      	mov	r0, r5
 800729e:	3004      	adds	r0, #4
 80072a0:	f1ba 0f00 	cmp.w	sl, #0
 80072a4:	785d      	ldrb	r5, [r3, #1]
 80072a6:	900a      	str	r0, [sp, #40]	; 0x28
 80072a8:	f6be ae17 	bge.w	8005eda <_svfprintf_r+0xaa>
 80072ac:	f7fe be13 	b.w	8005ed6 <_svfprintf_r+0xa6>
 80072b0:	f1bb 0f00 	cmp.w	fp, #0
 80072b4:	d10e      	bne.n	80072d4 <_svfprintf_r+0x14a4>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	07d8      	lsls	r0, r3, #31
 80072ba:	d40b      	bmi.n	80072d4 <_svfprintf_r+0x14a4>
 80072bc:	2301      	movs	r3, #1
 80072be:	9309      	str	r3, [sp, #36]	; 0x24
 80072c0:	e662      	b.n	8006f88 <_svfprintf_r+0x1158>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	f013 0301 	ands.w	r3, r3, #1
 80072c8:	d186      	bne.n	80071d8 <_svfprintf_r+0x13a8>
 80072ca:	930e      	str	r3, [sp, #56]	; 0x38
 80072cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072d2:	e659      	b.n	8006f88 <_svfprintf_r+0x1158>
 80072d4:	f10b 0302 	add.w	r3, fp, #2
 80072d8:	9309      	str	r3, [sp, #36]	; 0x24
 80072da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072de:	e653      	b.n	8006f88 <_svfprintf_r+0x1158>
 80072e0:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80072e4:	e770      	b.n	80071c8 <_svfprintf_r+0x1398>
 80072e6:	9a04      	ldr	r2, [sp, #16]
 80072e8:	230c      	movs	r3, #12
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	f7fe be70 	b.w	8005fd4 <_svfprintf_r+0x1a4>
 80072f4:	0800a07c 	.word	0x0800a07c
 80072f8:	66666667 	.word	0x66666667

080072fc <register_fini>:
 80072fc:	4b02      	ldr	r3, [pc, #8]	; (8007308 <register_fini+0xc>)
 80072fe:	b113      	cbz	r3, 8007306 <register_fini+0xa>
 8007300:	4802      	ldr	r0, [pc, #8]	; (800730c <register_fini+0x10>)
 8007302:	f000 b805 	b.w	8007310 <atexit>
 8007306:	4770      	bx	lr
 8007308:	00000000 	.word	0x00000000
 800730c:	080082ed 	.word	0x080082ed

08007310 <atexit>:
 8007310:	4601      	mov	r1, r0
 8007312:	2000      	movs	r0, #0
 8007314:	4602      	mov	r2, r0
 8007316:	4603      	mov	r3, r0
 8007318:	f001 bec8 	b.w	80090ac <__register_exitproc>

0800731c <quorem>:
 800731c:	6902      	ldr	r2, [r0, #16]
 800731e:	690b      	ldr	r3, [r1, #16]
 8007320:	4293      	cmp	r3, r2
 8007322:	f300 808f 	bgt.w	8007444 <quorem+0x128>
 8007326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	f103 38ff 	add.w	r8, r3, #4294967295
 800732e:	f101 0714 	add.w	r7, r1, #20
 8007332:	f100 0b14 	add.w	fp, r0, #20
 8007336:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800733a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800733e:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007342:	b083      	sub	sp, #12
 8007344:	3201      	adds	r2, #1
 8007346:	fbb3 f9f2 	udiv	r9, r3, r2
 800734a:	eb0b 0304 	add.w	r3, fp, r4
 800734e:	9400      	str	r4, [sp, #0]
 8007350:	eb07 0a04 	add.w	sl, r7, r4
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	f1b9 0f00 	cmp.w	r9, #0
 800735a:	d03b      	beq.n	80073d4 <quorem+0xb8>
 800735c:	2600      	movs	r6, #0
 800735e:	4632      	mov	r2, r6
 8007360:	46bc      	mov	ip, r7
 8007362:	46de      	mov	lr, fp
 8007364:	4634      	mov	r4, r6
 8007366:	f85c 6b04 	ldr.w	r6, [ip], #4
 800736a:	f8de 5000 	ldr.w	r5, [lr]
 800736e:	b2b3      	uxth	r3, r6
 8007370:	0c36      	lsrs	r6, r6, #16
 8007372:	fb03 4409 	mla	r4, r3, r9, r4
 8007376:	fb06 f609 	mul.w	r6, r6, r9
 800737a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800737e:	b2a3      	uxth	r3, r4
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	b2b4      	uxth	r4, r6
 8007384:	fa13 f385 	uxtah	r3, r3, r5
 8007388:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 800738c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007390:	b29b      	uxth	r3, r3
 8007392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007396:	45e2      	cmp	sl, ip
 8007398:	ea4f 4224 	mov.w	r2, r4, asr #16
 800739c:	f84e 3b04 	str.w	r3, [lr], #4
 80073a0:	ea4f 4416 	mov.w	r4, r6, lsr #16
 80073a4:	d2df      	bcs.n	8007366 <quorem+0x4a>
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	f85b 3003 	ldr.w	r3, [fp, r3]
 80073ac:	b993      	cbnz	r3, 80073d4 <quorem+0xb8>
 80073ae:	9c01      	ldr	r4, [sp, #4]
 80073b0:	1f23      	subs	r3, r4, #4
 80073b2:	459b      	cmp	fp, r3
 80073b4:	d20c      	bcs.n	80073d0 <quorem+0xb4>
 80073b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80073ba:	b94b      	cbnz	r3, 80073d0 <quorem+0xb4>
 80073bc:	f1a4 0308 	sub.w	r3, r4, #8
 80073c0:	e002      	b.n	80073c8 <quorem+0xac>
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	3b04      	subs	r3, #4
 80073c6:	b91a      	cbnz	r2, 80073d0 <quorem+0xb4>
 80073c8:	459b      	cmp	fp, r3
 80073ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80073ce:	d3f8      	bcc.n	80073c2 <quorem+0xa6>
 80073d0:	f8c0 8010 	str.w	r8, [r0, #16]
 80073d4:	4604      	mov	r4, r0
 80073d6:	f001 fc8d 	bl	8008cf4 <__mcmp>
 80073da:	2800      	cmp	r0, #0
 80073dc:	db2e      	blt.n	800743c <quorem+0x120>
 80073de:	f109 0901 	add.w	r9, r9, #1
 80073e2:	465d      	mov	r5, fp
 80073e4:	2300      	movs	r3, #0
 80073e6:	f857 1b04 	ldr.w	r1, [r7], #4
 80073ea:	6828      	ldr	r0, [r5, #0]
 80073ec:	b28a      	uxth	r2, r1
 80073ee:	1a9a      	subs	r2, r3, r2
 80073f0:	0c09      	lsrs	r1, r1, #16
 80073f2:	fa12 f280 	uxtah	r2, r2, r0
 80073f6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80073fa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80073fe:	b291      	uxth	r1, r2
 8007400:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007404:	45ba      	cmp	sl, r7
 8007406:	f845 1b04 	str.w	r1, [r5], #4
 800740a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800740e:	d2ea      	bcs.n	80073e6 <quorem+0xca>
 8007410:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8007414:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8007418:	b982      	cbnz	r2, 800743c <quorem+0x120>
 800741a:	1f1a      	subs	r2, r3, #4
 800741c:	4593      	cmp	fp, r2
 800741e:	d20b      	bcs.n	8007438 <quorem+0x11c>
 8007420:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007424:	b942      	cbnz	r2, 8007438 <quorem+0x11c>
 8007426:	3b08      	subs	r3, #8
 8007428:	e002      	b.n	8007430 <quorem+0x114>
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	3b04      	subs	r3, #4
 800742e:	b91a      	cbnz	r2, 8007438 <quorem+0x11c>
 8007430:	459b      	cmp	fp, r3
 8007432:	f108 38ff 	add.w	r8, r8, #4294967295
 8007436:	d3f8      	bcc.n	800742a <quorem+0x10e>
 8007438:	f8c4 8010 	str.w	r8, [r4, #16]
 800743c:	4648      	mov	r0, r9
 800743e:	b003      	add	sp, #12
 8007440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007444:	2000      	movs	r0, #0
 8007446:	4770      	bx	lr

08007448 <_dtoa_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	b099      	sub	sp, #100	; 0x64
 800744e:	4604      	mov	r4, r0
 8007450:	9103      	str	r1, [sp, #12]
 8007452:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007454:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	4692      	mov	sl, r2
 800745a:	ed8d 0b00 	vstr	d0, [sp]
 800745e:	b141      	cbz	r1, 8007472 <_dtoa_r+0x2a>
 8007460:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007462:	604a      	str	r2, [r1, #4]
 8007464:	2301      	movs	r3, #1
 8007466:	4093      	lsls	r3, r2
 8007468:	608b      	str	r3, [r1, #8]
 800746a:	f001 fa5f 	bl	800892c <_Bfree>
 800746e:	2300      	movs	r3, #0
 8007470:	6423      	str	r3, [r4, #64]	; 0x40
 8007472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007476:	2b00      	cmp	r3, #0
 8007478:	4699      	mov	r9, r3
 800747a:	db36      	blt.n	80074ea <_dtoa_r+0xa2>
 800747c:	2300      	movs	r3, #0
 800747e:	602b      	str	r3, [r5, #0]
 8007480:	4ba5      	ldr	r3, [pc, #660]	; (8007718 <_dtoa_r+0x2d0>)
 8007482:	461a      	mov	r2, r3
 8007484:	ea09 0303 	and.w	r3, r9, r3
 8007488:	4293      	cmp	r3, r2
 800748a:	d017      	beq.n	80074bc <_dtoa_r+0x74>
 800748c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007490:	2200      	movs	r2, #0
 8007492:	2300      	movs	r3, #0
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7fe f9c6 	bl	8005828 <__aeabi_dcmpeq>
 800749c:	4680      	mov	r8, r0
 800749e:	2800      	cmp	r0, #0
 80074a0:	d02b      	beq.n	80074fa <_dtoa_r+0xb2>
 80074a2:	9a04      	ldr	r2, [sp, #16]
 80074a4:	2301      	movs	r3, #1
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80cc 	beq.w	8007648 <_dtoa_r+0x200>
 80074b0:	489a      	ldr	r0, [pc, #616]	; (800771c <_dtoa_r+0x2d4>)
 80074b2:	6018      	str	r0, [r3, #0]
 80074b4:	3801      	subs	r0, #1
 80074b6:	b019      	add	sp, #100	; 0x64
 80074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	9a04      	ldr	r2, [sp, #16]
 80074be:	f242 730f 	movw	r3, #9999	; 0x270f
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	9b00      	ldr	r3, [sp, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 80a7 	beq.w	800761a <_dtoa_r+0x1d2>
 80074cc:	4894      	ldr	r0, [pc, #592]	; (8007720 <_dtoa_r+0x2d8>)
 80074ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <_dtoa_r+0x6e>
 80074d4:	78c3      	ldrb	r3, [r0, #3]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80b8 	beq.w	800764c <_dtoa_r+0x204>
 80074dc:	f100 0308 	add.w	r3, r0, #8
 80074e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	b019      	add	sp, #100	; 0x64
 80074e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	9a01      	ldr	r2, [sp, #4]
 80074ec:	2301      	movs	r3, #1
 80074ee:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80074f8:	e7c2      	b.n	8007480 <_dtoa_r+0x38>
 80074fa:	4620      	mov	r0, r4
 80074fc:	ec47 6b10 	vmov	d0, r6, r7
 8007500:	a917      	add	r1, sp, #92	; 0x5c
 8007502:	aa16      	add	r2, sp, #88	; 0x58
 8007504:	f001 fc84 	bl	8008e10 <__d2b>
 8007508:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800750c:	4683      	mov	fp, r0
 800750e:	f040 808d 	bne.w	800762c <_dtoa_r+0x1e4>
 8007512:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007516:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007518:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800751c:	4445      	add	r5, r8
 800751e:	429d      	cmp	r5, r3
 8007520:	f2c0 829e 	blt.w	8007a60 <_dtoa_r+0x618>
 8007524:	4a7f      	ldr	r2, [pc, #508]	; (8007724 <_dtoa_r+0x2dc>)
 8007526:	1b52      	subs	r2, r2, r5
 8007528:	fa09 f902 	lsl.w	r9, r9, r2
 800752c:	9a00      	ldr	r2, [sp, #0]
 800752e:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8007532:	fa22 f003 	lsr.w	r0, r2, r3
 8007536:	ea49 0000 	orr.w	r0, r9, r0
 800753a:	f7fd fa93 	bl	8004a64 <__aeabi_ui2d>
 800753e:	2301      	movs	r3, #1
 8007540:	3d01      	subs	r5, #1
 8007542:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007546:	930f      	str	r3, [sp, #60]	; 0x3c
 8007548:	2200      	movs	r2, #0
 800754a:	4b77      	ldr	r3, [pc, #476]	; (8007728 <_dtoa_r+0x2e0>)
 800754c:	f7fd f94c 	bl	80047e8 <__aeabi_dsub>
 8007550:	a36b      	add	r3, pc, #428	; (adr r3, 8007700 <_dtoa_r+0x2b8>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f7fd fafb 	bl	8004b50 <__aeabi_dmul>
 800755a:	a36b      	add	r3, pc, #428	; (adr r3, 8007708 <_dtoa_r+0x2c0>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7fd f944 	bl	80047ec <__adddf3>
 8007564:	4606      	mov	r6, r0
 8007566:	4628      	mov	r0, r5
 8007568:	460f      	mov	r7, r1
 800756a:	f7fd fa8b 	bl	8004a84 <__aeabi_i2d>
 800756e:	a368      	add	r3, pc, #416	; (adr r3, 8007710 <_dtoa_r+0x2c8>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7fd faec 	bl	8004b50 <__aeabi_dmul>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4630      	mov	r0, r6
 800757e:	4639      	mov	r1, r7
 8007580:	f7fd f934 	bl	80047ec <__adddf3>
 8007584:	4606      	mov	r6, r0
 8007586:	460f      	mov	r7, r1
 8007588:	f7fd fcf4 	bl	8004f74 <__aeabi_d2iz>
 800758c:	4639      	mov	r1, r7
 800758e:	9005      	str	r0, [sp, #20]
 8007590:	2200      	movs	r2, #0
 8007592:	4630      	mov	r0, r6
 8007594:	2300      	movs	r3, #0
 8007596:	f7fe f951 	bl	800583c <__aeabi_dcmplt>
 800759a:	2800      	cmp	r0, #0
 800759c:	f040 81ab 	bne.w	80078f6 <_dtoa_r+0x4ae>
 80075a0:	9b05      	ldr	r3, [sp, #20]
 80075a2:	2b16      	cmp	r3, #22
 80075a4:	f200 81a4 	bhi.w	80078f0 <_dtoa_r+0x4a8>
 80075a8:	9a05      	ldr	r2, [sp, #20]
 80075aa:	4b60      	ldr	r3, [pc, #384]	; (800772c <_dtoa_r+0x2e4>)
 80075ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075b8:	f7fe f95e 	bl	8005878 <__aeabi_dcmpgt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	f000 8255 	beq.w	8007a6c <_dtoa_r+0x624>
 80075c2:	9b05      	ldr	r3, [sp, #20]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	9305      	str	r3, [sp, #20]
 80075c8:	2300      	movs	r3, #0
 80075ca:	930d      	str	r3, [sp, #52]	; 0x34
 80075cc:	ebc5 0508 	rsb	r5, r5, r8
 80075d0:	1e6b      	subs	r3, r5, #1
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	f100 81a6 	bmi.w	8007924 <_dtoa_r+0x4dc>
 80075d8:	2300      	movs	r3, #0
 80075da:	9307      	str	r3, [sp, #28]
 80075dc:	9b05      	ldr	r3, [sp, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f2c0 8197 	blt.w	8007912 <_dtoa_r+0x4ca>
 80075e4:	9a06      	ldr	r2, [sp, #24]
 80075e6:	930c      	str	r3, [sp, #48]	; 0x30
 80075e8:	4611      	mov	r1, r2
 80075ea:	4419      	add	r1, r3
 80075ec:	2300      	movs	r3, #0
 80075ee:	9106      	str	r1, [sp, #24]
 80075f0:	930a      	str	r3, [sp, #40]	; 0x28
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	2b09      	cmp	r3, #9
 80075f6:	d82b      	bhi.n	8007650 <_dtoa_r+0x208>
 80075f8:	2b05      	cmp	r3, #5
 80075fa:	f340 8673 	ble.w	80082e4 <_dtoa_r+0xe9c>
 80075fe:	3b04      	subs	r3, #4
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	2700      	movs	r7, #0
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	3b02      	subs	r3, #2
 8007608:	2b03      	cmp	r3, #3
 800760a:	f200 8651 	bhi.w	80082b0 <_dtoa_r+0xe68>
 800760e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007612:	03d1      	.short	0x03d1
 8007614:	02b603c4 	.word	0x02b603c4
 8007618:	0666      	.short	0x0666
 800761a:	4b41      	ldr	r3, [pc, #260]	; (8007720 <_dtoa_r+0x2d8>)
 800761c:	4a44      	ldr	r2, [pc, #272]	; (8007730 <_dtoa_r+0x2e8>)
 800761e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8007622:	2800      	cmp	r0, #0
 8007624:	bf14      	ite	ne
 8007626:	4618      	movne	r0, r3
 8007628:	4610      	moveq	r0, r2
 800762a:	e750      	b.n	80074ce <_dtoa_r+0x86>
 800762c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007630:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007634:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8007638:	4630      	mov	r0, r6
 800763a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800763e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007642:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007646:	e77f      	b.n	8007548 <_dtoa_r+0x100>
 8007648:	483a      	ldr	r0, [pc, #232]	; (8007734 <_dtoa_r+0x2ec>)
 800764a:	e734      	b.n	80074b6 <_dtoa_r+0x6e>
 800764c:	1cc3      	adds	r3, r0, #3
 800764e:	e747      	b.n	80074e0 <_dtoa_r+0x98>
 8007650:	2100      	movs	r1, #0
 8007652:	6461      	str	r1, [r4, #68]	; 0x44
 8007654:	4620      	mov	r0, r4
 8007656:	468a      	mov	sl, r1
 8007658:	9103      	str	r1, [sp, #12]
 800765a:	f001 f941 	bl	80088e0 <_Balloc>
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
 8007662:	9308      	str	r3, [sp, #32]
 8007664:	930e      	str	r3, [sp, #56]	; 0x38
 8007666:	2301      	movs	r3, #1
 8007668:	9009      	str	r0, [sp, #36]	; 0x24
 800766a:	6420      	str	r0, [r4, #64]	; 0x40
 800766c:	930b      	str	r3, [sp, #44]	; 0x2c
 800766e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007670:	2b00      	cmp	r3, #0
 8007672:	f2c0 80d3 	blt.w	800781c <_dtoa_r+0x3d4>
 8007676:	9a05      	ldr	r2, [sp, #20]
 8007678:	2a0e      	cmp	r2, #14
 800767a:	f300 80cf 	bgt.w	800781c <_dtoa_r+0x3d4>
 800767e:	4b2b      	ldr	r3, [pc, #172]	; (800772c <_dtoa_r+0x2e4>)
 8007680:	f1ba 0f00 	cmp.w	sl, #0
 8007684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007688:	e9d3 8900 	ldrd	r8, r9, [r3]
 800768c:	f2c0 8395 	blt.w	8007dba <_dtoa_r+0x972>
 8007690:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007694:	4642      	mov	r2, r8
 8007696:	464b      	mov	r3, r9
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7fd fb82 	bl	8004da4 <__aeabi_ddiv>
 80076a0:	f7fd fc68 	bl	8004f74 <__aeabi_d2iz>
 80076a4:	4682      	mov	sl, r0
 80076a6:	f7fd f9ed 	bl	8004a84 <__aeabi_i2d>
 80076aa:	4642      	mov	r2, r8
 80076ac:	464b      	mov	r3, r9
 80076ae:	f7fd fa4f 	bl	8004b50 <__aeabi_dmul>
 80076b2:	460b      	mov	r3, r1
 80076b4:	4602      	mov	r2, r0
 80076b6:	4639      	mov	r1, r7
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7fd f895 	bl	80047e8 <__aeabi_dsub>
 80076be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076c0:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80076c4:	702b      	strb	r3, [r5, #0]
 80076c6:	9b08      	ldr	r3, [sp, #32]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	f105 0501 	add.w	r5, r5, #1
 80076d2:	d063      	beq.n	800779c <_dtoa_r+0x354>
 80076d4:	2200      	movs	r2, #0
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <_dtoa_r+0x2f0>)
 80076d8:	f7fd fa3a 	bl	8004b50 <__aeabi_dmul>
 80076dc:	2200      	movs	r2, #0
 80076de:	2300      	movs	r3, #0
 80076e0:	4606      	mov	r6, r0
 80076e2:	460f      	mov	r7, r1
 80076e4:	f7fe f8a0 	bl	8005828 <__aeabi_dcmpeq>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f040 8084 	bne.w	80077f6 <_dtoa_r+0x3ae>
 80076ee:	f8cd b000 	str.w	fp, [sp]
 80076f2:	9403      	str	r4, [sp, #12]
 80076f4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80076f8:	9c08      	ldr	r4, [sp, #32]
 80076fa:	e02a      	b.n	8007752 <_dtoa_r+0x30a>
 80076fc:	f3af 8000 	nop.w
 8007700:	636f4361 	.word	0x636f4361
 8007704:	3fd287a7 	.word	0x3fd287a7
 8007708:	8b60c8b3 	.word	0x8b60c8b3
 800770c:	3fc68a28 	.word	0x3fc68a28
 8007710:	509f79fb 	.word	0x509f79fb
 8007714:	3fd34413 	.word	0x3fd34413
 8007718:	7ff00000 	.word	0x7ff00000
 800771c:	0800a085 	.word	0x0800a085
 8007720:	0800a094 	.word	0x0800a094
 8007724:	fffffc0e 	.word	0xfffffc0e
 8007728:	3ff80000 	.word	0x3ff80000
 800772c:	0800a0a8 	.word	0x0800a0a8
 8007730:	0800a088 	.word	0x0800a088
 8007734:	0800a084 	.word	0x0800a084
 8007738:	40240000 	.word	0x40240000
 800773c:	f7fd fa08 	bl	8004b50 <__aeabi_dmul>
 8007740:	2200      	movs	r2, #0
 8007742:	2300      	movs	r3, #0
 8007744:	4606      	mov	r6, r0
 8007746:	460f      	mov	r7, r1
 8007748:	f7fe f86e 	bl	8005828 <__aeabi_dcmpeq>
 800774c:	2800      	cmp	r0, #0
 800774e:	f040 83e4 	bne.w	8007f1a <_dtoa_r+0xad2>
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7fd fb23 	bl	8004da4 <__aeabi_ddiv>
 800775e:	f7fd fc09 	bl	8004f74 <__aeabi_d2iz>
 8007762:	4682      	mov	sl, r0
 8007764:	f7fd f98e 	bl	8004a84 <__aeabi_i2d>
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f7fd f9f0 	bl	8004b50 <__aeabi_dmul>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7fd f836 	bl	80047e8 <__aeabi_dsub>
 800777c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8007780:	f805 eb01 	strb.w	lr, [r5], #1
 8007784:	ebcb 0e05 	rsb	lr, fp, r5
 8007788:	4574      	cmp	r4, lr
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	4bb7      	ldr	r3, [pc, #732]	; (8007a70 <_dtoa_r+0x628>)
 8007794:	d1d2      	bne.n	800773c <_dtoa_r+0x2f4>
 8007796:	f8dd b000 	ldr.w	fp, [sp]
 800779a:	9c03      	ldr	r4, [sp, #12]
 800779c:	4632      	mov	r2, r6
 800779e:	463b      	mov	r3, r7
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7fd f822 	bl	80047ec <__adddf3>
 80077a8:	4606      	mov	r6, r0
 80077aa:	460f      	mov	r7, r1
 80077ac:	4640      	mov	r0, r8
 80077ae:	4649      	mov	r1, r9
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	f7fe f842 	bl	800583c <__aeabi_dcmplt>
 80077b8:	b948      	cbnz	r0, 80077ce <_dtoa_r+0x386>
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	4632      	mov	r2, r6
 80077c0:	463b      	mov	r3, r7
 80077c2:	f7fe f831 	bl	8005828 <__aeabi_dcmpeq>
 80077c6:	b1b0      	cbz	r0, 80077f6 <_dtoa_r+0x3ae>
 80077c8:	f01a 0f01 	tst.w	sl, #1
 80077cc:	d013      	beq.n	80077f6 <_dtoa_r+0x3ae>
 80077ce:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80077d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077d4:	1e6b      	subs	r3, r5, #1
 80077d6:	e004      	b.n	80077e2 <_dtoa_r+0x39a>
 80077d8:	428b      	cmp	r3, r1
 80077da:	f000 8448 	beq.w	800806e <_dtoa_r+0xc26>
 80077de:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80077e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80077e6:	f103 0501 	add.w	r5, r3, #1
 80077ea:	461a      	mov	r2, r3
 80077ec:	d0f4      	beq.n	80077d8 <_dtoa_r+0x390>
 80077ee:	f108 0301 	add.w	r3, r8, #1
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	7013      	strb	r3, [r2, #0]
 80077f6:	4620      	mov	r0, r4
 80077f8:	4659      	mov	r1, fp
 80077fa:	f001 f897 	bl	800892c <_Bfree>
 80077fe:	2200      	movs	r2, #0
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	702a      	strb	r2, [r5, #0]
 8007804:	9a04      	ldr	r2, [sp, #16]
 8007806:	3301      	adds	r3, #1
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 834b 	beq.w	8007ea8 <_dtoa_r+0xa60>
 8007812:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007814:	601d      	str	r5, [r3, #0]
 8007816:	b019      	add	sp, #100	; 0x64
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800781e:	2a00      	cmp	r2, #0
 8007820:	f000 8085 	beq.w	800792e <_dtoa_r+0x4e6>
 8007824:	9a03      	ldr	r2, [sp, #12]
 8007826:	2a01      	cmp	r2, #1
 8007828:	f340 830a 	ble.w	8007e40 <_dtoa_r+0x9f8>
 800782c:	9b08      	ldr	r3, [sp, #32]
 800782e:	1e5f      	subs	r7, r3, #1
 8007830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007832:	42bb      	cmp	r3, r7
 8007834:	f2c0 83a6 	blt.w	8007f84 <_dtoa_r+0xb3c>
 8007838:	1bdf      	subs	r7, r3, r7
 800783a:	9b08      	ldr	r3, [sp, #32]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f2c0 84a4 	blt.w	800818a <_dtoa_r+0xd42>
 8007842:	9d07      	ldr	r5, [sp, #28]
 8007844:	9b08      	ldr	r3, [sp, #32]
 8007846:	9a07      	ldr	r2, [sp, #28]
 8007848:	441a      	add	r2, r3
 800784a:	9207      	str	r2, [sp, #28]
 800784c:	9a06      	ldr	r2, [sp, #24]
 800784e:	4620      	mov	r0, r4
 8007850:	441a      	add	r2, r3
 8007852:	2101      	movs	r1, #1
 8007854:	9206      	str	r2, [sp, #24]
 8007856:	f001 f903 	bl	8008a60 <__i2b>
 800785a:	4606      	mov	r6, r0
 800785c:	b165      	cbz	r5, 8007878 <_dtoa_r+0x430>
 800785e:	9906      	ldr	r1, [sp, #24]
 8007860:	2900      	cmp	r1, #0
 8007862:	460b      	mov	r3, r1
 8007864:	dd08      	ble.n	8007878 <_dtoa_r+0x430>
 8007866:	42a9      	cmp	r1, r5
 8007868:	9a07      	ldr	r2, [sp, #28]
 800786a:	bfa8      	it	ge
 800786c:	462b      	movge	r3, r5
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	1aed      	subs	r5, r5, r3
 8007872:	1acb      	subs	r3, r1, r3
 8007874:	9207      	str	r2, [sp, #28]
 8007876:	9306      	str	r3, [sp, #24]
 8007878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd1a      	ble.n	80078b4 <_dtoa_r+0x46c>
 800787e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 8378 	beq.w	8007f76 <_dtoa_r+0xb2e>
 8007886:	2f00      	cmp	r7, #0
 8007888:	dd10      	ble.n	80078ac <_dtoa_r+0x464>
 800788a:	4631      	mov	r1, r6
 800788c:	463a      	mov	r2, r7
 800788e:	4620      	mov	r0, r4
 8007890:	f001 f98a 	bl	8008ba8 <__pow5mult>
 8007894:	4606      	mov	r6, r0
 8007896:	465a      	mov	r2, fp
 8007898:	4631      	mov	r1, r6
 800789a:	4620      	mov	r0, r4
 800789c:	f001 f8ea 	bl	8008a74 <__multiply>
 80078a0:	4659      	mov	r1, fp
 80078a2:	4680      	mov	r8, r0
 80078a4:	4620      	mov	r0, r4
 80078a6:	f001 f841 	bl	800892c <_Bfree>
 80078aa:	46c3      	mov	fp, r8
 80078ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ae:	1bda      	subs	r2, r3, r7
 80078b0:	f040 82a5 	bne.w	8007dfe <_dtoa_r+0x9b6>
 80078b4:	4620      	mov	r0, r4
 80078b6:	2101      	movs	r1, #1
 80078b8:	f001 f8d2 	bl	8008a60 <__i2b>
 80078bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078be:	2b00      	cmp	r3, #0
 80078c0:	4680      	mov	r8, r0
 80078c2:	dd38      	ble.n	8007936 <_dtoa_r+0x4ee>
 80078c4:	4601      	mov	r1, r0
 80078c6:	461a      	mov	r2, r3
 80078c8:	4620      	mov	r0, r4
 80078ca:	f001 f96d 	bl	8008ba8 <__pow5mult>
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	4680      	mov	r8, r0
 80078d4:	f340 8299 	ble.w	8007e0a <_dtoa_r+0x9c2>
 80078d8:	f04f 0900 	mov.w	r9, #0
 80078dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80078e0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80078e4:	6918      	ldr	r0, [r3, #16]
 80078e6:	f001 f86d 	bl	80089c4 <__hi0bits>
 80078ea:	f1c0 0020 	rsb	r0, r0, #32
 80078ee:	e02c      	b.n	800794a <_dtoa_r+0x502>
 80078f0:	2301      	movs	r3, #1
 80078f2:	930d      	str	r3, [sp, #52]	; 0x34
 80078f4:	e66a      	b.n	80075cc <_dtoa_r+0x184>
 80078f6:	9805      	ldr	r0, [sp, #20]
 80078f8:	f7fd f8c4 	bl	8004a84 <__aeabi_i2d>
 80078fc:	4632      	mov	r2, r6
 80078fe:	463b      	mov	r3, r7
 8007900:	f7fd ff92 	bl	8005828 <__aeabi_dcmpeq>
 8007904:	2800      	cmp	r0, #0
 8007906:	f47f ae4b 	bne.w	80075a0 <_dtoa_r+0x158>
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	3b01      	subs	r3, #1
 800790e:	9305      	str	r3, [sp, #20]
 8007910:	e646      	b.n	80075a0 <_dtoa_r+0x158>
 8007912:	9a07      	ldr	r2, [sp, #28]
 8007914:	9b05      	ldr	r3, [sp, #20]
 8007916:	1ad2      	subs	r2, r2, r3
 8007918:	425b      	negs	r3, r3
 800791a:	930a      	str	r3, [sp, #40]	; 0x28
 800791c:	2300      	movs	r3, #0
 800791e:	9207      	str	r2, [sp, #28]
 8007920:	930c      	str	r3, [sp, #48]	; 0x30
 8007922:	e666      	b.n	80075f2 <_dtoa_r+0x1aa>
 8007924:	425b      	negs	r3, r3
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	2300      	movs	r3, #0
 800792a:	9306      	str	r3, [sp, #24]
 800792c:	e656      	b.n	80075dc <_dtoa_r+0x194>
 800792e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007930:	9d07      	ldr	r5, [sp, #28]
 8007932:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007934:	e792      	b.n	800785c <_dtoa_r+0x414>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	2b01      	cmp	r3, #1
 800793a:	f340 82b8 	ble.w	8007eae <_dtoa_r+0xa66>
 800793e:	f04f 0900 	mov.w	r9, #0
 8007942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1c9      	bne.n	80078dc <_dtoa_r+0x494>
 8007948:	2001      	movs	r0, #1
 800794a:	9b06      	ldr	r3, [sp, #24]
 800794c:	4418      	add	r0, r3
 800794e:	f010 001f 	ands.w	r0, r0, #31
 8007952:	f000 8083 	beq.w	8007a5c <_dtoa_r+0x614>
 8007956:	f1c0 0320 	rsb	r3, r0, #32
 800795a:	2b04      	cmp	r3, #4
 800795c:	f340 84b9 	ble.w	80082d2 <_dtoa_r+0xe8a>
 8007960:	f1c0 001c 	rsb	r0, r0, #28
 8007964:	9b07      	ldr	r3, [sp, #28]
 8007966:	4403      	add	r3, r0
 8007968:	9307      	str	r3, [sp, #28]
 800796a:	9b06      	ldr	r3, [sp, #24]
 800796c:	4403      	add	r3, r0
 800796e:	4405      	add	r5, r0
 8007970:	9306      	str	r3, [sp, #24]
 8007972:	9b07      	ldr	r3, [sp, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd05      	ble.n	8007984 <_dtoa_r+0x53c>
 8007978:	4659      	mov	r1, fp
 800797a:	461a      	mov	r2, r3
 800797c:	4620      	mov	r0, r4
 800797e:	f001 f963 	bl	8008c48 <__lshift>
 8007982:	4683      	mov	fp, r0
 8007984:	9b06      	ldr	r3, [sp, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	dd05      	ble.n	8007996 <_dtoa_r+0x54e>
 800798a:	4641      	mov	r1, r8
 800798c:	461a      	mov	r2, r3
 800798e:	4620      	mov	r0, r4
 8007990:	f001 f95a 	bl	8008c48 <__lshift>
 8007994:	4680      	mov	r8, r0
 8007996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 826a 	bne.w	8007e72 <_dtoa_r+0xa2a>
 800799e:	9b08      	ldr	r3, [sp, #32]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f340 8297 	ble.w	8007ed4 <_dtoa_r+0xa8c>
 80079a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d171      	bne.n	8007a90 <_dtoa_r+0x648>
 80079ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80079b0:	9f08      	ldr	r7, [sp, #32]
 80079b2:	464d      	mov	r5, r9
 80079b4:	e002      	b.n	80079bc <_dtoa_r+0x574>
 80079b6:	f000 ffc3 	bl	8008940 <__multadd>
 80079ba:	4683      	mov	fp, r0
 80079bc:	4641      	mov	r1, r8
 80079be:	4658      	mov	r0, fp
 80079c0:	f7ff fcac 	bl	800731c <quorem>
 80079c4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80079c8:	f805 cb01 	strb.w	ip, [r5], #1
 80079cc:	ebc9 0305 	rsb	r3, r9, r5
 80079d0:	42bb      	cmp	r3, r7
 80079d2:	4620      	mov	r0, r4
 80079d4:	4659      	mov	r1, fp
 80079d6:	f04f 020a 	mov.w	r2, #10
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	dbea      	blt.n	80079b6 <_dtoa_r+0x56e>
 80079e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e2:	9a08      	ldr	r2, [sp, #32]
 80079e4:	2a01      	cmp	r2, #1
 80079e6:	bfac      	ite	ge
 80079e8:	189b      	addge	r3, r3, r2
 80079ea:	3301      	addlt	r3, #1
 80079ec:	461d      	mov	r5, r3
 80079ee:	f04f 0a00 	mov.w	sl, #0
 80079f2:	4659      	mov	r1, fp
 80079f4:	2201      	movs	r2, #1
 80079f6:	4620      	mov	r0, r4
 80079f8:	f8cd c000 	str.w	ip, [sp]
 80079fc:	f001 f924 	bl	8008c48 <__lshift>
 8007a00:	4641      	mov	r1, r8
 8007a02:	4683      	mov	fp, r0
 8007a04:	f001 f976 	bl	8008cf4 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f8dd c000 	ldr.w	ip, [sp]
 8007a0e:	f340 82ef 	ble.w	8007ff0 <_dtoa_r+0xba8>
 8007a12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a18:	1e6b      	subs	r3, r5, #1
 8007a1a:	e004      	b.n	8007a26 <_dtoa_r+0x5de>
 8007a1c:	428b      	cmp	r3, r1
 8007a1e:	f000 8275 	beq.w	8007f0c <_dtoa_r+0xac4>
 8007a22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a26:	2a39      	cmp	r2, #57	; 0x39
 8007a28:	f103 0501 	add.w	r5, r3, #1
 8007a2c:	d0f6      	beq.n	8007a1c <_dtoa_r+0x5d4>
 8007a2e:	3201      	adds	r2, #1
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	4641      	mov	r1, r8
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 ff79 	bl	800892c <_Bfree>
 8007a3a:	2e00      	cmp	r6, #0
 8007a3c:	f43f aedb 	beq.w	80077f6 <_dtoa_r+0x3ae>
 8007a40:	f1ba 0f00 	cmp.w	sl, #0
 8007a44:	d005      	beq.n	8007a52 <_dtoa_r+0x60a>
 8007a46:	45b2      	cmp	sl, r6
 8007a48:	d003      	beq.n	8007a52 <_dtoa_r+0x60a>
 8007a4a:	4651      	mov	r1, sl
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 ff6d 	bl	800892c <_Bfree>
 8007a52:	4631      	mov	r1, r6
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 ff69 	bl	800892c <_Bfree>
 8007a5a:	e6cc      	b.n	80077f6 <_dtoa_r+0x3ae>
 8007a5c:	201c      	movs	r0, #28
 8007a5e:	e781      	b.n	8007964 <_dtoa_r+0x51c>
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <_dtoa_r+0x62c>)
 8007a62:	9a00      	ldr	r2, [sp, #0]
 8007a64:	1b5b      	subs	r3, r3, r5
 8007a66:	fa02 f003 	lsl.w	r0, r2, r3
 8007a6a:	e566      	b.n	800753a <_dtoa_r+0xf2>
 8007a6c:	900d      	str	r0, [sp, #52]	; 0x34
 8007a6e:	e5ad      	b.n	80075cc <_dtoa_r+0x184>
 8007a70:	40240000 	.word	0x40240000
 8007a74:	fffffbee 	.word	0xfffffbee
 8007a78:	4631      	mov	r1, r6
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	220a      	movs	r2, #10
 8007a80:	f000 ff5e 	bl	8008940 <__multadd>
 8007a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	4606      	mov	r6, r0
 8007a8a:	f340 840b 	ble.w	80082a4 <_dtoa_r+0xe5c>
 8007a8e:	9308      	str	r3, [sp, #32]
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	dd05      	ble.n	8007aa0 <_dtoa_r+0x658>
 8007a94:	4631      	mov	r1, r6
 8007a96:	462a      	mov	r2, r5
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f001 f8d5 	bl	8008c48 <__lshift>
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	f1b9 0f00 	cmp.w	r9, #0
 8007aa4:	f040 82ed 	bne.w	8008082 <_dtoa_r+0xc3a>
 8007aa8:	46b1      	mov	r9, r6
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	18d3      	adds	r3, r2, r3
 8007ab2:	9308      	str	r3, [sp, #32]
 8007ab4:	9b00      	ldr	r3, [sp, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	930a      	str	r3, [sp, #40]	; 0x28
 8007abc:	4617      	mov	r7, r2
 8007abe:	4641      	mov	r1, r8
 8007ac0:	4658      	mov	r0, fp
 8007ac2:	f7ff fc2b 	bl	800731c <quorem>
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4605      	mov	r5, r0
 8007aca:	4658      	mov	r0, fp
 8007acc:	f001 f912 	bl	8008cf4 <__mcmp>
 8007ad0:	464a      	mov	r2, r9
 8007ad2:	4682      	mov	sl, r0
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f001 f930 	bl	8008d3c <__mdiff>
 8007adc:	68c2      	ldr	r2, [r0, #12]
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	f040 81ba 	bne.w	8007e5e <_dtoa_r+0xa16>
 8007aea:	4619      	mov	r1, r3
 8007aec:	4658      	mov	r0, fp
 8007aee:	f8cd c01c 	str.w	ip, [sp, #28]
 8007af2:	9306      	str	r3, [sp, #24]
 8007af4:	f001 f8fe 	bl	8008cf4 <__mcmp>
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	9000      	str	r0, [sp, #0]
 8007afc:	4619      	mov	r1, r3
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 ff14 	bl	800892c <_Bfree>
 8007b04:	9a00      	ldr	r2, [sp, #0]
 8007b06:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007b0a:	b92a      	cbnz	r2, 8007b18 <_dtoa_r+0x6d0>
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	b91b      	cbnz	r3, 8007b18 <_dtoa_r+0x6d0>
 8007b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 83aa 	beq.w	800826c <_dtoa_r+0xe24>
 8007b18:	f1ba 0f00 	cmp.w	sl, #0
 8007b1c:	f2c0 824a 	blt.w	8007fb4 <_dtoa_r+0xb6c>
 8007b20:	d105      	bne.n	8007b2e <_dtoa_r+0x6e6>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	b91b      	cbnz	r3, 8007b2e <_dtoa_r+0x6e6>
 8007b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 8243 	beq.w	8007fb4 <_dtoa_r+0xb6c>
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	f300 82bb 	bgt.w	80080aa <_dtoa_r+0xc62>
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	f887 c000 	strb.w	ip, [r7]
 8007b3a:	f107 0a01 	add.w	sl, r7, #1
 8007b3e:	429f      	cmp	r7, r3
 8007b40:	4655      	mov	r5, sl
 8007b42:	f000 82be 	beq.w	80080c2 <_dtoa_r+0xc7a>
 8007b46:	4659      	mov	r1, fp
 8007b48:	220a      	movs	r2, #10
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fef7 	bl	8008940 <__multadd>
 8007b52:	454e      	cmp	r6, r9
 8007b54:	4683      	mov	fp, r0
 8007b56:	4631      	mov	r1, r6
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f04f 020a 	mov.w	r2, #10
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	f000 8176 	beq.w	8007e52 <_dtoa_r+0xa0a>
 8007b66:	f000 feeb 	bl	8008940 <__multadd>
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	220a      	movs	r2, #10
 8007b70:	4620      	mov	r0, r4
 8007b72:	2300      	movs	r3, #0
 8007b74:	f000 fee4 	bl	8008940 <__multadd>
 8007b78:	4657      	mov	r7, sl
 8007b7a:	4681      	mov	r9, r0
 8007b7c:	e79f      	b.n	8007abe <_dtoa_r+0x676>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b82:	f1ba 0f00 	cmp.w	sl, #0
 8007b86:	f340 820c 	ble.w	8007fa2 <_dtoa_r+0xb5a>
 8007b8a:	4656      	mov	r6, sl
 8007b8c:	4655      	mov	r5, sl
 8007b8e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007b92:	f8cd a020 	str.w	sl, [sp, #32]
 8007b96:	2100      	movs	r1, #0
 8007b98:	2e17      	cmp	r6, #23
 8007b9a:	6461      	str	r1, [r4, #68]	; 0x44
 8007b9c:	d90a      	bls.n	8007bb4 <_dtoa_r+0x76c>
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	f103 0014 	add.w	r0, r3, #20
 8007ba8:	4286      	cmp	r6, r0
 8007baa:	4611      	mov	r1, r2
 8007bac:	f102 0201 	add.w	r2, r2, #1
 8007bb0:	d2f7      	bcs.n	8007ba2 <_dtoa_r+0x75a>
 8007bb2:	6461      	str	r1, [r4, #68]	; 0x44
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 fe93 	bl	80088e0 <_Balloc>
 8007bba:	2d0e      	cmp	r5, #14
 8007bbc:	9009      	str	r0, [sp, #36]	; 0x24
 8007bbe:	6420      	str	r0, [r4, #64]	; 0x40
 8007bc0:	f63f ad55 	bhi.w	800766e <_dtoa_r+0x226>
 8007bc4:	2f00      	cmp	r7, #0
 8007bc6:	f43f ad52 	beq.w	800766e <_dtoa_r+0x226>
 8007bca:	ed9d 7b00 	vldr	d7, [sp]
 8007bce:	9905      	ldr	r1, [sp, #20]
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007bd6:	f340 8223 	ble.w	8008020 <_dtoa_r+0xbd8>
 8007bda:	4bb7      	ldr	r3, [pc, #732]	; (8007eb8 <_dtoa_r+0xa70>)
 8007bdc:	f001 020f 	and.w	r2, r1, #15
 8007be0:	110d      	asrs	r5, r1, #4
 8007be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007be6:	06e9      	lsls	r1, r5, #27
 8007be8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007bec:	f140 81d2 	bpl.w	8007f94 <_dtoa_r+0xb4c>
 8007bf0:	4bb2      	ldr	r3, [pc, #712]	; (8007ebc <_dtoa_r+0xa74>)
 8007bf2:	ec51 0b17 	vmov	r0, r1, d7
 8007bf6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bfa:	f7fd f8d3 	bl	8004da4 <__aeabi_ddiv>
 8007bfe:	e9cd 0100 	strd	r0, r1, [sp]
 8007c02:	f005 050f 	and.w	r5, r5, #15
 8007c06:	f04f 0803 	mov.w	r8, #3
 8007c0a:	b18d      	cbz	r5, 8007c30 <_dtoa_r+0x7e8>
 8007c0c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8007ebc <_dtoa_r+0xa74>
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	07ea      	lsls	r2, r5, #31
 8007c16:	d505      	bpl.n	8007c24 <_dtoa_r+0x7dc>
 8007c18:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007c1c:	f7fc ff98 	bl	8004b50 <__aeabi_dmul>
 8007c20:	f108 0801 	add.w	r8, r8, #1
 8007c24:	106d      	asrs	r5, r5, #1
 8007c26:	f109 0908 	add.w	r9, r9, #8
 8007c2a:	d1f3      	bne.n	8007c14 <_dtoa_r+0x7cc>
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	460f      	mov	r7, r1
 8007c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	f7fd f8b4 	bl	8004da4 <__aeabi_ddiv>
 8007c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8007c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c42:	b143      	cbz	r3, 8007c56 <_dtoa_r+0x80e>
 8007c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4b9d      	ldr	r3, [pc, #628]	; (8007ec0 <_dtoa_r+0xa78>)
 8007c4c:	f7fd fdf6 	bl	800583c <__aeabi_dcmplt>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f040 82ae 	bne.w	80081b2 <_dtoa_r+0xd6a>
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7fc ff14 	bl	8004a84 <__aeabi_i2d>
 8007c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c60:	f7fc ff76 	bl	8004b50 <__aeabi_dmul>
 8007c64:	4b97      	ldr	r3, [pc, #604]	; (8007ec4 <_dtoa_r+0xa7c>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	f7fc fdc0 	bl	80047ec <__adddf3>
 8007c6c:	9b08      	ldr	r3, [sp, #32]
 8007c6e:	4606      	mov	r6, r0
 8007c70:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8162 	beq.w	8007f3e <_dtoa_r+0xaf6>
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c80:	9314      	str	r3, [sp, #80]	; 0x50
 8007c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8223 	beq.w	80080d0 <_dtoa_r+0xc88>
 8007c8a:	4b8b      	ldr	r3, [pc, #556]	; (8007eb8 <_dtoa_r+0xa70>)
 8007c8c:	498e      	ldr	r1, [pc, #568]	; (8007ec8 <_dtoa_r+0xa80>)
 8007c8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007c92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c96:	2000      	movs	r0, #0
 8007c98:	f7fd f884 	bl	8004da4 <__aeabi_ddiv>
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	f7fc fda2 	bl	80047e8 <__aeabi_dsub>
 8007ca4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ca8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007cac:	4639      	mov	r1, r7
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f7fd f960 	bl	8004f74 <__aeabi_d2iz>
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	f7fc fee5 	bl	8004a84 <__aeabi_i2d>
 8007cba:	3530      	adds	r5, #48	; 0x30
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7fc fd90 	bl	80047e8 <__aeabi_dsub>
 8007cc8:	fa5f f885 	uxtb.w	r8, r5
 8007ccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007cd2:	f885 8000 	strb.w	r8, [r5]
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460f      	mov	r7, r1
 8007cda:	3501      	adds	r5, #1
 8007cdc:	f7fd fdae 	bl	800583c <__aeabi_dcmplt>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f040 82a7 	bne.w	8008234 <_dtoa_r+0xdec>
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	463b      	mov	r3, r7
 8007cea:	2000      	movs	r0, #0
 8007cec:	4974      	ldr	r1, [pc, #464]	; (8007ec0 <_dtoa_r+0xa78>)
 8007cee:	f7fc fd7b 	bl	80047e8 <__aeabi_dsub>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007cfa:	f7fd fdbd 	bl	8005878 <__aeabi_dcmpgt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f040 82ad 	bne.w	800825e <_dtoa_r+0xe16>
 8007d04:	f1b9 0f01 	cmp.w	r9, #1
 8007d08:	f340 8184 	ble.w	8008014 <_dtoa_r+0xbcc>
 8007d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0e:	f8cd b000 	str.w	fp, [sp]
 8007d12:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8007d16:	4499      	add	r9, r3
 8007d18:	46a0      	mov	r8, r4
 8007d1a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8007d1e:	e00d      	b.n	8007d3c <_dtoa_r+0x8f4>
 8007d20:	2000      	movs	r0, #0
 8007d22:	4967      	ldr	r1, [pc, #412]	; (8007ec0 <_dtoa_r+0xa78>)
 8007d24:	f7fc fd60 	bl	80047e8 <__aeabi_dsub>
 8007d28:	4652      	mov	r2, sl
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	f7fd fd86 	bl	800583c <__aeabi_dcmplt>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f040 828f 	bne.w	8008254 <_dtoa_r+0xe0c>
 8007d36:	454d      	cmp	r5, r9
 8007d38:	f000 8167 	beq.w	800800a <_dtoa_r+0xbc2>
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	4659      	mov	r1, fp
 8007d40:	2200      	movs	r2, #0
 8007d42:	4b62      	ldr	r3, [pc, #392]	; (8007ecc <_dtoa_r+0xa84>)
 8007d44:	f7fc ff04 	bl	8004b50 <__aeabi_dmul>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4b60      	ldr	r3, [pc, #384]	; (8007ecc <_dtoa_r+0xa84>)
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	468b      	mov	fp, r1
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7fc fefc 	bl	8004b50 <__aeabi_dmul>
 8007d58:	460f      	mov	r7, r1
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	f7fd f90a 	bl	8004f74 <__aeabi_d2iz>
 8007d60:	4604      	mov	r4, r0
 8007d62:	f7fc fe8f 	bl	8004a84 <__aeabi_i2d>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4639      	mov	r1, r7
 8007d6e:	f7fc fd3b 	bl	80047e8 <__aeabi_dsub>
 8007d72:	3430      	adds	r4, #48	; 0x30
 8007d74:	b2e4      	uxtb	r4, r4
 8007d76:	4652      	mov	r2, sl
 8007d78:	465b      	mov	r3, fp
 8007d7a:	f805 4b01 	strb.w	r4, [r5], #1
 8007d7e:	4606      	mov	r6, r0
 8007d80:	460f      	mov	r7, r1
 8007d82:	f7fd fd5b 	bl	800583c <__aeabi_dcmplt>
 8007d86:	4632      	mov	r2, r6
 8007d88:	463b      	mov	r3, r7
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d0c8      	beq.n	8007d20 <_dtoa_r+0x8d8>
 8007d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d90:	f8dd b000 	ldr.w	fp, [sp]
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	4644      	mov	r4, r8
 8007d98:	e52d      	b.n	80077f6 <_dtoa_r+0x3ae>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	4453      	add	r3, sl
 8007da2:	930e      	str	r3, [sp, #56]	; 0x38
 8007da4:	3301      	adds	r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	9308      	str	r3, [sp, #32]
 8007daa:	f340 8101 	ble.w	8007fb0 <_dtoa_r+0xb68>
 8007dae:	9d08      	ldr	r5, [sp, #32]
 8007db0:	462e      	mov	r6, r5
 8007db2:	e6f0      	b.n	8007b96 <_dtoa_r+0x74e>
 8007db4:	2300      	movs	r3, #0
 8007db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db8:	e6e3      	b.n	8007b82 <_dtoa_r+0x73a>
 8007dba:	9b08      	ldr	r3, [sp, #32]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f73f ac67 	bgt.w	8007690 <_dtoa_r+0x248>
 8007dc2:	f040 80d4 	bne.w	8007f6e <_dtoa_r+0xb26>
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4b41      	ldr	r3, [pc, #260]	; (8007ed0 <_dtoa_r+0xa88>)
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7fc febf 	bl	8004b50 <__aeabi_dmul>
 8007dd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dd6:	f7fd fd45 	bl	8005864 <__aeabi_dcmpge>
 8007dda:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dde:	4646      	mov	r6, r8
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f000 808b 	beq.w	8007efc <_dtoa_r+0xab4>
 8007de6:	ea6f 030a 	mvn.w	r3, sl
 8007dea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007dec:	9305      	str	r3, [sp, #20]
 8007dee:	4641      	mov	r1, r8
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fd9b 	bl	800892c <_Bfree>
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	f47f ae2b 	bne.w	8007a52 <_dtoa_r+0x60a>
 8007dfc:	e4fb      	b.n	80077f6 <_dtoa_r+0x3ae>
 8007dfe:	4659      	mov	r1, fp
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fed1 	bl	8008ba8 <__pow5mult>
 8007e06:	4683      	mov	fp, r0
 8007e08:	e554      	b.n	80078b4 <_dtoa_r+0x46c>
 8007e0a:	9b00      	ldr	r3, [sp, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f47f ad63 	bne.w	80078d8 <_dtoa_r+0x490>
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f47f ad90 	bne.w	800793e <_dtoa_r+0x4f6>
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007e24:	0d3f      	lsrs	r7, r7, #20
 8007e26:	053f      	lsls	r7, r7, #20
 8007e28:	2f00      	cmp	r7, #0
 8007e2a:	f000 821c 	beq.w	8008266 <_dtoa_r+0xe1e>
 8007e2e:	9b07      	ldr	r3, [sp, #28]
 8007e30:	3301      	adds	r3, #1
 8007e32:	9307      	str	r3, [sp, #28]
 8007e34:	9b06      	ldr	r3, [sp, #24]
 8007e36:	3301      	adds	r3, #1
 8007e38:	9306      	str	r3, [sp, #24]
 8007e3a:	f04f 0901 	mov.w	r9, #1
 8007e3e:	e580      	b.n	8007942 <_dtoa_r+0x4fa>
 8007e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	f000 81a7 	beq.w	8008196 <_dtoa_r+0xd4e>
 8007e48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007e4e:	9d07      	ldr	r5, [sp, #28]
 8007e50:	e4f9      	b.n	8007846 <_dtoa_r+0x3fe>
 8007e52:	f000 fd75 	bl	8008940 <__multadd>
 8007e56:	4657      	mov	r7, sl
 8007e58:	4606      	mov	r6, r0
 8007e5a:	4681      	mov	r9, r0
 8007e5c:	e62f      	b.n	8007abe <_dtoa_r+0x676>
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4620      	mov	r0, r4
 8007e62:	f8cd c000 	str.w	ip, [sp]
 8007e66:	f000 fd61 	bl	800892c <_Bfree>
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f8dd c000 	ldr.w	ip, [sp]
 8007e70:	e652      	b.n	8007b18 <_dtoa_r+0x6d0>
 8007e72:	4658      	mov	r0, fp
 8007e74:	4641      	mov	r1, r8
 8007e76:	f000 ff3d 	bl	8008cf4 <__mcmp>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f6bf ad8f 	bge.w	800799e <_dtoa_r+0x556>
 8007e80:	9f05      	ldr	r7, [sp, #20]
 8007e82:	4659      	mov	r1, fp
 8007e84:	2300      	movs	r3, #0
 8007e86:	4620      	mov	r0, r4
 8007e88:	220a      	movs	r2, #10
 8007e8a:	3f01      	subs	r7, #1
 8007e8c:	9705      	str	r7, [sp, #20]
 8007e8e:	f000 fd57 	bl	8008940 <__multadd>
 8007e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e94:	4683      	mov	fp, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f47f adee 	bne.w	8007a78 <_dtoa_r+0x630>
 8007e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f340 81f5 	ble.w	800828e <_dtoa_r+0xe46>
 8007ea4:	9308      	str	r3, [sp, #32]
 8007ea6:	e581      	b.n	80079ac <_dtoa_r+0x564>
 8007ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eaa:	f7ff bb04 	b.w	80074b6 <_dtoa_r+0x6e>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f47f ad44 	bne.w	800793e <_dtoa_r+0x4f6>
 8007eb6:	e7ac      	b.n	8007e12 <_dtoa_r+0x9ca>
 8007eb8:	0800a0a8 	.word	0x0800a0a8
 8007ebc:	0800a180 	.word	0x0800a180
 8007ec0:	3ff00000 	.word	0x3ff00000
 8007ec4:	401c0000 	.word	0x401c0000
 8007ec8:	3fe00000 	.word	0x3fe00000
 8007ecc:	40240000 	.word	0x40240000
 8007ed0:	40140000 	.word	0x40140000
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	f77f ad65 	ble.w	80079a6 <_dtoa_r+0x55e>
 8007edc:	9b08      	ldr	r3, [sp, #32]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d181      	bne.n	8007de6 <_dtoa_r+0x99e>
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fd2a 	bl	8008940 <__multadd>
 8007eec:	4680      	mov	r8, r0
 8007eee:	4641      	mov	r1, r8
 8007ef0:	4658      	mov	r0, fp
 8007ef2:	f000 feff 	bl	8008cf4 <__mcmp>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f77f af75 	ble.w	8007de6 <_dtoa_r+0x99e>
 8007efc:	9a05      	ldr	r2, [sp, #20]
 8007efe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f00:	2331      	movs	r3, #49	; 0x31
 8007f02:	3201      	adds	r2, #1
 8007f04:	9205      	str	r2, [sp, #20]
 8007f06:	700b      	strb	r3, [r1, #0]
 8007f08:	1c4d      	adds	r5, r1, #1
 8007f0a:	e770      	b.n	8007dee <_dtoa_r+0x9a6>
 8007f0c:	9a05      	ldr	r2, [sp, #20]
 8007f0e:	3201      	adds	r2, #1
 8007f10:	9205      	str	r2, [sp, #20]
 8007f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f14:	2331      	movs	r3, #49	; 0x31
 8007f16:	7013      	strb	r3, [r2, #0]
 8007f18:	e58b      	b.n	8007a32 <_dtoa_r+0x5ea>
 8007f1a:	f8dd b000 	ldr.w	fp, [sp]
 8007f1e:	9c03      	ldr	r4, [sp, #12]
 8007f20:	e469      	b.n	80077f6 <_dtoa_r+0x3ae>
 8007f22:	4640      	mov	r0, r8
 8007f24:	f7fc fdae 	bl	8004a84 <__aeabi_i2d>
 8007f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f2c:	f7fc fe10 	bl	8004b50 <__aeabi_dmul>
 8007f30:	2200      	movs	r2, #0
 8007f32:	4bc2      	ldr	r3, [pc, #776]	; (800823c <_dtoa_r+0xdf4>)
 8007f34:	f7fc fc5a 	bl	80047ec <__adddf3>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4bbf      	ldr	r3, [pc, #764]	; (8008240 <_dtoa_r+0xdf8>)
 8007f42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f46:	f7fc fc4f 	bl	80047e8 <__aeabi_dsub>
 8007f4a:	4632      	mov	r2, r6
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4689      	mov	r9, r1
 8007f52:	f7fd fc91 	bl	8005878 <__aeabi_dcmpgt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f040 80b6 	bne.w	80080c8 <_dtoa_r+0xc80>
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007f62:	4640      	mov	r0, r8
 8007f64:	4649      	mov	r1, r9
 8007f66:	f7fd fc69 	bl	800583c <__aeabi_dcmplt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d052      	beq.n	8008014 <_dtoa_r+0xbcc>
 8007f6e:	f04f 0800 	mov.w	r8, #0
 8007f72:	4646      	mov	r6, r8
 8007f74:	e737      	b.n	8007de6 <_dtoa_r+0x99e>
 8007f76:	4659      	mov	r1, fp
 8007f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fe14 	bl	8008ba8 <__pow5mult>
 8007f80:	4683      	mov	fp, r0
 8007f82:	e497      	b.n	80078b4 <_dtoa_r+0x46c>
 8007f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f88:	970a      	str	r7, [sp, #40]	; 0x28
 8007f8a:	1afb      	subs	r3, r7, r3
 8007f8c:	441a      	add	r2, r3
 8007f8e:	920c      	str	r2, [sp, #48]	; 0x30
 8007f90:	2700      	movs	r7, #0
 8007f92:	e452      	b.n	800783a <_dtoa_r+0x3f2>
 8007f94:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8007f98:	f04f 0802 	mov.w	r8, #2
 8007f9c:	ed8d 7b00 	vstr	d7, [sp]
 8007fa0:	e633      	b.n	8007c0a <_dtoa_r+0x7c2>
 8007fa2:	2501      	movs	r5, #1
 8007fa4:	950e      	str	r5, [sp, #56]	; 0x38
 8007fa6:	9508      	str	r5, [sp, #32]
 8007fa8:	46aa      	mov	sl, r5
 8007faa:	2100      	movs	r1, #0
 8007fac:	6461      	str	r1, [r4, #68]	; 0x44
 8007fae:	e601      	b.n	8007bb4 <_dtoa_r+0x76c>
 8007fb0:	461d      	mov	r5, r3
 8007fb2:	e7fa      	b.n	8007faa <_dtoa_r+0xb62>
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	dd15      	ble.n	8007fe4 <_dtoa_r+0xb9c>
 8007fb8:	4659      	mov	r1, fp
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f8cd c000 	str.w	ip, [sp]
 8007fc2:	f000 fe41 	bl	8008c48 <__lshift>
 8007fc6:	4641      	mov	r1, r8
 8007fc8:	4683      	mov	fp, r0
 8007fca:	f000 fe93 	bl	8008cf4 <__mcmp>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f8dd c000 	ldr.w	ip, [sp]
 8007fd4:	f340 8154 	ble.w	8008280 <_dtoa_r+0xe38>
 8007fd8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8007fdc:	f000 8111 	beq.w	8008202 <_dtoa_r+0xdba>
 8007fe0:	f10c 0c01 	add.w	ip, ip, #1
 8007fe4:	46b2      	mov	sl, r6
 8007fe6:	f887 c000 	strb.w	ip, [r7]
 8007fea:	1c7d      	adds	r5, r7, #1
 8007fec:	464e      	mov	r6, r9
 8007fee:	e520      	b.n	8007a32 <_dtoa_r+0x5ea>
 8007ff0:	d104      	bne.n	8007ffc <_dtoa_r+0xbb4>
 8007ff2:	f01c 0f01 	tst.w	ip, #1
 8007ff6:	d001      	beq.n	8007ffc <_dtoa_r+0xbb4>
 8007ff8:	e50b      	b.n	8007a12 <_dtoa_r+0x5ca>
 8007ffa:	4615      	mov	r5, r2
 8007ffc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008000:	2b30      	cmp	r3, #48	; 0x30
 8008002:	f105 32ff 	add.w	r2, r5, #4294967295
 8008006:	d0f8      	beq.n	8007ffa <_dtoa_r+0xbb2>
 8008008:	e513      	b.n	8007a32 <_dtoa_r+0x5ea>
 800800a:	f8dd b000 	ldr.w	fp, [sp]
 800800e:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008012:	4644      	mov	r4, r8
 8008014:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008018:	e9cd 2300 	strd	r2, r3, [sp]
 800801c:	f7ff bb27 	b.w	800766e <_dtoa_r+0x226>
 8008020:	9b05      	ldr	r3, [sp, #20]
 8008022:	425d      	negs	r5, r3
 8008024:	2d00      	cmp	r5, #0
 8008026:	f000 80bd 	beq.w	80081a4 <_dtoa_r+0xd5c>
 800802a:	4b86      	ldr	r3, [pc, #536]	; (8008244 <_dtoa_r+0xdfc>)
 800802c:	f005 020f 	and.w	r2, r5, #15
 8008030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800803c:	f7fc fd88 	bl	8004b50 <__aeabi_dmul>
 8008040:	112d      	asrs	r5, r5, #4
 8008042:	e9cd 0100 	strd	r0, r1, [sp]
 8008046:	f000 8127 	beq.w	8008298 <_dtoa_r+0xe50>
 800804a:	4e7f      	ldr	r6, [pc, #508]	; (8008248 <_dtoa_r+0xe00>)
 800804c:	f04f 0802 	mov.w	r8, #2
 8008050:	07eb      	lsls	r3, r5, #31
 8008052:	d505      	bpl.n	8008060 <_dtoa_r+0xc18>
 8008054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008058:	f7fc fd7a 	bl	8004b50 <__aeabi_dmul>
 800805c:	f108 0801 	add.w	r8, r8, #1
 8008060:	106d      	asrs	r5, r5, #1
 8008062:	f106 0608 	add.w	r6, r6, #8
 8008066:	d1f3      	bne.n	8008050 <_dtoa_r+0xc08>
 8008068:	e9cd 0100 	strd	r0, r1, [sp]
 800806c:	e5e8      	b.n	8007c40 <_dtoa_r+0x7f8>
 800806e:	9a05      	ldr	r2, [sp, #20]
 8008070:	3201      	adds	r2, #1
 8008072:	9205      	str	r2, [sp, #20]
 8008074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008076:	2330      	movs	r3, #48	; 0x30
 8008078:	7013      	strb	r3, [r2, #0]
 800807a:	2331      	movs	r3, #49	; 0x31
 800807c:	7013      	strb	r3, [r2, #0]
 800807e:	f7ff bbba 	b.w	80077f6 <_dtoa_r+0x3ae>
 8008082:	6871      	ldr	r1, [r6, #4]
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fc2b 	bl	80088e0 <_Balloc>
 800808a:	6933      	ldr	r3, [r6, #16]
 800808c:	1c9a      	adds	r2, r3, #2
 800808e:	4605      	mov	r5, r0
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	f106 010c 	add.w	r1, r6, #12
 8008096:	300c      	adds	r0, #12
 8008098:	f7fd fad6 	bl	8005648 <memcpy>
 800809c:	4620      	mov	r0, r4
 800809e:	4629      	mov	r1, r5
 80080a0:	2201      	movs	r2, #1
 80080a2:	f000 fdd1 	bl	8008c48 <__lshift>
 80080a6:	4681      	mov	r9, r0
 80080a8:	e4ff      	b.n	8007aaa <_dtoa_r+0x662>
 80080aa:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80080ae:	f000 80a8 	beq.w	8008202 <_dtoa_r+0xdba>
 80080b2:	f10c 0c01 	add.w	ip, ip, #1
 80080b6:	46b2      	mov	sl, r6
 80080b8:	f887 c000 	strb.w	ip, [r7]
 80080bc:	1c7d      	adds	r5, r7, #1
 80080be:	464e      	mov	r6, r9
 80080c0:	e4b7      	b.n	8007a32 <_dtoa_r+0x5ea>
 80080c2:	46b2      	mov	sl, r6
 80080c4:	464e      	mov	r6, r9
 80080c6:	e494      	b.n	80079f2 <_dtoa_r+0x5aa>
 80080c8:	f04f 0800 	mov.w	r8, #0
 80080cc:	4646      	mov	r6, r8
 80080ce:	e715      	b.n	8007efc <_dtoa_r+0xab4>
 80080d0:	495c      	ldr	r1, [pc, #368]	; (8008244 <_dtoa_r+0xdfc>)
 80080d2:	f109 33ff 	add.w	r3, r9, #4294967295
 80080d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080da:	4632      	mov	r2, r6
 80080dc:	9315      	str	r3, [sp, #84]	; 0x54
 80080de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e2:	463b      	mov	r3, r7
 80080e4:	f7fc fd34 	bl	8004b50 <__aeabi_dmul>
 80080e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080ec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80080f0:	4639      	mov	r1, r7
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7fc ff3e 	bl	8004f74 <__aeabi_d2iz>
 80080f8:	4605      	mov	r5, r0
 80080fa:	f7fc fcc3 	bl	8004a84 <__aeabi_i2d>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7fc fb6f 	bl	80047e8 <__aeabi_dsub>
 800810a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800810c:	3530      	adds	r5, #48	; 0x30
 800810e:	f1b9 0f01 	cmp.w	r9, #1
 8008112:	7015      	strb	r5, [r2, #0]
 8008114:	4606      	mov	r6, r0
 8008116:	460f      	mov	r7, r1
 8008118:	f102 0501 	add.w	r5, r2, #1
 800811c:	d023      	beq.n	8008166 <_dtoa_r+0xd1e>
 800811e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008120:	f8cd b000 	str.w	fp, [sp]
 8008124:	444b      	add	r3, r9
 8008126:	4698      	mov	r8, r3
 8008128:	46a9      	mov	r9, r5
 800812a:	46ab      	mov	fp, r5
 800812c:	2200      	movs	r2, #0
 800812e:	4b47      	ldr	r3, [pc, #284]	; (800824c <_dtoa_r+0xe04>)
 8008130:	f7fc fd0e 	bl	8004b50 <__aeabi_dmul>
 8008134:	460f      	mov	r7, r1
 8008136:	4606      	mov	r6, r0
 8008138:	f7fc ff1c 	bl	8004f74 <__aeabi_d2iz>
 800813c:	4605      	mov	r5, r0
 800813e:	f7fc fca1 	bl	8004a84 <__aeabi_i2d>
 8008142:	3530      	adds	r5, #48	; 0x30
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7fc fb4c 	bl	80047e8 <__aeabi_dsub>
 8008150:	f809 5b01 	strb.w	r5, [r9], #1
 8008154:	45c1      	cmp	r9, r8
 8008156:	d1e9      	bne.n	800812c <_dtoa_r+0xce4>
 8008158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800815a:	465d      	mov	r5, fp
 800815c:	f8dd b000 	ldr.w	fp, [sp]
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	441d      	add	r5, r3
 8008166:	2200      	movs	r2, #0
 8008168:	4b39      	ldr	r3, [pc, #228]	; (8008250 <_dtoa_r+0xe08>)
 800816a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800816e:	f7fc fb3d 	bl	80047ec <__adddf3>
 8008172:	4632      	mov	r2, r6
 8008174:	463b      	mov	r3, r7
 8008176:	f7fd fb61 	bl	800583c <__aeabi_dcmplt>
 800817a:	2800      	cmp	r0, #0
 800817c:	d047      	beq.n	800820e <_dtoa_r+0xdc6>
 800817e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008180:	9305      	str	r3, [sp, #20]
 8008182:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8008186:	f7ff bb24 	b.w	80077d2 <_dtoa_r+0x38a>
 800818a:	9b07      	ldr	r3, [sp, #28]
 800818c:	9a08      	ldr	r2, [sp, #32]
 800818e:	1a9d      	subs	r5, r3, r2
 8008190:	2300      	movs	r3, #0
 8008192:	f7ff bb58 	b.w	8007846 <_dtoa_r+0x3fe>
 8008196:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008198:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800819a:	9d07      	ldr	r5, [sp, #28]
 800819c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081a0:	f7ff bb51 	b.w	8007846 <_dtoa_r+0x3fe>
 80081a4:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80081a8:	f04f 0802 	mov.w	r8, #2
 80081ac:	ed8d 7b00 	vstr	d7, [sp]
 80081b0:	e546      	b.n	8007c40 <_dtoa_r+0x7f8>
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f43f aeb4 	beq.w	8007f22 <_dtoa_r+0xada>
 80081ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80081bc:	2d00      	cmp	r5, #0
 80081be:	f77f af29 	ble.w	8008014 <_dtoa_r+0xbcc>
 80081c2:	2200      	movs	r2, #0
 80081c4:	4b21      	ldr	r3, [pc, #132]	; (800824c <_dtoa_r+0xe04>)
 80081c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081ca:	f7fc fcc1 	bl	8004b50 <__aeabi_dmul>
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	f108 0001 	add.w	r0, r8, #1
 80081d6:	e9cd 6700 	strd	r6, r7, [sp]
 80081da:	f7fc fc53 	bl	8004a84 <__aeabi_i2d>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4630      	mov	r0, r6
 80081e4:	4639      	mov	r1, r7
 80081e6:	f7fc fcb3 	bl	8004b50 <__aeabi_dmul>
 80081ea:	4b14      	ldr	r3, [pc, #80]	; (800823c <_dtoa_r+0xdf4>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	f7fc fafd 	bl	80047ec <__adddf3>
 80081f2:	9b05      	ldr	r3, [sp, #20]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	4606      	mov	r6, r0
 80081f8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80081fc:	9314      	str	r3, [sp, #80]	; 0x50
 80081fe:	46a9      	mov	r9, r5
 8008200:	e53f      	b.n	8007c82 <_dtoa_r+0x83a>
 8008202:	2239      	movs	r2, #57	; 0x39
 8008204:	46b2      	mov	sl, r6
 8008206:	703a      	strb	r2, [r7, #0]
 8008208:	464e      	mov	r6, r9
 800820a:	1c7d      	adds	r5, r7, #1
 800820c:	e403      	b.n	8007a16 <_dtoa_r+0x5ce>
 800820e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008212:	2000      	movs	r0, #0
 8008214:	490e      	ldr	r1, [pc, #56]	; (8008250 <_dtoa_r+0xe08>)
 8008216:	f7fc fae7 	bl	80047e8 <__aeabi_dsub>
 800821a:	4632      	mov	r2, r6
 800821c:	463b      	mov	r3, r7
 800821e:	f7fd fb2b 	bl	8005878 <__aeabi_dcmpgt>
 8008222:	b908      	cbnz	r0, 8008228 <_dtoa_r+0xde0>
 8008224:	e6f6      	b.n	8008014 <_dtoa_r+0xbcc>
 8008226:	4615      	mov	r5, r2
 8008228:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	f105 32ff 	add.w	r2, r5, #4294967295
 8008232:	d0f8      	beq.n	8008226 <_dtoa_r+0xdde>
 8008234:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	f7ff badd 	b.w	80077f6 <_dtoa_r+0x3ae>
 800823c:	401c0000 	.word	0x401c0000
 8008240:	40140000 	.word	0x40140000
 8008244:	0800a0a8 	.word	0x0800a0a8
 8008248:	0800a180 	.word	0x0800a180
 800824c:	40240000 	.word	0x40240000
 8008250:	3fe00000 	.word	0x3fe00000
 8008254:	4643      	mov	r3, r8
 8008256:	f8dd b000 	ldr.w	fp, [sp]
 800825a:	46a0      	mov	r8, r4
 800825c:	461c      	mov	r4, r3
 800825e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008260:	9305      	str	r3, [sp, #20]
 8008262:	f7ff bab6 	b.w	80077d2 <_dtoa_r+0x38a>
 8008266:	46b9      	mov	r9, r7
 8008268:	f7ff bb6b 	b.w	8007942 <_dtoa_r+0x4fa>
 800826c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008270:	d0c7      	beq.n	8008202 <_dtoa_r+0xdba>
 8008272:	f1ba 0f00 	cmp.w	sl, #0
 8008276:	f77f aeb5 	ble.w	8007fe4 <_dtoa_r+0xb9c>
 800827a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800827e:	e6b1      	b.n	8007fe4 <_dtoa_r+0xb9c>
 8008280:	f47f aeb0 	bne.w	8007fe4 <_dtoa_r+0xb9c>
 8008284:	f01c 0f01 	tst.w	ip, #1
 8008288:	f43f aeac 	beq.w	8007fe4 <_dtoa_r+0xb9c>
 800828c:	e6a4      	b.n	8007fd8 <_dtoa_r+0xb90>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	2b02      	cmp	r3, #2
 8008292:	dc04      	bgt.n	800829e <_dtoa_r+0xe56>
 8008294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008296:	e605      	b.n	8007ea4 <_dtoa_r+0xa5c>
 8008298:	f04f 0802 	mov.w	r8, #2
 800829c:	e4d0      	b.n	8007c40 <_dtoa_r+0x7f8>
 800829e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a0:	9308      	str	r3, [sp, #32]
 80082a2:	e61b      	b.n	8007edc <_dtoa_r+0xa94>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	dcf9      	bgt.n	800829e <_dtoa_r+0xe56>
 80082aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ac:	f7ff bbef 	b.w	8007a8e <_dtoa_r+0x646>
 80082b0:	2500      	movs	r5, #0
 80082b2:	6465      	str	r5, [r4, #68]	; 0x44
 80082b4:	4629      	mov	r1, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fb12 	bl	80088e0 <_Balloc>
 80082bc:	f04f 33ff 	mov.w	r3, #4294967295
 80082c0:	9308      	str	r3, [sp, #32]
 80082c2:	930e      	str	r3, [sp, #56]	; 0x38
 80082c4:	2301      	movs	r3, #1
 80082c6:	9009      	str	r0, [sp, #36]	; 0x24
 80082c8:	46aa      	mov	sl, r5
 80082ca:	6420      	str	r0, [r4, #64]	; 0x40
 80082cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ce:	f7ff b9ce 	b.w	800766e <_dtoa_r+0x226>
 80082d2:	f43f ab4e 	beq.w	8007972 <_dtoa_r+0x52a>
 80082d6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80082da:	f7ff bb43 	b.w	8007964 <_dtoa_r+0x51c>
 80082de:	2301      	movs	r3, #1
 80082e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80082e2:	e55c      	b.n	8007d9e <_dtoa_r+0x956>
 80082e4:	2701      	movs	r7, #1
 80082e6:	f7ff b98d 	b.w	8007604 <_dtoa_r+0x1bc>
 80082ea:	bf00      	nop

080082ec <__libc_fini_array>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <__libc_fini_array+0x24>)
 80082f0:	4d08      	ldr	r5, [pc, #32]	; (8008314 <__libc_fini_array+0x28>)
 80082f2:	1aed      	subs	r5, r5, r3
 80082f4:	10ac      	asrs	r4, r5, #2
 80082f6:	bf18      	it	ne
 80082f8:	18ed      	addne	r5, r5, r3
 80082fa:	d005      	beq.n	8008308 <__libc_fini_array+0x1c>
 80082fc:	3c01      	subs	r4, #1
 80082fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008302:	4798      	blx	r3
 8008304:	2c00      	cmp	r4, #0
 8008306:	d1f9      	bne.n	80082fc <__libc_fini_array+0x10>
 8008308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830c:	f001 bf52 	b.w	800a1b4 <_fini>
 8008310:	0800a1d0 	.word	0x0800a1d0
 8008314:	0800a1d4 	.word	0x0800a1d4

08008318 <_localeconv_r>:
 8008318:	4800      	ldr	r0, [pc, #0]	; (800831c <_localeconv_r+0x4>)
 800831a:	4770      	bx	lr
 800831c:	2000054c 	.word	0x2000054c

08008320 <_malloc_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	f101 050b 	add.w	r5, r1, #11
 8008328:	2d16      	cmp	r5, #22
 800832a:	b083      	sub	sp, #12
 800832c:	4606      	mov	r6, r0
 800832e:	d927      	bls.n	8008380 <_malloc_r+0x60>
 8008330:	f035 0507 	bics.w	r5, r5, #7
 8008334:	f100 80b6 	bmi.w	80084a4 <_malloc_r+0x184>
 8008338:	42a9      	cmp	r1, r5
 800833a:	f200 80b3 	bhi.w	80084a4 <_malloc_r+0x184>
 800833e:	f000 facb 	bl	80088d8 <__malloc_lock>
 8008342:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008346:	d222      	bcs.n	800838e <_malloc_r+0x6e>
 8008348:	4fc2      	ldr	r7, [pc, #776]	; (8008654 <_malloc_r+0x334>)
 800834a:	08e8      	lsrs	r0, r5, #3
 800834c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8008350:	68dc      	ldr	r4, [r3, #12]
 8008352:	429c      	cmp	r4, r3
 8008354:	f000 81c8 	beq.w	80086e8 <_malloc_r+0x3c8>
 8008358:	6863      	ldr	r3, [r4, #4]
 800835a:	68e1      	ldr	r1, [r4, #12]
 800835c:	68a5      	ldr	r5, [r4, #8]
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	4423      	add	r3, r4
 8008364:	4630      	mov	r0, r6
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	60e9      	str	r1, [r5, #12]
 800836a:	f042 0201 	orr.w	r2, r2, #1
 800836e:	608d      	str	r5, [r1, #8]
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	f000 fab3 	bl	80088dc <__malloc_unlock>
 8008376:	3408      	adds	r4, #8
 8008378:	4620      	mov	r0, r4
 800837a:	b003      	add	sp, #12
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	2910      	cmp	r1, #16
 8008382:	f200 808f 	bhi.w	80084a4 <_malloc_r+0x184>
 8008386:	f000 faa7 	bl	80088d8 <__malloc_lock>
 800838a:	2510      	movs	r5, #16
 800838c:	e7dc      	b.n	8008348 <_malloc_r+0x28>
 800838e:	0a68      	lsrs	r0, r5, #9
 8008390:	f000 808f 	beq.w	80084b2 <_malloc_r+0x192>
 8008394:	2804      	cmp	r0, #4
 8008396:	f200 8154 	bhi.w	8008642 <_malloc_r+0x322>
 800839a:	09a8      	lsrs	r0, r5, #6
 800839c:	3038      	adds	r0, #56	; 0x38
 800839e:	0041      	lsls	r1, r0, #1
 80083a0:	4fac      	ldr	r7, [pc, #688]	; (8008654 <_malloc_r+0x334>)
 80083a2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80083a6:	68cc      	ldr	r4, [r1, #12]
 80083a8:	42a1      	cmp	r1, r4
 80083aa:	d106      	bne.n	80083ba <_malloc_r+0x9a>
 80083ac:	e00c      	b.n	80083c8 <_malloc_r+0xa8>
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	f280 8082 	bge.w	80084b8 <_malloc_r+0x198>
 80083b4:	68e4      	ldr	r4, [r4, #12]
 80083b6:	42a1      	cmp	r1, r4
 80083b8:	d006      	beq.n	80083c8 <_malloc_r+0xa8>
 80083ba:	6863      	ldr	r3, [r4, #4]
 80083bc:	f023 0303 	bic.w	r3, r3, #3
 80083c0:	1b5a      	subs	r2, r3, r5
 80083c2:	2a0f      	cmp	r2, #15
 80083c4:	ddf3      	ble.n	80083ae <_malloc_r+0x8e>
 80083c6:	3801      	subs	r0, #1
 80083c8:	3001      	adds	r0, #1
 80083ca:	49a2      	ldr	r1, [pc, #648]	; (8008654 <_malloc_r+0x334>)
 80083cc:	693c      	ldr	r4, [r7, #16]
 80083ce:	f101 0e08 	add.w	lr, r1, #8
 80083d2:	4574      	cmp	r4, lr
 80083d4:	f000 817d 	beq.w	80086d2 <_malloc_r+0x3b2>
 80083d8:	6863      	ldr	r3, [r4, #4]
 80083da:	f023 0303 	bic.w	r3, r3, #3
 80083de:	1b5a      	subs	r2, r3, r5
 80083e0:	2a0f      	cmp	r2, #15
 80083e2:	f300 8163 	bgt.w	80086ac <_malloc_r+0x38c>
 80083e6:	2a00      	cmp	r2, #0
 80083e8:	f8c1 e014 	str.w	lr, [r1, #20]
 80083ec:	f8c1 e010 	str.w	lr, [r1, #16]
 80083f0:	da73      	bge.n	80084da <_malloc_r+0x1ba>
 80083f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f6:	f080 8139 	bcs.w	800866c <_malloc_r+0x34c>
 80083fa:	08db      	lsrs	r3, r3, #3
 80083fc:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8008400:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8008404:	684a      	ldr	r2, [r1, #4]
 8008406:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800840a:	f8c4 9008 	str.w	r9, [r4, #8]
 800840e:	2301      	movs	r3, #1
 8008410:	fa03 f30c 	lsl.w	r3, r3, ip
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c4 800c 	str.w	r8, [r4, #12]
 800841a:	604b      	str	r3, [r1, #4]
 800841c:	f8c8 4008 	str.w	r4, [r8, #8]
 8008420:	f8c9 400c 	str.w	r4, [r9, #12]
 8008424:	1082      	asrs	r2, r0, #2
 8008426:	2401      	movs	r4, #1
 8008428:	4094      	lsls	r4, r2
 800842a:	429c      	cmp	r4, r3
 800842c:	d862      	bhi.n	80084f4 <_malloc_r+0x1d4>
 800842e:	4223      	tst	r3, r4
 8008430:	d106      	bne.n	8008440 <_malloc_r+0x120>
 8008432:	f020 0003 	bic.w	r0, r0, #3
 8008436:	0064      	lsls	r4, r4, #1
 8008438:	4223      	tst	r3, r4
 800843a:	f100 0004 	add.w	r0, r0, #4
 800843e:	d0fa      	beq.n	8008436 <_malloc_r+0x116>
 8008440:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8008444:	46c4      	mov	ip, r8
 8008446:	4681      	mov	r9, r0
 8008448:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800844c:	459c      	cmp	ip, r3
 800844e:	d107      	bne.n	8008460 <_malloc_r+0x140>
 8008450:	e141      	b.n	80086d6 <_malloc_r+0x3b6>
 8008452:	2900      	cmp	r1, #0
 8008454:	f280 8151 	bge.w	80086fa <_malloc_r+0x3da>
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	459c      	cmp	ip, r3
 800845c:	f000 813b 	beq.w	80086d6 <_malloc_r+0x3b6>
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	f022 0203 	bic.w	r2, r2, #3
 8008466:	1b51      	subs	r1, r2, r5
 8008468:	290f      	cmp	r1, #15
 800846a:	ddf2      	ble.n	8008452 <_malloc_r+0x132>
 800846c:	461c      	mov	r4, r3
 800846e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008472:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008476:	195a      	adds	r2, r3, r5
 8008478:	f045 0901 	orr.w	r9, r5, #1
 800847c:	f041 0501 	orr.w	r5, r1, #1
 8008480:	f8c3 9004 	str.w	r9, [r3, #4]
 8008484:	4630      	mov	r0, r6
 8008486:	f8c8 c00c 	str.w	ip, [r8, #12]
 800848a:	f8cc 8008 	str.w	r8, [ip, #8]
 800848e:	617a      	str	r2, [r7, #20]
 8008490:	613a      	str	r2, [r7, #16]
 8008492:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008496:	f8c2 e008 	str.w	lr, [r2, #8]
 800849a:	6055      	str	r5, [r2, #4]
 800849c:	5051      	str	r1, [r2, r1]
 800849e:	f000 fa1d 	bl	80088dc <__malloc_unlock>
 80084a2:	e769      	b.n	8008378 <_malloc_r+0x58>
 80084a4:	2400      	movs	r4, #0
 80084a6:	230c      	movs	r3, #12
 80084a8:	4620      	mov	r0, r4
 80084aa:	6033      	str	r3, [r6, #0]
 80084ac:	b003      	add	sp, #12
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	217e      	movs	r1, #126	; 0x7e
 80084b4:	203f      	movs	r0, #63	; 0x3f
 80084b6:	e773      	b.n	80083a0 <_malloc_r+0x80>
 80084b8:	4423      	add	r3, r4
 80084ba:	68e1      	ldr	r1, [r4, #12]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68a5      	ldr	r5, [r4, #8]
 80084c0:	f042 0201 	orr.w	r2, r2, #1
 80084c4:	60e9      	str	r1, [r5, #12]
 80084c6:	4630      	mov	r0, r6
 80084c8:	608d      	str	r5, [r1, #8]
 80084ca:	605a      	str	r2, [r3, #4]
 80084cc:	f000 fa06 	bl	80088dc <__malloc_unlock>
 80084d0:	3408      	adds	r4, #8
 80084d2:	4620      	mov	r0, r4
 80084d4:	b003      	add	sp, #12
 80084d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084da:	4423      	add	r3, r4
 80084dc:	4630      	mov	r0, r6
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	f042 0201 	orr.w	r2, r2, #1
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	f000 f9f9 	bl	80088dc <__malloc_unlock>
 80084ea:	3408      	adds	r4, #8
 80084ec:	4620      	mov	r0, r4
 80084ee:	b003      	add	sp, #12
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	68bc      	ldr	r4, [r7, #8]
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	f023 0803 	bic.w	r8, r3, #3
 80084fc:	4545      	cmp	r5, r8
 80084fe:	d804      	bhi.n	800850a <_malloc_r+0x1ea>
 8008500:	ebc5 0308 	rsb	r3, r5, r8
 8008504:	2b0f      	cmp	r3, #15
 8008506:	f300 808c 	bgt.w	8008622 <_malloc_r+0x302>
 800850a:	4b53      	ldr	r3, [pc, #332]	; (8008658 <_malloc_r+0x338>)
 800850c:	f8df a158 	ldr.w	sl, [pc, #344]	; 8008668 <_malloc_r+0x348>
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	f8da 3000 	ldr.w	r3, [sl]
 8008516:	3301      	adds	r3, #1
 8008518:	442a      	add	r2, r5
 800851a:	eb04 0b08 	add.w	fp, r4, r8
 800851e:	f000 8150 	beq.w	80087c2 <_malloc_r+0x4a2>
 8008522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008526:	320f      	adds	r2, #15
 8008528:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800852c:	f022 020f 	bic.w	r2, r2, #15
 8008530:	4611      	mov	r1, r2
 8008532:	4630      	mov	r0, r6
 8008534:	9201      	str	r2, [sp, #4]
 8008536:	f000 fcf7 	bl	8008f28 <_sbrk_r>
 800853a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800853e:	4681      	mov	r9, r0
 8008540:	9a01      	ldr	r2, [sp, #4]
 8008542:	f000 8147 	beq.w	80087d4 <_malloc_r+0x4b4>
 8008546:	4583      	cmp	fp, r0
 8008548:	f200 80ee 	bhi.w	8008728 <_malloc_r+0x408>
 800854c:	4b43      	ldr	r3, [pc, #268]	; (800865c <_malloc_r+0x33c>)
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	45cb      	cmp	fp, r9
 8008552:	4411      	add	r1, r2
 8008554:	6019      	str	r1, [r3, #0]
 8008556:	f000 8142 	beq.w	80087de <_malloc_r+0x4be>
 800855a:	f8da 0000 	ldr.w	r0, [sl]
 800855e:	f8df e108 	ldr.w	lr, [pc, #264]	; 8008668 <_malloc_r+0x348>
 8008562:	3001      	adds	r0, #1
 8008564:	bf1b      	ittet	ne
 8008566:	ebcb 0b09 	rsbne	fp, fp, r9
 800856a:	4459      	addne	r1, fp
 800856c:	f8ce 9000 	streq.w	r9, [lr]
 8008570:	6019      	strne	r1, [r3, #0]
 8008572:	f019 0107 	ands.w	r1, r9, #7
 8008576:	f000 8107 	beq.w	8008788 <_malloc_r+0x468>
 800857a:	f1c1 0008 	rsb	r0, r1, #8
 800857e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8008582:	4481      	add	r9, r0
 8008584:	3108      	adds	r1, #8
 8008586:	444a      	add	r2, r9
 8008588:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800858c:	ebc2 0a01 	rsb	sl, r2, r1
 8008590:	4651      	mov	r1, sl
 8008592:	4630      	mov	r0, r6
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	f000 fcc7 	bl	8008f28 <_sbrk_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	f000 812c 	beq.w	80087fa <_malloc_r+0x4da>
 80085a2:	ebc9 0200 	rsb	r2, r9, r0
 80085a6:	4452      	add	r2, sl
 80085a8:	f042 0201 	orr.w	r2, r2, #1
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	f8c7 9008 	str.w	r9, [r7, #8]
 80085b2:	4451      	add	r1, sl
 80085b4:	42bc      	cmp	r4, r7
 80085b6:	f8c9 2004 	str.w	r2, [r9, #4]
 80085ba:	6019      	str	r1, [r3, #0]
 80085bc:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800865c <_malloc_r+0x33c>
 80085c0:	d016      	beq.n	80085f0 <_malloc_r+0x2d0>
 80085c2:	f1b8 0f0f 	cmp.w	r8, #15
 80085c6:	f240 80ee 	bls.w	80087a6 <_malloc_r+0x486>
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	f1a8 030c 	sub.w	r3, r8, #12
 80085d0:	f023 0307 	bic.w	r3, r3, #7
 80085d4:	18e0      	adds	r0, r4, r3
 80085d6:	f002 0201 	and.w	r2, r2, #1
 80085da:	f04f 0e05 	mov.w	lr, #5
 80085de:	431a      	orrs	r2, r3
 80085e0:	2b0f      	cmp	r3, #15
 80085e2:	6062      	str	r2, [r4, #4]
 80085e4:	f8c0 e004 	str.w	lr, [r0, #4]
 80085e8:	f8c0 e008 	str.w	lr, [r0, #8]
 80085ec:	f200 8109 	bhi.w	8008802 <_malloc_r+0x4e2>
 80085f0:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <_malloc_r+0x340>)
 80085f2:	68bc      	ldr	r4, [r7, #8]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	4291      	cmp	r1, r2
 80085f8:	bf88      	it	hi
 80085fa:	6019      	strhi	r1, [r3, #0]
 80085fc:	4b19      	ldr	r3, [pc, #100]	; (8008664 <_malloc_r+0x344>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	4291      	cmp	r1, r2
 8008602:	6862      	ldr	r2, [r4, #4]
 8008604:	bf88      	it	hi
 8008606:	6019      	strhi	r1, [r3, #0]
 8008608:	f022 0203 	bic.w	r2, r2, #3
 800860c:	4295      	cmp	r5, r2
 800860e:	eba2 0305 	sub.w	r3, r2, r5
 8008612:	d801      	bhi.n	8008618 <_malloc_r+0x2f8>
 8008614:	2b0f      	cmp	r3, #15
 8008616:	dc04      	bgt.n	8008622 <_malloc_r+0x302>
 8008618:	4630      	mov	r0, r6
 800861a:	f000 f95f 	bl	80088dc <__malloc_unlock>
 800861e:	2400      	movs	r4, #0
 8008620:	e6aa      	b.n	8008378 <_malloc_r+0x58>
 8008622:	1962      	adds	r2, r4, r5
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	f045 0501 	orr.w	r5, r5, #1
 800862c:	6065      	str	r5, [r4, #4]
 800862e:	4630      	mov	r0, r6
 8008630:	60ba      	str	r2, [r7, #8]
 8008632:	6053      	str	r3, [r2, #4]
 8008634:	f000 f952 	bl	80088dc <__malloc_unlock>
 8008638:	3408      	adds	r4, #8
 800863a:	4620      	mov	r0, r4
 800863c:	b003      	add	sp, #12
 800863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008642:	2814      	cmp	r0, #20
 8008644:	d968      	bls.n	8008718 <_malloc_r+0x3f8>
 8008646:	2854      	cmp	r0, #84	; 0x54
 8008648:	f200 8097 	bhi.w	800877a <_malloc_r+0x45a>
 800864c:	0b28      	lsrs	r0, r5, #12
 800864e:	306e      	adds	r0, #110	; 0x6e
 8008650:	0041      	lsls	r1, r0, #1
 8008652:	e6a5      	b.n	80083a0 <_malloc_r+0x80>
 8008654:	20000584 	.word	0x20000584
 8008658:	20000bd8 	.word	0x20000bd8
 800865c:	20000bdc 	.word	0x20000bdc
 8008660:	20000bd4 	.word	0x20000bd4
 8008664:	20000bd0 	.word	0x20000bd0
 8008668:	20000990 	.word	0x20000990
 800866c:	0a5a      	lsrs	r2, r3, #9
 800866e:	2a04      	cmp	r2, #4
 8008670:	d955      	bls.n	800871e <_malloc_r+0x3fe>
 8008672:	2a14      	cmp	r2, #20
 8008674:	f200 80a7 	bhi.w	80087c6 <_malloc_r+0x4a6>
 8008678:	325b      	adds	r2, #91	; 0x5b
 800867a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800867e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8008682:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008840 <_malloc_r+0x520>
 8008686:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800868a:	4561      	cmp	r1, ip
 800868c:	d07f      	beq.n	800878e <_malloc_r+0x46e>
 800868e:	684a      	ldr	r2, [r1, #4]
 8008690:	f022 0203 	bic.w	r2, r2, #3
 8008694:	4293      	cmp	r3, r2
 8008696:	d202      	bcs.n	800869e <_malloc_r+0x37e>
 8008698:	6889      	ldr	r1, [r1, #8]
 800869a:	458c      	cmp	ip, r1
 800869c:	d1f7      	bne.n	800868e <_malloc_r+0x36e>
 800869e:	68ca      	ldr	r2, [r1, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60e2      	str	r2, [r4, #12]
 80086a4:	60a1      	str	r1, [r4, #8]
 80086a6:	6094      	str	r4, [r2, #8]
 80086a8:	60cc      	str	r4, [r1, #12]
 80086aa:	e6bb      	b.n	8008424 <_malloc_r+0x104>
 80086ac:	1963      	adds	r3, r4, r5
 80086ae:	f042 0701 	orr.w	r7, r2, #1
 80086b2:	f045 0501 	orr.w	r5, r5, #1
 80086b6:	6065      	str	r5, [r4, #4]
 80086b8:	4630      	mov	r0, r6
 80086ba:	614b      	str	r3, [r1, #20]
 80086bc:	610b      	str	r3, [r1, #16]
 80086be:	f8c3 e00c 	str.w	lr, [r3, #12]
 80086c2:	f8c3 e008 	str.w	lr, [r3, #8]
 80086c6:	605f      	str	r7, [r3, #4]
 80086c8:	509a      	str	r2, [r3, r2]
 80086ca:	3408      	adds	r4, #8
 80086cc:	f000 f906 	bl	80088dc <__malloc_unlock>
 80086d0:	e652      	b.n	8008378 <_malloc_r+0x58>
 80086d2:	684b      	ldr	r3, [r1, #4]
 80086d4:	e6a6      	b.n	8008424 <_malloc_r+0x104>
 80086d6:	f109 0901 	add.w	r9, r9, #1
 80086da:	f019 0f03 	tst.w	r9, #3
 80086de:	f10c 0c08 	add.w	ip, ip, #8
 80086e2:	f47f aeb1 	bne.w	8008448 <_malloc_r+0x128>
 80086e6:	e02c      	b.n	8008742 <_malloc_r+0x422>
 80086e8:	f104 0308 	add.w	r3, r4, #8
 80086ec:	6964      	ldr	r4, [r4, #20]
 80086ee:	42a3      	cmp	r3, r4
 80086f0:	bf08      	it	eq
 80086f2:	3002      	addeq	r0, #2
 80086f4:	f43f ae69 	beq.w	80083ca <_malloc_r+0xaa>
 80086f8:	e62e      	b.n	8008358 <_malloc_r+0x38>
 80086fa:	441a      	add	r2, r3
 80086fc:	461c      	mov	r4, r3
 80086fe:	6851      	ldr	r1, [r2, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008706:	f041 0101 	orr.w	r1, r1, #1
 800870a:	6051      	str	r1, [r2, #4]
 800870c:	4630      	mov	r0, r6
 800870e:	60eb      	str	r3, [r5, #12]
 8008710:	609d      	str	r5, [r3, #8]
 8008712:	f000 f8e3 	bl	80088dc <__malloc_unlock>
 8008716:	e62f      	b.n	8008378 <_malloc_r+0x58>
 8008718:	305b      	adds	r0, #91	; 0x5b
 800871a:	0041      	lsls	r1, r0, #1
 800871c:	e640      	b.n	80083a0 <_malloc_r+0x80>
 800871e:	099a      	lsrs	r2, r3, #6
 8008720:	3238      	adds	r2, #56	; 0x38
 8008722:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008726:	e7aa      	b.n	800867e <_malloc_r+0x35e>
 8008728:	42bc      	cmp	r4, r7
 800872a:	4b45      	ldr	r3, [pc, #276]	; (8008840 <_malloc_r+0x520>)
 800872c:	f43f af0e 	beq.w	800854c <_malloc_r+0x22c>
 8008730:	689c      	ldr	r4, [r3, #8]
 8008732:	6862      	ldr	r2, [r4, #4]
 8008734:	f022 0203 	bic.w	r2, r2, #3
 8008738:	e768      	b.n	800860c <_malloc_r+0x2ec>
 800873a:	f8d8 8000 	ldr.w	r8, [r8]
 800873e:	4598      	cmp	r8, r3
 8008740:	d17c      	bne.n	800883c <_malloc_r+0x51c>
 8008742:	f010 0f03 	tst.w	r0, #3
 8008746:	f1a8 0308 	sub.w	r3, r8, #8
 800874a:	f100 30ff 	add.w	r0, r0, #4294967295
 800874e:	d1f4      	bne.n	800873a <_malloc_r+0x41a>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	ea23 0304 	bic.w	r3, r3, r4
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	0064      	lsls	r4, r4, #1
 800875a:	429c      	cmp	r4, r3
 800875c:	f63f aeca 	bhi.w	80084f4 <_malloc_r+0x1d4>
 8008760:	2c00      	cmp	r4, #0
 8008762:	f43f aec7 	beq.w	80084f4 <_malloc_r+0x1d4>
 8008766:	4223      	tst	r3, r4
 8008768:	4648      	mov	r0, r9
 800876a:	f47f ae69 	bne.w	8008440 <_malloc_r+0x120>
 800876e:	0064      	lsls	r4, r4, #1
 8008770:	4223      	tst	r3, r4
 8008772:	f100 0004 	add.w	r0, r0, #4
 8008776:	d0fa      	beq.n	800876e <_malloc_r+0x44e>
 8008778:	e662      	b.n	8008440 <_malloc_r+0x120>
 800877a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800877e:	d818      	bhi.n	80087b2 <_malloc_r+0x492>
 8008780:	0be8      	lsrs	r0, r5, #15
 8008782:	3077      	adds	r0, #119	; 0x77
 8008784:	0041      	lsls	r1, r0, #1
 8008786:	e60b      	b.n	80083a0 <_malloc_r+0x80>
 8008788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800878c:	e6fb      	b.n	8008586 <_malloc_r+0x266>
 800878e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008792:	1092      	asrs	r2, r2, #2
 8008794:	f04f 0c01 	mov.w	ip, #1
 8008798:	fa0c f202 	lsl.w	r2, ip, r2
 800879c:	4313      	orrs	r3, r2
 800879e:	f8c8 3004 	str.w	r3, [r8, #4]
 80087a2:	460a      	mov	r2, r1
 80087a4:	e77d      	b.n	80086a2 <_malloc_r+0x382>
 80087a6:	2301      	movs	r3, #1
 80087a8:	f8c9 3004 	str.w	r3, [r9, #4]
 80087ac:	464c      	mov	r4, r9
 80087ae:	2200      	movs	r2, #0
 80087b0:	e72c      	b.n	800860c <_malloc_r+0x2ec>
 80087b2:	f240 5354 	movw	r3, #1364	; 0x554
 80087b6:	4298      	cmp	r0, r3
 80087b8:	d81c      	bhi.n	80087f4 <_malloc_r+0x4d4>
 80087ba:	0ca8      	lsrs	r0, r5, #18
 80087bc:	307c      	adds	r0, #124	; 0x7c
 80087be:	0041      	lsls	r1, r0, #1
 80087c0:	e5ee      	b.n	80083a0 <_malloc_r+0x80>
 80087c2:	3210      	adds	r2, #16
 80087c4:	e6b4      	b.n	8008530 <_malloc_r+0x210>
 80087c6:	2a54      	cmp	r2, #84	; 0x54
 80087c8:	d823      	bhi.n	8008812 <_malloc_r+0x4f2>
 80087ca:	0b1a      	lsrs	r2, r3, #12
 80087cc:	326e      	adds	r2, #110	; 0x6e
 80087ce:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80087d2:	e754      	b.n	800867e <_malloc_r+0x35e>
 80087d4:	68bc      	ldr	r4, [r7, #8]
 80087d6:	6862      	ldr	r2, [r4, #4]
 80087d8:	f022 0203 	bic.w	r2, r2, #3
 80087dc:	e716      	b.n	800860c <_malloc_r+0x2ec>
 80087de:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f47f aeb9 	bne.w	800855a <_malloc_r+0x23a>
 80087e8:	4442      	add	r2, r8
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f042 0201 	orr.w	r2, r2, #1
 80087f0:	605a      	str	r2, [r3, #4]
 80087f2:	e6fd      	b.n	80085f0 <_malloc_r+0x2d0>
 80087f4:	21fc      	movs	r1, #252	; 0xfc
 80087f6:	207e      	movs	r0, #126	; 0x7e
 80087f8:	e5d2      	b.n	80083a0 <_malloc_r+0x80>
 80087fa:	2201      	movs	r2, #1
 80087fc:	f04f 0a00 	mov.w	sl, #0
 8008800:	e6d4      	b.n	80085ac <_malloc_r+0x28c>
 8008802:	f104 0108 	add.w	r1, r4, #8
 8008806:	4630      	mov	r0, r6
 8008808:	f000 fd20 	bl	800924c <_free_r>
 800880c:	f8da 1000 	ldr.w	r1, [sl]
 8008810:	e6ee      	b.n	80085f0 <_malloc_r+0x2d0>
 8008812:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008816:	d804      	bhi.n	8008822 <_malloc_r+0x502>
 8008818:	0bda      	lsrs	r2, r3, #15
 800881a:	3277      	adds	r2, #119	; 0x77
 800881c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008820:	e72d      	b.n	800867e <_malloc_r+0x35e>
 8008822:	f240 5154 	movw	r1, #1364	; 0x554
 8008826:	428a      	cmp	r2, r1
 8008828:	d804      	bhi.n	8008834 <_malloc_r+0x514>
 800882a:	0c9a      	lsrs	r2, r3, #18
 800882c:	327c      	adds	r2, #124	; 0x7c
 800882e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008832:	e724      	b.n	800867e <_malloc_r+0x35e>
 8008834:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8008838:	227e      	movs	r2, #126	; 0x7e
 800883a:	e720      	b.n	800867e <_malloc_r+0x35e>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	e78b      	b.n	8008758 <_malloc_r+0x438>
 8008840:	20000584 	.word	0x20000584

08008844 <memchr>:
 8008844:	0783      	lsls	r3, r0, #30
 8008846:	b470      	push	{r4, r5, r6}
 8008848:	b2c9      	uxtb	r1, r1
 800884a:	d040      	beq.n	80088ce <memchr+0x8a>
 800884c:	1e54      	subs	r4, r2, #1
 800884e:	2a00      	cmp	r2, #0
 8008850:	d03f      	beq.n	80088d2 <memchr+0x8e>
 8008852:	7803      	ldrb	r3, [r0, #0]
 8008854:	428b      	cmp	r3, r1
 8008856:	bf18      	it	ne
 8008858:	1c43      	addne	r3, r0, #1
 800885a:	d106      	bne.n	800886a <memchr+0x26>
 800885c:	e01d      	b.n	800889a <memchr+0x56>
 800885e:	b1f4      	cbz	r4, 800889e <memchr+0x5a>
 8008860:	7802      	ldrb	r2, [r0, #0]
 8008862:	428a      	cmp	r2, r1
 8008864:	f104 34ff 	add.w	r4, r4, #4294967295
 8008868:	d017      	beq.n	800889a <memchr+0x56>
 800886a:	f013 0f03 	tst.w	r3, #3
 800886e:	4618      	mov	r0, r3
 8008870:	f103 0301 	add.w	r3, r3, #1
 8008874:	d1f3      	bne.n	800885e <memchr+0x1a>
 8008876:	2c03      	cmp	r4, #3
 8008878:	d814      	bhi.n	80088a4 <memchr+0x60>
 800887a:	b184      	cbz	r4, 800889e <memchr+0x5a>
 800887c:	7803      	ldrb	r3, [r0, #0]
 800887e:	428b      	cmp	r3, r1
 8008880:	d00b      	beq.n	800889a <memchr+0x56>
 8008882:	1905      	adds	r5, r0, r4
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	e002      	b.n	800888e <memchr+0x4a>
 8008888:	7802      	ldrb	r2, [r0, #0]
 800888a:	428a      	cmp	r2, r1
 800888c:	d005      	beq.n	800889a <memchr+0x56>
 800888e:	42ab      	cmp	r3, r5
 8008890:	4618      	mov	r0, r3
 8008892:	f103 0301 	add.w	r3, r3, #1
 8008896:	d1f7      	bne.n	8008888 <memchr+0x44>
 8008898:	2000      	movs	r0, #0
 800889a:	bc70      	pop	{r4, r5, r6}
 800889c:	4770      	bx	lr
 800889e:	4620      	mov	r0, r4
 80088a0:	bc70      	pop	{r4, r5, r6}
 80088a2:	4770      	bx	lr
 80088a4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80088a8:	4602      	mov	r2, r0
 80088aa:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80088ae:	4610      	mov	r0, r2
 80088b0:	3204      	adds	r2, #4
 80088b2:	6803      	ldr	r3, [r0, #0]
 80088b4:	4073      	eors	r3, r6
 80088b6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80088ba:	ea25 0303 	bic.w	r3, r5, r3
 80088be:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80088c2:	d1da      	bne.n	800887a <memchr+0x36>
 80088c4:	3c04      	subs	r4, #4
 80088c6:	2c03      	cmp	r4, #3
 80088c8:	4610      	mov	r0, r2
 80088ca:	d8f0      	bhi.n	80088ae <memchr+0x6a>
 80088cc:	e7d5      	b.n	800887a <memchr+0x36>
 80088ce:	4614      	mov	r4, r2
 80088d0:	e7d1      	b.n	8008876 <memchr+0x32>
 80088d2:	4610      	mov	r0, r2
 80088d4:	e7e1      	b.n	800889a <memchr+0x56>
 80088d6:	bf00      	nop

080088d8 <__malloc_lock>:
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop

080088dc <__malloc_unlock>:
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop

080088e0 <_Balloc>:
 80088e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80088e2:	b570      	push	{r4, r5, r6, lr}
 80088e4:	4605      	mov	r5, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	b14b      	cbz	r3, 80088fe <_Balloc+0x1e>
 80088ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80088ee:	b180      	cbz	r0, 8008912 <_Balloc+0x32>
 80088f0:	6802      	ldr	r2, [r0, #0]
 80088f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80088f6:	2300      	movs	r3, #0
 80088f8:	6103      	str	r3, [r0, #16]
 80088fa:	60c3      	str	r3, [r0, #12]
 80088fc:	bd70      	pop	{r4, r5, r6, pc}
 80088fe:	2104      	movs	r1, #4
 8008900:	2221      	movs	r2, #33	; 0x21
 8008902:	f000 fc25 	bl	8009150 <_calloc_r>
 8008906:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008908:	4603      	mov	r3, r0
 800890a:	2800      	cmp	r0, #0
 800890c:	d1ed      	bne.n	80088ea <_Balloc+0xa>
 800890e:	2000      	movs	r0, #0
 8008910:	bd70      	pop	{r4, r5, r6, pc}
 8008912:	2101      	movs	r1, #1
 8008914:	fa01 f604 	lsl.w	r6, r1, r4
 8008918:	1d72      	adds	r2, r6, #5
 800891a:	4628      	mov	r0, r5
 800891c:	0092      	lsls	r2, r2, #2
 800891e:	f000 fc17 	bl	8009150 <_calloc_r>
 8008922:	2800      	cmp	r0, #0
 8008924:	d0f3      	beq.n	800890e <_Balloc+0x2e>
 8008926:	6044      	str	r4, [r0, #4]
 8008928:	6086      	str	r6, [r0, #8]
 800892a:	e7e4      	b.n	80088f6 <_Balloc+0x16>

0800892c <_Bfree>:
 800892c:	b131      	cbz	r1, 800893c <_Bfree+0x10>
 800892e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008930:	684a      	ldr	r2, [r1, #4]
 8008932:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008936:	6008      	str	r0, [r1, #0]
 8008938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop

08008940 <__multadd>:
 8008940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008942:	690c      	ldr	r4, [r1, #16]
 8008944:	b083      	sub	sp, #12
 8008946:	460d      	mov	r5, r1
 8008948:	4606      	mov	r6, r0
 800894a:	f101 0e14 	add.w	lr, r1, #20
 800894e:	2700      	movs	r7, #0
 8008950:	f8de 1000 	ldr.w	r1, [lr]
 8008954:	b288      	uxth	r0, r1
 8008956:	0c09      	lsrs	r1, r1, #16
 8008958:	fb02 3300 	mla	r3, r2, r0, r3
 800895c:	fb02 f101 	mul.w	r1, r2, r1
 8008960:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8008964:	3701      	adds	r7, #1
 8008966:	b29b      	uxth	r3, r3
 8008968:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800896c:	42bc      	cmp	r4, r7
 800896e:	f84e 3b04 	str.w	r3, [lr], #4
 8008972:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8008976:	dceb      	bgt.n	8008950 <__multadd+0x10>
 8008978:	b13b      	cbz	r3, 800898a <__multadd+0x4a>
 800897a:	68aa      	ldr	r2, [r5, #8]
 800897c:	4294      	cmp	r4, r2
 800897e:	da07      	bge.n	8008990 <__multadd+0x50>
 8008980:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8008984:	3401      	adds	r4, #1
 8008986:	6153      	str	r3, [r2, #20]
 8008988:	612c      	str	r4, [r5, #16]
 800898a:	4628      	mov	r0, r5
 800898c:	b003      	add	sp, #12
 800898e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008990:	6869      	ldr	r1, [r5, #4]
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	3101      	adds	r1, #1
 8008996:	4630      	mov	r0, r6
 8008998:	f7ff ffa2 	bl	80088e0 <_Balloc>
 800899c:	692a      	ldr	r2, [r5, #16]
 800899e:	3202      	adds	r2, #2
 80089a0:	f105 010c 	add.w	r1, r5, #12
 80089a4:	4607      	mov	r7, r0
 80089a6:	0092      	lsls	r2, r2, #2
 80089a8:	300c      	adds	r0, #12
 80089aa:	f7fc fe4d 	bl	8005648 <memcpy>
 80089ae:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80089b0:	6869      	ldr	r1, [r5, #4]
 80089b2:	9b01      	ldr	r3, [sp, #4]
 80089b4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80089b8:	6028      	str	r0, [r5, #0]
 80089ba:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80089be:	463d      	mov	r5, r7
 80089c0:	e7de      	b.n	8008980 <__multadd+0x40>
 80089c2:	bf00      	nop

080089c4 <__hi0bits>:
 80089c4:	0c03      	lsrs	r3, r0, #16
 80089c6:	041b      	lsls	r3, r3, #16
 80089c8:	b9b3      	cbnz	r3, 80089f8 <__hi0bits+0x34>
 80089ca:	0400      	lsls	r0, r0, #16
 80089cc:	2310      	movs	r3, #16
 80089ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089d2:	bf04      	itt	eq
 80089d4:	0200      	lsleq	r0, r0, #8
 80089d6:	3308      	addeq	r3, #8
 80089d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089dc:	bf04      	itt	eq
 80089de:	0100      	lsleq	r0, r0, #4
 80089e0:	3304      	addeq	r3, #4
 80089e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089e6:	bf04      	itt	eq
 80089e8:	0080      	lsleq	r0, r0, #2
 80089ea:	3302      	addeq	r3, #2
 80089ec:	2800      	cmp	r0, #0
 80089ee:	db07      	blt.n	8008a00 <__hi0bits+0x3c>
 80089f0:	0042      	lsls	r2, r0, #1
 80089f2:	d403      	bmi.n	80089fc <__hi0bits+0x38>
 80089f4:	2020      	movs	r0, #32
 80089f6:	4770      	bx	lr
 80089f8:	2300      	movs	r3, #0
 80089fa:	e7e8      	b.n	80089ce <__hi0bits+0xa>
 80089fc:	1c58      	adds	r0, r3, #1
 80089fe:	4770      	bx	lr
 8008a00:	4618      	mov	r0, r3
 8008a02:	4770      	bx	lr

08008a04 <__lo0bits>:
 8008a04:	6803      	ldr	r3, [r0, #0]
 8008a06:	f013 0207 	ands.w	r2, r3, #7
 8008a0a:	d007      	beq.n	8008a1c <__lo0bits+0x18>
 8008a0c:	07d9      	lsls	r1, r3, #31
 8008a0e:	d420      	bmi.n	8008a52 <__lo0bits+0x4e>
 8008a10:	079a      	lsls	r2, r3, #30
 8008a12:	d420      	bmi.n	8008a56 <__lo0bits+0x52>
 8008a14:	089b      	lsrs	r3, r3, #2
 8008a16:	6003      	str	r3, [r0, #0]
 8008a18:	2002      	movs	r0, #2
 8008a1a:	4770      	bx	lr
 8008a1c:	b299      	uxth	r1, r3
 8008a1e:	b909      	cbnz	r1, 8008a24 <__lo0bits+0x20>
 8008a20:	0c1b      	lsrs	r3, r3, #16
 8008a22:	2210      	movs	r2, #16
 8008a24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a28:	bf04      	itt	eq
 8008a2a:	0a1b      	lsreq	r3, r3, #8
 8008a2c:	3208      	addeq	r2, #8
 8008a2e:	0719      	lsls	r1, r3, #28
 8008a30:	bf04      	itt	eq
 8008a32:	091b      	lsreq	r3, r3, #4
 8008a34:	3204      	addeq	r2, #4
 8008a36:	0799      	lsls	r1, r3, #30
 8008a38:	bf04      	itt	eq
 8008a3a:	089b      	lsreq	r3, r3, #2
 8008a3c:	3202      	addeq	r2, #2
 8008a3e:	07d9      	lsls	r1, r3, #31
 8008a40:	d404      	bmi.n	8008a4c <__lo0bits+0x48>
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	d101      	bne.n	8008a4a <__lo0bits+0x46>
 8008a46:	2020      	movs	r0, #32
 8008a48:	4770      	bx	lr
 8008a4a:	3201      	adds	r2, #1
 8008a4c:	6003      	str	r3, [r0, #0]
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4770      	bx	lr
 8008a52:	2000      	movs	r0, #0
 8008a54:	4770      	bx	lr
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop

08008a60 <__i2b>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	460c      	mov	r4, r1
 8008a64:	2101      	movs	r1, #1
 8008a66:	f7ff ff3b 	bl	80088e0 <_Balloc>
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	6144      	str	r4, [r0, #20]
 8008a6e:	6102      	str	r2, [r0, #16]
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	bf00      	nop

08008a74 <__multiply>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	690f      	ldr	r7, [r1, #16]
 8008a7a:	6916      	ldr	r6, [r2, #16]
 8008a7c:	42b7      	cmp	r7, r6
 8008a7e:	b083      	sub	sp, #12
 8008a80:	460d      	mov	r5, r1
 8008a82:	4614      	mov	r4, r2
 8008a84:	f2c0 808d 	blt.w	8008ba2 <__multiply+0x12e>
 8008a88:	4633      	mov	r3, r6
 8008a8a:	463e      	mov	r6, r7
 8008a8c:	461f      	mov	r7, r3
 8008a8e:	68ab      	ldr	r3, [r5, #8]
 8008a90:	6869      	ldr	r1, [r5, #4]
 8008a92:	eb06 0807 	add.w	r8, r6, r7
 8008a96:	4598      	cmp	r8, r3
 8008a98:	bfc8      	it	gt
 8008a9a:	3101      	addgt	r1, #1
 8008a9c:	f7ff ff20 	bl	80088e0 <_Balloc>
 8008aa0:	f100 0c14 	add.w	ip, r0, #20
 8008aa4:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8008aa8:	45cc      	cmp	ip, r9
 8008aaa:	9000      	str	r0, [sp, #0]
 8008aac:	d205      	bcs.n	8008aba <__multiply+0x46>
 8008aae:	4663      	mov	r3, ip
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	f843 1b04 	str.w	r1, [r3], #4
 8008ab6:	4599      	cmp	r9, r3
 8008ab8:	d8fb      	bhi.n	8008ab2 <__multiply+0x3e>
 8008aba:	f104 0214 	add.w	r2, r4, #20
 8008abe:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8008ac2:	f105 0314 	add.w	r3, r5, #20
 8008ac6:	4552      	cmp	r2, sl
 8008ac8:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8008acc:	d254      	bcs.n	8008b78 <__multiply+0x104>
 8008ace:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ad2:	4699      	mov	r9, r3
 8008ad4:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ad8:	fa1f fb83 	uxth.w	fp, r3
 8008adc:	f1bb 0f00 	cmp.w	fp, #0
 8008ae0:	d020      	beq.n	8008b24 <__multiply+0xb0>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	464f      	mov	r7, r9
 8008ae6:	4666      	mov	r6, ip
 8008ae8:	4605      	mov	r5, r0
 8008aea:	e000      	b.n	8008aee <__multiply+0x7a>
 8008aec:	461e      	mov	r6, r3
 8008aee:	f857 4b04 	ldr.w	r4, [r7], #4
 8008af2:	6830      	ldr	r0, [r6, #0]
 8008af4:	b2a1      	uxth	r1, r4
 8008af6:	b283      	uxth	r3, r0
 8008af8:	fb0b 3101 	mla	r1, fp, r1, r3
 8008afc:	0c24      	lsrs	r4, r4, #16
 8008afe:	0c00      	lsrs	r0, r0, #16
 8008b00:	194b      	adds	r3, r1, r5
 8008b02:	fb0b 0004 	mla	r0, fp, r4, r0
 8008b06:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8008b0a:	b299      	uxth	r1, r3
 8008b0c:	4633      	mov	r3, r6
 8008b0e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b12:	45be      	cmp	lr, r7
 8008b14:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8008b18:	f843 1b04 	str.w	r1, [r3], #4
 8008b1c:	d8e6      	bhi.n	8008aec <__multiply+0x78>
 8008b1e:	6075      	str	r5, [r6, #4]
 8008b20:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008b24:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8008b28:	d020      	beq.n	8008b6c <__multiply+0xf8>
 8008b2a:	f8dc 3000 	ldr.w	r3, [ip]
 8008b2e:	4667      	mov	r7, ip
 8008b30:	4618      	mov	r0, r3
 8008b32:	464d      	mov	r5, r9
 8008b34:	2100      	movs	r1, #0
 8008b36:	e000      	b.n	8008b3a <__multiply+0xc6>
 8008b38:	4637      	mov	r7, r6
 8008b3a:	882c      	ldrh	r4, [r5, #0]
 8008b3c:	0c00      	lsrs	r0, r0, #16
 8008b3e:	fb0b 0004 	mla	r0, fp, r4, r0
 8008b42:	4401      	add	r1, r0
 8008b44:	b29c      	uxth	r4, r3
 8008b46:	463e      	mov	r6, r7
 8008b48:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008b4c:	f846 3b04 	str.w	r3, [r6], #4
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f855 4b04 	ldr.w	r4, [r5], #4
 8008b56:	b283      	uxth	r3, r0
 8008b58:	0c24      	lsrs	r4, r4, #16
 8008b5a:	fb0b 3404 	mla	r4, fp, r4, r3
 8008b5e:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008b62:	45ae      	cmp	lr, r5
 8008b64:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8008b68:	d8e6      	bhi.n	8008b38 <__multiply+0xc4>
 8008b6a:	607b      	str	r3, [r7, #4]
 8008b6c:	4592      	cmp	sl, r2
 8008b6e:	f10c 0c04 	add.w	ip, ip, #4
 8008b72:	d8af      	bhi.n	8008ad4 <__multiply+0x60>
 8008b74:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b78:	f1b8 0f00 	cmp.w	r8, #0
 8008b7c:	dd0b      	ble.n	8008b96 <__multiply+0x122>
 8008b7e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008b82:	f1a9 0904 	sub.w	r9, r9, #4
 8008b86:	b11b      	cbz	r3, 8008b90 <__multiply+0x11c>
 8008b88:	e005      	b.n	8008b96 <__multiply+0x122>
 8008b8a:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8008b8e:	b913      	cbnz	r3, 8008b96 <__multiply+0x122>
 8008b90:	f1b8 0801 	subs.w	r8, r8, #1
 8008b94:	d1f9      	bne.n	8008b8a <__multiply+0x116>
 8008b96:	9800      	ldr	r0, [sp, #0]
 8008b98:	f8c0 8010 	str.w	r8, [r0, #16]
 8008b9c:	b003      	add	sp, #12
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	4615      	mov	r5, r2
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	e772      	b.n	8008a8e <__multiply+0x1a>

08008ba8 <__pow5mult>:
 8008ba8:	f012 0303 	ands.w	r3, r2, #3
 8008bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	d12d      	bne.n	8008c14 <__pow5mult+0x6c>
 8008bb8:	10a4      	asrs	r4, r4, #2
 8008bba:	d01c      	beq.n	8008bf6 <__pow5mult+0x4e>
 8008bbc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8008bbe:	b395      	cbz	r5, 8008c26 <__pow5mult+0x7e>
 8008bc0:	07e3      	lsls	r3, r4, #31
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	d406      	bmi.n	8008bd6 <__pow5mult+0x2e>
 8008bc8:	1064      	asrs	r4, r4, #1
 8008bca:	d014      	beq.n	8008bf6 <__pow5mult+0x4e>
 8008bcc:	6828      	ldr	r0, [r5, #0]
 8008bce:	b1a8      	cbz	r0, 8008bfc <__pow5mult+0x54>
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	07e3      	lsls	r3, r4, #31
 8008bd4:	d5f8      	bpl.n	8008bc8 <__pow5mult+0x20>
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	4631      	mov	r1, r6
 8008bda:	462a      	mov	r2, r5
 8008bdc:	f7ff ff4a 	bl	8008a74 <__multiply>
 8008be0:	b1b6      	cbz	r6, 8008c10 <__pow5mult+0x68>
 8008be2:	6872      	ldr	r2, [r6, #4]
 8008be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be6:	1064      	asrs	r4, r4, #1
 8008be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bec:	6031      	str	r1, [r6, #0]
 8008bee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	d1ea      	bne.n	8008bcc <__pow5mult+0x24>
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ff37 	bl	8008a74 <__multiply>
 8008c06:	6028      	str	r0, [r5, #0]
 8008c08:	f8c0 8000 	str.w	r8, [r0]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	e7e0      	b.n	8008bd2 <__pow5mult+0x2a>
 8008c10:	4606      	mov	r6, r0
 8008c12:	e7d9      	b.n	8008bc8 <__pow5mult+0x20>
 8008c14:	1e5a      	subs	r2, r3, #1
 8008c16:	4d0b      	ldr	r5, [pc, #44]	; (8008c44 <__pow5mult+0x9c>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008c1e:	f7ff fe8f 	bl	8008940 <__multadd>
 8008c22:	4606      	mov	r6, r0
 8008c24:	e7c8      	b.n	8008bb8 <__pow5mult+0x10>
 8008c26:	2101      	movs	r1, #1
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7ff fe59 	bl	80088e0 <_Balloc>
 8008c2e:	f240 2171 	movw	r1, #625	; 0x271
 8008c32:	2201      	movs	r2, #1
 8008c34:	2300      	movs	r3, #0
 8008c36:	6141      	str	r1, [r0, #20]
 8008c38:	6102      	str	r2, [r0, #16]
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	64b8      	str	r0, [r7, #72]	; 0x48
 8008c3e:	6003      	str	r3, [r0, #0]
 8008c40:	e7be      	b.n	8008bc0 <__pow5mult+0x18>
 8008c42:	bf00      	nop
 8008c44:	0800a170 	.word	0x0800a170

08008c48 <__lshift>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	690f      	ldr	r7, [r1, #16]
 8008c4e:	688b      	ldr	r3, [r1, #8]
 8008c50:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008c54:	444f      	add	r7, r9
 8008c56:	1c7d      	adds	r5, r7, #1
 8008c58:	429d      	cmp	r5, r3
 8008c5a:	460e      	mov	r6, r1
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	6849      	ldr	r1, [r1, #4]
 8008c60:	4680      	mov	r8, r0
 8008c62:	dd04      	ble.n	8008c6e <__lshift+0x26>
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	429d      	cmp	r5, r3
 8008c68:	f101 0101 	add.w	r1, r1, #1
 8008c6c:	dcfa      	bgt.n	8008c64 <__lshift+0x1c>
 8008c6e:	4640      	mov	r0, r8
 8008c70:	f7ff fe36 	bl	80088e0 <_Balloc>
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	f100 0114 	add.w	r1, r0, #20
 8008c7c:	dd09      	ble.n	8008c92 <__lshift+0x4a>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	469e      	mov	lr, r3
 8008c82:	460a      	mov	r2, r1
 8008c84:	3301      	adds	r3, #1
 8008c86:	454b      	cmp	r3, r9
 8008c88:	f842 eb04 	str.w	lr, [r2], #4
 8008c8c:	d1fa      	bne.n	8008c84 <__lshift+0x3c>
 8008c8e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008c92:	6932      	ldr	r2, [r6, #16]
 8008c94:	f106 0314 	add.w	r3, r6, #20
 8008c98:	f014 0c1f 	ands.w	ip, r4, #31
 8008c9c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8008ca0:	d01f      	beq.n	8008ce2 <__lshift+0x9a>
 8008ca2:	f1cc 0920 	rsb	r9, ip, #32
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	681c      	ldr	r4, [r3, #0]
 8008caa:	fa04 f40c 	lsl.w	r4, r4, ip
 8008cae:	4314      	orrs	r4, r2
 8008cb0:	468a      	mov	sl, r1
 8008cb2:	f841 4b04 	str.w	r4, [r1], #4
 8008cb6:	f853 4b04 	ldr.w	r4, [r3], #4
 8008cba:	459e      	cmp	lr, r3
 8008cbc:	fa24 f209 	lsr.w	r2, r4, r9
 8008cc0:	d8f2      	bhi.n	8008ca8 <__lshift+0x60>
 8008cc2:	f8ca 2004 	str.w	r2, [sl, #4]
 8008cc6:	b102      	cbz	r2, 8008cca <__lshift+0x82>
 8008cc8:	1cbd      	adds	r5, r7, #2
 8008cca:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008cce:	6872      	ldr	r2, [r6, #4]
 8008cd0:	3d01      	subs	r5, #1
 8008cd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cd6:	6105      	str	r5, [r0, #16]
 8008cd8:	6031      	str	r1, [r6, #0]
 8008cda:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	3904      	subs	r1, #4
 8008ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cec:	459e      	cmp	lr, r3
 8008cee:	d8f9      	bhi.n	8008ce4 <__lshift+0x9c>
 8008cf0:	e7eb      	b.n	8008cca <__lshift+0x82>
 8008cf2:	bf00      	nop

08008cf4 <__mcmp>:
 8008cf4:	6902      	ldr	r2, [r0, #16]
 8008cf6:	690b      	ldr	r3, [r1, #16]
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	d113      	bne.n	8008d24 <__mcmp+0x30>
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	3014      	adds	r0, #20
 8008d00:	3114      	adds	r1, #20
 8008d02:	4419      	add	r1, r3
 8008d04:	b410      	push	{r4}
 8008d06:	4403      	add	r3, r0
 8008d08:	e001      	b.n	8008d0e <__mcmp+0x1a>
 8008d0a:	4298      	cmp	r0, r3
 8008d0c:	d20c      	bcs.n	8008d28 <__mcmp+0x34>
 8008d0e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008d12:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d16:	4294      	cmp	r4, r2
 8008d18:	d0f7      	beq.n	8008d0a <__mcmp+0x16>
 8008d1a:	d309      	bcc.n	8008d30 <__mcmp+0x3c>
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	4610      	mov	r0, r2
 8008d26:	4770      	bx	lr
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop

08008d3c <__mdiff>:
 8008d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d40:	460e      	mov	r6, r1
 8008d42:	4605      	mov	r5, r0
 8008d44:	4611      	mov	r1, r2
 8008d46:	4630      	mov	r0, r6
 8008d48:	4614      	mov	r4, r2
 8008d4a:	f7ff ffd3 	bl	8008cf4 <__mcmp>
 8008d4e:	1e07      	subs	r7, r0, #0
 8008d50:	d054      	beq.n	8008dfc <__mdiff+0xc0>
 8008d52:	db4d      	blt.n	8008df0 <__mdiff+0xb4>
 8008d54:	f04f 0800 	mov.w	r8, #0
 8008d58:	6871      	ldr	r1, [r6, #4]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f7ff fdc0 	bl	80088e0 <_Balloc>
 8008d60:	6937      	ldr	r7, [r6, #16]
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	f8c0 800c 	str.w	r8, [r0, #12]
 8008d68:	3614      	adds	r6, #20
 8008d6a:	f104 0214 	add.w	r2, r4, #20
 8008d6e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8008d72:	f100 0514 	add.w	r5, r0, #20
 8008d76:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d80:	f852 4b04 	ldr.w	r4, [r2], #4
 8008d84:	fa13 f388 	uxtah	r3, r3, r8
 8008d88:	b2a1      	uxth	r1, r4
 8008d8a:	0c24      	lsrs	r4, r4, #16
 8008d8c:	1a59      	subs	r1, r3, r1
 8008d8e:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8008d92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008d96:	b289      	uxth	r1, r1
 8008d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d9c:	4594      	cmp	ip, r2
 8008d9e:	f845 1b04 	str.w	r1, [r5], #4
 8008da2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008da6:	4634      	mov	r4, r6
 8008da8:	d8e8      	bhi.n	8008d7c <__mdiff+0x40>
 8008daa:	45b6      	cmp	lr, r6
 8008dac:	46ac      	mov	ip, r5
 8008dae:	d915      	bls.n	8008ddc <__mdiff+0xa0>
 8008db0:	f854 2b04 	ldr.w	r2, [r4], #4
 8008db4:	fa13 f182 	uxtah	r1, r3, r2
 8008db8:	0c13      	lsrs	r3, r2, #16
 8008dba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008dbe:	b289      	uxth	r1, r1
 8008dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008dc4:	45a6      	cmp	lr, r4
 8008dc6:	f845 1b04 	str.w	r1, [r5], #4
 8008dca:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008dce:	d8ef      	bhi.n	8008db0 <__mdiff+0x74>
 8008dd0:	43f6      	mvns	r6, r6
 8008dd2:	4476      	add	r6, lr
 8008dd4:	f026 0503 	bic.w	r5, r6, #3
 8008dd8:	3504      	adds	r5, #4
 8008dda:	4465      	add	r5, ip
 8008ddc:	3d04      	subs	r5, #4
 8008dde:	b921      	cbnz	r1, 8008dea <__mdiff+0xae>
 8008de0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008de4:	3f01      	subs	r7, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0fa      	beq.n	8008de0 <__mdiff+0xa4>
 8008dea:	6107      	str	r7, [r0, #16]
 8008dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df0:	4633      	mov	r3, r6
 8008df2:	f04f 0801 	mov.w	r8, #1
 8008df6:	4626      	mov	r6, r4
 8008df8:	461c      	mov	r4, r3
 8008dfa:	e7ad      	b.n	8008d58 <__mdiff+0x1c>
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7ff fd6e 	bl	80088e0 <_Balloc>
 8008e04:	2301      	movs	r3, #1
 8008e06:	6147      	str	r7, [r0, #20]
 8008e08:	6103      	str	r3, [r0, #16]
 8008e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e0e:	bf00      	nop

08008e10 <__d2b>:
 8008e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e14:	ec57 6b10 	vmov	r6, r7, d0
 8008e18:	b083      	sub	sp, #12
 8008e1a:	4688      	mov	r8, r1
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	463c      	mov	r4, r7
 8008e20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e24:	4617      	mov	r7, r2
 8008e26:	f7ff fd5b 	bl	80088e0 <_Balloc>
 8008e2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e2e:	4681      	mov	r9, r0
 8008e30:	b10d      	cbz	r5, 8008e36 <__d2b+0x26>
 8008e32:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008e36:	9401      	str	r4, [sp, #4]
 8008e38:	b31e      	cbz	r6, 8008e82 <__d2b+0x72>
 8008e3a:	a802      	add	r0, sp, #8
 8008e3c:	f840 6d08 	str.w	r6, [r0, #-8]!
 8008e40:	f7ff fde0 	bl	8008a04 <__lo0bits>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d134      	bne.n	8008eb2 <__d2b+0xa2>
 8008e48:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008e4c:	f8c9 2014 	str.w	r2, [r9, #20]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bf14      	ite	ne
 8008e54:	2402      	movne	r4, #2
 8008e56:	2401      	moveq	r4, #1
 8008e58:	f8c9 3018 	str.w	r3, [r9, #24]
 8008e5c:	f8c9 4010 	str.w	r4, [r9, #16]
 8008e60:	b9dd      	cbnz	r5, 8008e9a <__d2b+0x8a>
 8008e62:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8008e66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e6a:	f8c8 0000 	str.w	r0, [r8]
 8008e6e:	6918      	ldr	r0, [r3, #16]
 8008e70:	f7ff fda8 	bl	80089c4 <__hi0bits>
 8008e74:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8008e78:	6038      	str	r0, [r7, #0]
 8008e7a:	4648      	mov	r0, r9
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e82:	a801      	add	r0, sp, #4
 8008e84:	f7ff fdbe 	bl	8008a04 <__lo0bits>
 8008e88:	2401      	movs	r4, #1
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	f8c9 3014 	str.w	r3, [r9, #20]
 8008e90:	3020      	adds	r0, #32
 8008e92:	f8c9 4010 	str.w	r4, [r9, #16]
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	d0e3      	beq.n	8008e62 <__d2b+0x52>
 8008e9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e9e:	4405      	add	r5, r0
 8008ea0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ea4:	f8c8 5000 	str.w	r5, [r8]
 8008ea8:	6038      	str	r0, [r7, #0]
 8008eaa:	4648      	mov	r0, r9
 8008eac:	b003      	add	sp, #12
 8008eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb2:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008eb6:	f1c0 0120 	rsb	r1, r0, #32
 8008eba:	fa03 f101 	lsl.w	r1, r3, r1
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	40c3      	lsrs	r3, r0
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	f8c9 2014 	str.w	r2, [r9, #20]
 8008ec8:	e7c2      	b.n	8008e50 <__d2b+0x40>
 8008eca:	bf00      	nop

08008ecc <__fpclassifyd>:
 8008ecc:	ec53 2b10 	vmov	r2, r3, d0
 8008ed0:	b410      	push	{r4}
 8008ed2:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 8008ed6:	d008      	beq.n	8008eea <__fpclassifyd+0x1e>
 8008ed8:	4911      	ldr	r1, [pc, #68]	; (8008f20 <__fpclassifyd+0x54>)
 8008eda:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8008ede:	4288      	cmp	r0, r1
 8008ee0:	d808      	bhi.n	8008ef4 <__fpclassifyd+0x28>
 8008ee2:	2004      	movs	r0, #4
 8008ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	b91a      	cbnz	r2, 8008ef4 <__fpclassifyd+0x28>
 8008eec:	2002      	movs	r0, #2
 8008eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8008ef8:	4909      	ldr	r1, [pc, #36]	; (8008f20 <__fpclassifyd+0x54>)
 8008efa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008efe:	428b      	cmp	r3, r1
 8008f00:	d9ef      	bls.n	8008ee2 <__fpclassifyd+0x16>
 8008f02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f06:	d201      	bcs.n	8008f0c <__fpclassifyd+0x40>
 8008f08:	2003      	movs	r0, #3
 8008f0a:	e7eb      	b.n	8008ee4 <__fpclassifyd+0x18>
 8008f0c:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <__fpclassifyd+0x58>)
 8008f0e:	429c      	cmp	r4, r3
 8008f10:	d001      	beq.n	8008f16 <__fpclassifyd+0x4a>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e7e6      	b.n	8008ee4 <__fpclassifyd+0x18>
 8008f16:	fab2 f082 	clz	r0, r2
 8008f1a:	0940      	lsrs	r0, r0, #5
 8008f1c:	e7e2      	b.n	8008ee4 <__fpclassifyd+0x18>
 8008f1e:	bf00      	nop
 8008f20:	7fdfffff 	.word	0x7fdfffff
 8008f24:	7ff00000 	.word	0x7ff00000

08008f28 <_sbrk_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4c07      	ldr	r4, [pc, #28]	; (8008f48 <_sbrk_r+0x20>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4605      	mov	r5, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	f7fc fdf6 	bl	8005b24 <_sbrk>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d000      	beq.n	8008f3e <_sbrk_r+0x16>
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0fb      	beq.n	8008f3c <_sbrk_r+0x14>
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	20000c04 	.word	0x20000c04

08008f4c <strlen>:
 8008f4c:	f020 0103 	bic.w	r1, r0, #3
 8008f50:	f010 0003 	ands.w	r0, r0, #3
 8008f54:	f1c0 0000 	rsb	r0, r0, #0
 8008f58:	f851 3b04 	ldr.w	r3, [r1], #4
 8008f5c:	f100 0c04 	add.w	ip, r0, #4
 8008f60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008f64:	f06f 0200 	mvn.w	r2, #0
 8008f68:	bf1c      	itt	ne
 8008f6a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8008f6e:	4313      	orrne	r3, r2
 8008f70:	f04f 0c01 	mov.w	ip, #1
 8008f74:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8008f78:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8008f7c:	eba3 020c 	sub.w	r2, r3, ip
 8008f80:	ea22 0203 	bic.w	r2, r2, r3
 8008f84:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8008f88:	bf04      	itt	eq
 8008f8a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008f8e:	3004      	addeq	r0, #4
 8008f90:	d0f4      	beq.n	8008f7c <strlen+0x30>
 8008f92:	f1c2 0100 	rsb	r1, r2, #0
 8008f96:	ea02 0201 	and.w	r2, r2, r1
 8008f9a:	fab2 f282 	clz	r2, r2
 8008f9e:	f1c2 021f 	rsb	r2, r2, #31
 8008fa2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8008fa6:	4770      	bx	lr

08008fa8 <__ssprint_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	6893      	ldr	r3, [r2, #8]
 8008fae:	f8d2 8000 	ldr.w	r8, [r2]
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	4691      	mov	r9, r2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d072      	beq.n	80090a0 <__ssprint_r+0xf8>
 8008fba:	4607      	mov	r7, r0
 8008fbc:	f04f 0b00 	mov.w	fp, #0
 8008fc0:	6808      	ldr	r0, [r1, #0]
 8008fc2:	688b      	ldr	r3, [r1, #8]
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	465c      	mov	r4, fp
 8008fc8:	2c00      	cmp	r4, #0
 8008fca:	d045      	beq.n	8009058 <__ssprint_r+0xb0>
 8008fcc:	429c      	cmp	r4, r3
 8008fce:	461e      	mov	r6, r3
 8008fd0:	469a      	mov	sl, r3
 8008fd2:	d348      	bcc.n	8009066 <__ssprint_r+0xbe>
 8008fd4:	89ab      	ldrh	r3, [r5, #12]
 8008fd6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008fda:	d02d      	beq.n	8009038 <__ssprint_r+0x90>
 8008fdc:	696e      	ldr	r6, [r5, #20]
 8008fde:	6929      	ldr	r1, [r5, #16]
 8008fe0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8008fe4:	ebc1 0a00 	rsb	sl, r1, r0
 8008fe8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8008fec:	1c60      	adds	r0, r4, #1
 8008fee:	1076      	asrs	r6, r6, #1
 8008ff0:	4450      	add	r0, sl
 8008ff2:	4286      	cmp	r6, r0
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	bf3c      	itt	cc
 8008ff8:	4606      	movcc	r6, r0
 8008ffa:	4632      	movcc	r2, r6
 8008ffc:	055b      	lsls	r3, r3, #21
 8008ffe:	d535      	bpl.n	800906c <__ssprint_r+0xc4>
 8009000:	4611      	mov	r1, r2
 8009002:	4638      	mov	r0, r7
 8009004:	f7ff f98c 	bl	8008320 <_malloc_r>
 8009008:	2800      	cmp	r0, #0
 800900a:	d039      	beq.n	8009080 <__ssprint_r+0xd8>
 800900c:	4652      	mov	r2, sl
 800900e:	6929      	ldr	r1, [r5, #16]
 8009010:	9001      	str	r0, [sp, #4]
 8009012:	f7fc fb19 	bl	8005648 <memcpy>
 8009016:	89aa      	ldrh	r2, [r5, #12]
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800901e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009022:	81aa      	strh	r2, [r5, #12]
 8009024:	ebca 0206 	rsb	r2, sl, r6
 8009028:	eb03 000a 	add.w	r0, r3, sl
 800902c:	616e      	str	r6, [r5, #20]
 800902e:	612b      	str	r3, [r5, #16]
 8009030:	6028      	str	r0, [r5, #0]
 8009032:	60aa      	str	r2, [r5, #8]
 8009034:	4626      	mov	r6, r4
 8009036:	46a2      	mov	sl, r4
 8009038:	4652      	mov	r2, sl
 800903a:	4659      	mov	r1, fp
 800903c:	f000 f9de 	bl	80093fc <memmove>
 8009040:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009044:	68ab      	ldr	r3, [r5, #8]
 8009046:	6828      	ldr	r0, [r5, #0]
 8009048:	1b9b      	subs	r3, r3, r6
 800904a:	4450      	add	r0, sl
 800904c:	1b14      	subs	r4, r2, r4
 800904e:	60ab      	str	r3, [r5, #8]
 8009050:	6028      	str	r0, [r5, #0]
 8009052:	f8c9 4008 	str.w	r4, [r9, #8]
 8009056:	b31c      	cbz	r4, 80090a0 <__ssprint_r+0xf8>
 8009058:	f8d8 b000 	ldr.w	fp, [r8]
 800905c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009060:	f108 0808 	add.w	r8, r8, #8
 8009064:	e7b0      	b.n	8008fc8 <__ssprint_r+0x20>
 8009066:	4626      	mov	r6, r4
 8009068:	46a2      	mov	sl, r4
 800906a:	e7e5      	b.n	8009038 <__ssprint_r+0x90>
 800906c:	4638      	mov	r0, r7
 800906e:	f000 fa29 	bl	80094c4 <_realloc_r>
 8009072:	4603      	mov	r3, r0
 8009074:	2800      	cmp	r0, #0
 8009076:	d1d5      	bne.n	8009024 <__ssprint_r+0x7c>
 8009078:	4638      	mov	r0, r7
 800907a:	6929      	ldr	r1, [r5, #16]
 800907c:	f000 f8e6 	bl	800924c <_free_r>
 8009080:	230c      	movs	r3, #12
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	89ab      	ldrh	r3, [r5, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	81ab      	strh	r3, [r5, #12]
 8009092:	f8c9 2008 	str.w	r2, [r9, #8]
 8009096:	f8c9 2004 	str.w	r2, [r9, #4]
 800909a:	b003      	add	sp, #12
 800909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a0:	2000      	movs	r0, #0
 80090a2:	f8c9 0004 	str.w	r0, [r9, #4]
 80090a6:	b003      	add	sp, #12
 80090a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090ac <__register_exitproc>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	4c25      	ldr	r4, [pc, #148]	; (8009148 <__register_exitproc+0x9c>)
 80090b2:	6825      	ldr	r5, [r4, #0]
 80090b4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80090b8:	4606      	mov	r6, r0
 80090ba:	4688      	mov	r8, r1
 80090bc:	4692      	mov	sl, r2
 80090be:	4699      	mov	r9, r3
 80090c0:	b3cc      	cbz	r4, 8009136 <__register_exitproc+0x8a>
 80090c2:	6860      	ldr	r0, [r4, #4]
 80090c4:	281f      	cmp	r0, #31
 80090c6:	dc18      	bgt.n	80090fa <__register_exitproc+0x4e>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	b17e      	cbz	r6, 80090ec <__register_exitproc+0x40>
 80090cc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80090d0:	2101      	movs	r1, #1
 80090d2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80090d6:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 80090da:	fa01 f200 	lsl.w	r2, r1, r0
 80090de:	4317      	orrs	r7, r2
 80090e0:	2e02      	cmp	r6, #2
 80090e2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80090e6:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80090ea:	d01e      	beq.n	800912a <__register_exitproc+0x7e>
 80090ec:	3002      	adds	r0, #2
 80090ee:	6063      	str	r3, [r4, #4]
 80090f0:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80090f4:	2000      	movs	r0, #0
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <__register_exitproc+0xa0>)
 80090fc:	b303      	cbz	r3, 8009140 <__register_exitproc+0x94>
 80090fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009102:	f3af 8000 	nop.w
 8009106:	4604      	mov	r4, r0
 8009108:	b1d0      	cbz	r0, 8009140 <__register_exitproc+0x94>
 800910a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800910e:	2700      	movs	r7, #0
 8009110:	e880 0088 	stmia.w	r0, {r3, r7}
 8009114:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009118:	4638      	mov	r0, r7
 800911a:	2301      	movs	r3, #1
 800911c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009120:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8009124:	2e00      	cmp	r6, #0
 8009126:	d0e1      	beq.n	80090ec <__register_exitproc+0x40>
 8009128:	e7d0      	b.n	80090cc <__register_exitproc+0x20>
 800912a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800912e:	430a      	orrs	r2, r1
 8009130:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8009134:	e7da      	b.n	80090ec <__register_exitproc+0x40>
 8009136:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800913a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800913e:	e7c0      	b.n	80090c2 <__register_exitproc+0x16>
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009148:	0800a020 	.word	0x0800a020
 800914c:	00000000 	.word	0x00000000

08009150 <_calloc_r>:
 8009150:	b510      	push	{r4, lr}
 8009152:	fb02 f101 	mul.w	r1, r2, r1
 8009156:	f7ff f8e3 	bl	8008320 <_malloc_r>
 800915a:	4604      	mov	r4, r0
 800915c:	b168      	cbz	r0, 800917a <_calloc_r+0x2a>
 800915e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009162:	f022 0203 	bic.w	r2, r2, #3
 8009166:	3a04      	subs	r2, #4
 8009168:	2a24      	cmp	r2, #36	; 0x24
 800916a:	d818      	bhi.n	800919e <_calloc_r+0x4e>
 800916c:	2a13      	cmp	r2, #19
 800916e:	d806      	bhi.n	800917e <_calloc_r+0x2e>
 8009170:	4603      	mov	r3, r0
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	605a      	str	r2, [r3, #4]
 8009178:	609a      	str	r2, [r3, #8]
 800917a:	4620      	mov	r0, r4
 800917c:	bd10      	pop	{r4, pc}
 800917e:	2300      	movs	r3, #0
 8009180:	2a1b      	cmp	r2, #27
 8009182:	6003      	str	r3, [r0, #0]
 8009184:	6043      	str	r3, [r0, #4]
 8009186:	d90f      	bls.n	80091a8 <_calloc_r+0x58>
 8009188:	2a24      	cmp	r2, #36	; 0x24
 800918a:	6083      	str	r3, [r0, #8]
 800918c:	60c3      	str	r3, [r0, #12]
 800918e:	bf05      	ittet	eq
 8009190:	6103      	streq	r3, [r0, #16]
 8009192:	6143      	streq	r3, [r0, #20]
 8009194:	f100 0310 	addne.w	r3, r0, #16
 8009198:	f100 0318 	addeq.w	r3, r0, #24
 800919c:	e7e9      	b.n	8009172 <_calloc_r+0x22>
 800919e:	2100      	movs	r1, #0
 80091a0:	f7fc fda8 	bl	8005cf4 <memset>
 80091a4:	4620      	mov	r0, r4
 80091a6:	bd10      	pop	{r4, pc}
 80091a8:	f100 0308 	add.w	r3, r0, #8
 80091ac:	e7e1      	b.n	8009172 <_calloc_r+0x22>
 80091ae:	bf00      	nop

080091b0 <_malloc_trim_r>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	4f23      	ldr	r7, [pc, #140]	; (8009240 <_malloc_trim_r+0x90>)
 80091b4:	460c      	mov	r4, r1
 80091b6:	4606      	mov	r6, r0
 80091b8:	f7ff fb8e 	bl	80088d8 <__malloc_lock>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	685d      	ldr	r5, [r3, #4]
 80091c0:	f025 0503 	bic.w	r5, r5, #3
 80091c4:	1b29      	subs	r1, r5, r4
 80091c6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80091ca:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80091ce:	f021 010f 	bic.w	r1, r1, #15
 80091d2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80091d6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80091da:	db07      	blt.n	80091ec <_malloc_trim_r+0x3c>
 80091dc:	4630      	mov	r0, r6
 80091de:	2100      	movs	r1, #0
 80091e0:	f7ff fea2 	bl	8008f28 <_sbrk_r>
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	442b      	add	r3, r5
 80091e8:	4298      	cmp	r0, r3
 80091ea:	d004      	beq.n	80091f6 <_malloc_trim_r+0x46>
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7ff fb75 	bl	80088dc <__malloc_unlock>
 80091f2:	2000      	movs	r0, #0
 80091f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f6:	4630      	mov	r0, r6
 80091f8:	4261      	negs	r1, r4
 80091fa:	f7ff fe95 	bl	8008f28 <_sbrk_r>
 80091fe:	3001      	adds	r0, #1
 8009200:	d00d      	beq.n	800921e <_malloc_trim_r+0x6e>
 8009202:	4b10      	ldr	r3, [pc, #64]	; (8009244 <_malloc_trim_r+0x94>)
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	6819      	ldr	r1, [r3, #0]
 8009208:	1b2d      	subs	r5, r5, r4
 800920a:	f045 0501 	orr.w	r5, r5, #1
 800920e:	4630      	mov	r0, r6
 8009210:	1b09      	subs	r1, r1, r4
 8009212:	6055      	str	r5, [r2, #4]
 8009214:	6019      	str	r1, [r3, #0]
 8009216:	f7ff fb61 	bl	80088dc <__malloc_unlock>
 800921a:	2001      	movs	r0, #1
 800921c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800921e:	4630      	mov	r0, r6
 8009220:	2100      	movs	r1, #0
 8009222:	f7ff fe81 	bl	8008f28 <_sbrk_r>
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	1a83      	subs	r3, r0, r2
 800922a:	2b0f      	cmp	r3, #15
 800922c:	ddde      	ble.n	80091ec <_malloc_trim_r+0x3c>
 800922e:	4c06      	ldr	r4, [pc, #24]	; (8009248 <_malloc_trim_r+0x98>)
 8009230:	4904      	ldr	r1, [pc, #16]	; (8009244 <_malloc_trim_r+0x94>)
 8009232:	6824      	ldr	r4, [r4, #0]
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	1b00      	subs	r0, r0, r4
 800923a:	6053      	str	r3, [r2, #4]
 800923c:	6008      	str	r0, [r1, #0]
 800923e:	e7d5      	b.n	80091ec <_malloc_trim_r+0x3c>
 8009240:	20000584 	.word	0x20000584
 8009244:	20000bdc 	.word	0x20000bdc
 8009248:	20000990 	.word	0x20000990

0800924c <_free_r>:
 800924c:	2900      	cmp	r1, #0
 800924e:	d04e      	beq.n	80092ee <_free_r+0xa2>
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	4680      	mov	r8, r0
 8009258:	f7ff fb3e 	bl	80088d8 <__malloc_lock>
 800925c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8009260:	4962      	ldr	r1, [pc, #392]	; (80093ec <_free_r+0x1a0>)
 8009262:	f027 0201 	bic.w	r2, r7, #1
 8009266:	f1a4 0508 	sub.w	r5, r4, #8
 800926a:	18ab      	adds	r3, r5, r2
 800926c:	688e      	ldr	r6, [r1, #8]
 800926e:	6858      	ldr	r0, [r3, #4]
 8009270:	429e      	cmp	r6, r3
 8009272:	f020 0003 	bic.w	r0, r0, #3
 8009276:	d05a      	beq.n	800932e <_free_r+0xe2>
 8009278:	07fe      	lsls	r6, r7, #31
 800927a:	6058      	str	r0, [r3, #4]
 800927c:	d40b      	bmi.n	8009296 <_free_r+0x4a>
 800927e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009282:	1bed      	subs	r5, r5, r7
 8009284:	f101 0e08 	add.w	lr, r1, #8
 8009288:	68ac      	ldr	r4, [r5, #8]
 800928a:	4574      	cmp	r4, lr
 800928c:	443a      	add	r2, r7
 800928e:	d067      	beq.n	8009360 <_free_r+0x114>
 8009290:	68ef      	ldr	r7, [r5, #12]
 8009292:	60e7      	str	r7, [r4, #12]
 8009294:	60bc      	str	r4, [r7, #8]
 8009296:	181c      	adds	r4, r3, r0
 8009298:	6864      	ldr	r4, [r4, #4]
 800929a:	07e4      	lsls	r4, r4, #31
 800929c:	d40c      	bmi.n	80092b8 <_free_r+0x6c>
 800929e:	4f54      	ldr	r7, [pc, #336]	; (80093f0 <_free_r+0x1a4>)
 80092a0:	689c      	ldr	r4, [r3, #8]
 80092a2:	42bc      	cmp	r4, r7
 80092a4:	4402      	add	r2, r0
 80092a6:	d07c      	beq.n	80093a2 <_free_r+0x156>
 80092a8:	68d8      	ldr	r0, [r3, #12]
 80092aa:	60e0      	str	r0, [r4, #12]
 80092ac:	f042 0301 	orr.w	r3, r2, #1
 80092b0:	6084      	str	r4, [r0, #8]
 80092b2:	606b      	str	r3, [r5, #4]
 80092b4:	50aa      	str	r2, [r5, r2]
 80092b6:	e003      	b.n	80092c0 <_free_r+0x74>
 80092b8:	f042 0301 	orr.w	r3, r2, #1
 80092bc:	606b      	str	r3, [r5, #4]
 80092be:	50aa      	str	r2, [r5, r2]
 80092c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80092c4:	d214      	bcs.n	80092f0 <_free_r+0xa4>
 80092c6:	08d2      	lsrs	r2, r2, #3
 80092c8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80092cc:	6848      	ldr	r0, [r1, #4]
 80092ce:	689f      	ldr	r7, [r3, #8]
 80092d0:	60af      	str	r7, [r5, #8]
 80092d2:	1092      	asrs	r2, r2, #2
 80092d4:	2401      	movs	r4, #1
 80092d6:	fa04 f202 	lsl.w	r2, r4, r2
 80092da:	4310      	orrs	r0, r2
 80092dc:	60eb      	str	r3, [r5, #12]
 80092de:	6048      	str	r0, [r1, #4]
 80092e0:	609d      	str	r5, [r3, #8]
 80092e2:	60fd      	str	r5, [r7, #12]
 80092e4:	4640      	mov	r0, r8
 80092e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ea:	f7ff baf7 	b.w	80088dc <__malloc_unlock>
 80092ee:	4770      	bx	lr
 80092f0:	0a53      	lsrs	r3, r2, #9
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d847      	bhi.n	8009386 <_free_r+0x13a>
 80092f6:	0993      	lsrs	r3, r2, #6
 80092f8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80092fc:	0060      	lsls	r0, r4, #1
 80092fe:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8009302:	493a      	ldr	r1, [pc, #232]	; (80093ec <_free_r+0x1a0>)
 8009304:	6883      	ldr	r3, [r0, #8]
 8009306:	4283      	cmp	r3, r0
 8009308:	d043      	beq.n	8009392 <_free_r+0x146>
 800930a:	6859      	ldr	r1, [r3, #4]
 800930c:	f021 0103 	bic.w	r1, r1, #3
 8009310:	4291      	cmp	r1, r2
 8009312:	d902      	bls.n	800931a <_free_r+0xce>
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	4298      	cmp	r0, r3
 8009318:	d1f7      	bne.n	800930a <_free_r+0xbe>
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	60ea      	str	r2, [r5, #12]
 800931e:	60ab      	str	r3, [r5, #8]
 8009320:	4640      	mov	r0, r8
 8009322:	6095      	str	r5, [r2, #8]
 8009324:	60dd      	str	r5, [r3, #12]
 8009326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	f7ff bad7 	b.w	80088dc <__malloc_unlock>
 800932e:	07ff      	lsls	r7, r7, #31
 8009330:	4402      	add	r2, r0
 8009332:	d407      	bmi.n	8009344 <_free_r+0xf8>
 8009334:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8009338:	1aed      	subs	r5, r5, r3
 800933a:	441a      	add	r2, r3
 800933c:	68a8      	ldr	r0, [r5, #8]
 800933e:	68eb      	ldr	r3, [r5, #12]
 8009340:	60c3      	str	r3, [r0, #12]
 8009342:	6098      	str	r0, [r3, #8]
 8009344:	4b2b      	ldr	r3, [pc, #172]	; (80093f4 <_free_r+0x1a8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0001 	orr.w	r0, r2, #1
 800934c:	429a      	cmp	r2, r3
 800934e:	6068      	str	r0, [r5, #4]
 8009350:	608d      	str	r5, [r1, #8]
 8009352:	d3c7      	bcc.n	80092e4 <_free_r+0x98>
 8009354:	4b28      	ldr	r3, [pc, #160]	; (80093f8 <_free_r+0x1ac>)
 8009356:	4640      	mov	r0, r8
 8009358:	6819      	ldr	r1, [r3, #0]
 800935a:	f7ff ff29 	bl	80091b0 <_malloc_trim_r>
 800935e:	e7c1      	b.n	80092e4 <_free_r+0x98>
 8009360:	1819      	adds	r1, r3, r0
 8009362:	6849      	ldr	r1, [r1, #4]
 8009364:	07c9      	lsls	r1, r1, #31
 8009366:	d409      	bmi.n	800937c <_free_r+0x130>
 8009368:	68d9      	ldr	r1, [r3, #12]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	4402      	add	r2, r0
 800936e:	f042 0001 	orr.w	r0, r2, #1
 8009372:	60d9      	str	r1, [r3, #12]
 8009374:	608b      	str	r3, [r1, #8]
 8009376:	6068      	str	r0, [r5, #4]
 8009378:	50aa      	str	r2, [r5, r2]
 800937a:	e7b3      	b.n	80092e4 <_free_r+0x98>
 800937c:	f042 0301 	orr.w	r3, r2, #1
 8009380:	606b      	str	r3, [r5, #4]
 8009382:	50aa      	str	r2, [r5, r2]
 8009384:	e7ae      	b.n	80092e4 <_free_r+0x98>
 8009386:	2b14      	cmp	r3, #20
 8009388:	d814      	bhi.n	80093b4 <_free_r+0x168>
 800938a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800938e:	0060      	lsls	r0, r4, #1
 8009390:	e7b5      	b.n	80092fe <_free_r+0xb2>
 8009392:	684a      	ldr	r2, [r1, #4]
 8009394:	10a4      	asrs	r4, r4, #2
 8009396:	2001      	movs	r0, #1
 8009398:	40a0      	lsls	r0, r4
 800939a:	4302      	orrs	r2, r0
 800939c:	604a      	str	r2, [r1, #4]
 800939e:	461a      	mov	r2, r3
 80093a0:	e7bc      	b.n	800931c <_free_r+0xd0>
 80093a2:	f042 0301 	orr.w	r3, r2, #1
 80093a6:	614d      	str	r5, [r1, #20]
 80093a8:	610d      	str	r5, [r1, #16]
 80093aa:	60ec      	str	r4, [r5, #12]
 80093ac:	60ac      	str	r4, [r5, #8]
 80093ae:	606b      	str	r3, [r5, #4]
 80093b0:	50aa      	str	r2, [r5, r2]
 80093b2:	e797      	b.n	80092e4 <_free_r+0x98>
 80093b4:	2b54      	cmp	r3, #84	; 0x54
 80093b6:	d804      	bhi.n	80093c2 <_free_r+0x176>
 80093b8:	0b13      	lsrs	r3, r2, #12
 80093ba:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 80093be:	0060      	lsls	r0, r4, #1
 80093c0:	e79d      	b.n	80092fe <_free_r+0xb2>
 80093c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80093c6:	d804      	bhi.n	80093d2 <_free_r+0x186>
 80093c8:	0bd3      	lsrs	r3, r2, #15
 80093ca:	f103 0477 	add.w	r4, r3, #119	; 0x77
 80093ce:	0060      	lsls	r0, r4, #1
 80093d0:	e795      	b.n	80092fe <_free_r+0xb2>
 80093d2:	f240 5054 	movw	r0, #1364	; 0x554
 80093d6:	4283      	cmp	r3, r0
 80093d8:	d804      	bhi.n	80093e4 <_free_r+0x198>
 80093da:	0c93      	lsrs	r3, r2, #18
 80093dc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80093e0:	0060      	lsls	r0, r4, #1
 80093e2:	e78c      	b.n	80092fe <_free_r+0xb2>
 80093e4:	20fc      	movs	r0, #252	; 0xfc
 80093e6:	247e      	movs	r4, #126	; 0x7e
 80093e8:	e789      	b.n	80092fe <_free_r+0xb2>
 80093ea:	bf00      	nop
 80093ec:	20000584 	.word	0x20000584
 80093f0:	2000058c 	.word	0x2000058c
 80093f4:	2000098c 	.word	0x2000098c
 80093f8:	20000bd8 	.word	0x20000bd8

080093fc <memmove>:
 80093fc:	4288      	cmp	r0, r1
 80093fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009400:	d90d      	bls.n	800941e <memmove+0x22>
 8009402:	188b      	adds	r3, r1, r2
 8009404:	4298      	cmp	r0, r3
 8009406:	d20a      	bcs.n	800941e <memmove+0x22>
 8009408:	1881      	adds	r1, r0, r2
 800940a:	2a00      	cmp	r2, #0
 800940c:	d054      	beq.n	80094b8 <memmove+0xbc>
 800940e:	1a9a      	subs	r2, r3, r2
 8009410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009414:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009418:	4293      	cmp	r3, r2
 800941a:	d1f9      	bne.n	8009410 <memmove+0x14>
 800941c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941e:	2a0f      	cmp	r2, #15
 8009420:	d948      	bls.n	80094b4 <memmove+0xb8>
 8009422:	ea40 0301 	orr.w	r3, r0, r1
 8009426:	079b      	lsls	r3, r3, #30
 8009428:	d147      	bne.n	80094ba <memmove+0xbe>
 800942a:	f100 0410 	add.w	r4, r0, #16
 800942e:	f101 0310 	add.w	r3, r1, #16
 8009432:	4615      	mov	r5, r2
 8009434:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8009438:	f844 6c10 	str.w	r6, [r4, #-16]
 800943c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009440:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009444:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8009448:	f844 6c08 	str.w	r6, [r4, #-8]
 800944c:	3d10      	subs	r5, #16
 800944e:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8009452:	f844 6c04 	str.w	r6, [r4, #-4]
 8009456:	2d0f      	cmp	r5, #15
 8009458:	f103 0310 	add.w	r3, r3, #16
 800945c:	f104 0410 	add.w	r4, r4, #16
 8009460:	d8e8      	bhi.n	8009434 <memmove+0x38>
 8009462:	f1a2 0310 	sub.w	r3, r2, #16
 8009466:	f023 030f 	bic.w	r3, r3, #15
 800946a:	f002 0e0f 	and.w	lr, r2, #15
 800946e:	3310      	adds	r3, #16
 8009470:	f1be 0f03 	cmp.w	lr, #3
 8009474:	4419      	add	r1, r3
 8009476:	4403      	add	r3, r0
 8009478:	d921      	bls.n	80094be <memmove+0xc2>
 800947a:	1f1e      	subs	r6, r3, #4
 800947c:	460d      	mov	r5, r1
 800947e:	4674      	mov	r4, lr
 8009480:	3c04      	subs	r4, #4
 8009482:	f855 7b04 	ldr.w	r7, [r5], #4
 8009486:	f846 7f04 	str.w	r7, [r6, #4]!
 800948a:	2c03      	cmp	r4, #3
 800948c:	d8f8      	bhi.n	8009480 <memmove+0x84>
 800948e:	f1ae 0404 	sub.w	r4, lr, #4
 8009492:	f024 0403 	bic.w	r4, r4, #3
 8009496:	3404      	adds	r4, #4
 8009498:	4423      	add	r3, r4
 800949a:	4421      	add	r1, r4
 800949c:	f002 0203 	and.w	r2, r2, #3
 80094a0:	b152      	cbz	r2, 80094b8 <memmove+0xbc>
 80094a2:	3b01      	subs	r3, #1
 80094a4:	440a      	add	r2, r1
 80094a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ae:	4291      	cmp	r1, r2
 80094b0:	d1f9      	bne.n	80094a6 <memmove+0xaa>
 80094b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b4:	4603      	mov	r3, r0
 80094b6:	e7f3      	b.n	80094a0 <memmove+0xa4>
 80094b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ba:	4603      	mov	r3, r0
 80094bc:	e7f1      	b.n	80094a2 <memmove+0xa6>
 80094be:	4672      	mov	r2, lr
 80094c0:	e7ee      	b.n	80094a0 <memmove+0xa4>
 80094c2:	bf00      	nop

080094c4 <_realloc_r>:
 80094c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c8:	4617      	mov	r7, r2
 80094ca:	b083      	sub	sp, #12
 80094cc:	460e      	mov	r6, r1
 80094ce:	2900      	cmp	r1, #0
 80094d0:	f000 80e7 	beq.w	80096a2 <_realloc_r+0x1de>
 80094d4:	4681      	mov	r9, r0
 80094d6:	f107 050b 	add.w	r5, r7, #11
 80094da:	f7ff f9fd 	bl	80088d8 <__malloc_lock>
 80094de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094e2:	2d16      	cmp	r5, #22
 80094e4:	f023 0403 	bic.w	r4, r3, #3
 80094e8:	f1a6 0808 	sub.w	r8, r6, #8
 80094ec:	d84c      	bhi.n	8009588 <_realloc_r+0xc4>
 80094ee:	2210      	movs	r2, #16
 80094f0:	4615      	mov	r5, r2
 80094f2:	42af      	cmp	r7, r5
 80094f4:	d84d      	bhi.n	8009592 <_realloc_r+0xce>
 80094f6:	4294      	cmp	r4, r2
 80094f8:	f280 8084 	bge.w	8009604 <_realloc_r+0x140>
 80094fc:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 80098ac <_realloc_r+0x3e8>
 8009500:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009504:	eb08 0104 	add.w	r1, r8, r4
 8009508:	4288      	cmp	r0, r1
 800950a:	f000 80d6 	beq.w	80096ba <_realloc_r+0x1f6>
 800950e:	6848      	ldr	r0, [r1, #4]
 8009510:	f020 0e01 	bic.w	lr, r0, #1
 8009514:	448e      	add	lr, r1
 8009516:	f8de e004 	ldr.w	lr, [lr, #4]
 800951a:	f01e 0f01 	tst.w	lr, #1
 800951e:	d13f      	bne.n	80095a0 <_realloc_r+0xdc>
 8009520:	f020 0003 	bic.w	r0, r0, #3
 8009524:	4420      	add	r0, r4
 8009526:	4290      	cmp	r0, r2
 8009528:	f280 80c1 	bge.w	80096ae <_realloc_r+0x1ea>
 800952c:	07db      	lsls	r3, r3, #31
 800952e:	f100 808f 	bmi.w	8009650 <_realloc_r+0x18c>
 8009532:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009536:	ebc3 0a08 	rsb	sl, r3, r8
 800953a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800953e:	f023 0303 	bic.w	r3, r3, #3
 8009542:	eb00 0e03 	add.w	lr, r0, r3
 8009546:	4596      	cmp	lr, r2
 8009548:	db34      	blt.n	80095b4 <_realloc_r+0xf0>
 800954a:	68cb      	ldr	r3, [r1, #12]
 800954c:	688a      	ldr	r2, [r1, #8]
 800954e:	4657      	mov	r7, sl
 8009550:	60d3      	str	r3, [r2, #12]
 8009552:	609a      	str	r2, [r3, #8]
 8009554:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009558:	f8da 300c 	ldr.w	r3, [sl, #12]
 800955c:	60cb      	str	r3, [r1, #12]
 800955e:	1f22      	subs	r2, r4, #4
 8009560:	2a24      	cmp	r2, #36	; 0x24
 8009562:	6099      	str	r1, [r3, #8]
 8009564:	f200 8136 	bhi.w	80097d4 <_realloc_r+0x310>
 8009568:	2a13      	cmp	r2, #19
 800956a:	f240 80fd 	bls.w	8009768 <_realloc_r+0x2a4>
 800956e:	6833      	ldr	r3, [r6, #0]
 8009570:	f8ca 3008 	str.w	r3, [sl, #8]
 8009574:	6873      	ldr	r3, [r6, #4]
 8009576:	f8ca 300c 	str.w	r3, [sl, #12]
 800957a:	2a1b      	cmp	r2, #27
 800957c:	f200 8140 	bhi.w	8009800 <_realloc_r+0x33c>
 8009580:	3608      	adds	r6, #8
 8009582:	f10a 0310 	add.w	r3, sl, #16
 8009586:	e0f0      	b.n	800976a <_realloc_r+0x2a6>
 8009588:	f025 0507 	bic.w	r5, r5, #7
 800958c:	2d00      	cmp	r5, #0
 800958e:	462a      	mov	r2, r5
 8009590:	daaf      	bge.n	80094f2 <_realloc_r+0x2e>
 8009592:	230c      	movs	r3, #12
 8009594:	2000      	movs	r0, #0
 8009596:	f8c9 3000 	str.w	r3, [r9]
 800959a:	b003      	add	sp, #12
 800959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	07d9      	lsls	r1, r3, #31
 80095a2:	d455      	bmi.n	8009650 <_realloc_r+0x18c>
 80095a4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80095a8:	ebc3 0a08 	rsb	sl, r3, r8
 80095ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80095b0:	f023 0303 	bic.w	r3, r3, #3
 80095b4:	4423      	add	r3, r4
 80095b6:	4293      	cmp	r3, r2
 80095b8:	db4a      	blt.n	8009650 <_realloc_r+0x18c>
 80095ba:	4657      	mov	r7, sl
 80095bc:	f8da 100c 	ldr.w	r1, [sl, #12]
 80095c0:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80095c4:	1f22      	subs	r2, r4, #4
 80095c6:	2a24      	cmp	r2, #36	; 0x24
 80095c8:	60c1      	str	r1, [r0, #12]
 80095ca:	6088      	str	r0, [r1, #8]
 80095cc:	f200 810e 	bhi.w	80097ec <_realloc_r+0x328>
 80095d0:	2a13      	cmp	r2, #19
 80095d2:	f240 8109 	bls.w	80097e8 <_realloc_r+0x324>
 80095d6:	6831      	ldr	r1, [r6, #0]
 80095d8:	f8ca 1008 	str.w	r1, [sl, #8]
 80095dc:	6871      	ldr	r1, [r6, #4]
 80095de:	f8ca 100c 	str.w	r1, [sl, #12]
 80095e2:	2a1b      	cmp	r2, #27
 80095e4:	f200 8121 	bhi.w	800982a <_realloc_r+0x366>
 80095e8:	3608      	adds	r6, #8
 80095ea:	f10a 0210 	add.w	r2, sl, #16
 80095ee:	6831      	ldr	r1, [r6, #0]
 80095f0:	6011      	str	r1, [r2, #0]
 80095f2:	6871      	ldr	r1, [r6, #4]
 80095f4:	6051      	str	r1, [r2, #4]
 80095f6:	68b1      	ldr	r1, [r6, #8]
 80095f8:	6091      	str	r1, [r2, #8]
 80095fa:	461c      	mov	r4, r3
 80095fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009600:	463e      	mov	r6, r7
 8009602:	46d0      	mov	r8, sl
 8009604:	1b62      	subs	r2, r4, r5
 8009606:	2a0f      	cmp	r2, #15
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	d80e      	bhi.n	800962c <_realloc_r+0x168>
 800960e:	4323      	orrs	r3, r4
 8009610:	4444      	add	r4, r8
 8009612:	f8c8 3004 	str.w	r3, [r8, #4]
 8009616:	6863      	ldr	r3, [r4, #4]
 8009618:	f043 0301 	orr.w	r3, r3, #1
 800961c:	6063      	str	r3, [r4, #4]
 800961e:	4648      	mov	r0, r9
 8009620:	f7ff f95c 	bl	80088dc <__malloc_unlock>
 8009624:	4630      	mov	r0, r6
 8009626:	b003      	add	sp, #12
 8009628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962c:	eb08 0105 	add.w	r1, r8, r5
 8009630:	431d      	orrs	r5, r3
 8009632:	f042 0301 	orr.w	r3, r2, #1
 8009636:	440a      	add	r2, r1
 8009638:	f8c8 5004 	str.w	r5, [r8, #4]
 800963c:	604b      	str	r3, [r1, #4]
 800963e:	6853      	ldr	r3, [r2, #4]
 8009640:	f043 0301 	orr.w	r3, r3, #1
 8009644:	3108      	adds	r1, #8
 8009646:	6053      	str	r3, [r2, #4]
 8009648:	4648      	mov	r0, r9
 800964a:	f7ff fdff 	bl	800924c <_free_r>
 800964e:	e7e6      	b.n	800961e <_realloc_r+0x15a>
 8009650:	4639      	mov	r1, r7
 8009652:	4648      	mov	r0, r9
 8009654:	f7fe fe64 	bl	8008320 <_malloc_r>
 8009658:	4607      	mov	r7, r0
 800965a:	b1d8      	cbz	r0, 8009694 <_realloc_r+0x1d0>
 800965c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009660:	f023 0201 	bic.w	r2, r3, #1
 8009664:	4442      	add	r2, r8
 8009666:	f1a0 0108 	sub.w	r1, r0, #8
 800966a:	4291      	cmp	r1, r2
 800966c:	f000 80ac 	beq.w	80097c8 <_realloc_r+0x304>
 8009670:	1f22      	subs	r2, r4, #4
 8009672:	2a24      	cmp	r2, #36	; 0x24
 8009674:	f200 8099 	bhi.w	80097aa <_realloc_r+0x2e6>
 8009678:	2a13      	cmp	r2, #19
 800967a:	d86a      	bhi.n	8009752 <_realloc_r+0x28e>
 800967c:	4603      	mov	r3, r0
 800967e:	4632      	mov	r2, r6
 8009680:	6811      	ldr	r1, [r2, #0]
 8009682:	6019      	str	r1, [r3, #0]
 8009684:	6851      	ldr	r1, [r2, #4]
 8009686:	6059      	str	r1, [r3, #4]
 8009688:	6892      	ldr	r2, [r2, #8]
 800968a:	609a      	str	r2, [r3, #8]
 800968c:	4631      	mov	r1, r6
 800968e:	4648      	mov	r0, r9
 8009690:	f7ff fddc 	bl	800924c <_free_r>
 8009694:	4648      	mov	r0, r9
 8009696:	f7ff f921 	bl	80088dc <__malloc_unlock>
 800969a:	4638      	mov	r0, r7
 800969c:	b003      	add	sp, #12
 800969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a2:	4611      	mov	r1, r2
 80096a4:	b003      	add	sp, #12
 80096a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096aa:	f7fe be39 	b.w	8008320 <_malloc_r>
 80096ae:	68ca      	ldr	r2, [r1, #12]
 80096b0:	6889      	ldr	r1, [r1, #8]
 80096b2:	4604      	mov	r4, r0
 80096b4:	60ca      	str	r2, [r1, #12]
 80096b6:	6091      	str	r1, [r2, #8]
 80096b8:	e7a4      	b.n	8009604 <_realloc_r+0x140>
 80096ba:	6841      	ldr	r1, [r0, #4]
 80096bc:	f021 0103 	bic.w	r1, r1, #3
 80096c0:	4421      	add	r1, r4
 80096c2:	f105 0010 	add.w	r0, r5, #16
 80096c6:	4281      	cmp	r1, r0
 80096c8:	da5b      	bge.n	8009782 <_realloc_r+0x2be>
 80096ca:	07db      	lsls	r3, r3, #31
 80096cc:	d4c0      	bmi.n	8009650 <_realloc_r+0x18c>
 80096ce:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80096d2:	ebc3 0a08 	rsb	sl, r3, r8
 80096d6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	eb01 0c03 	add.w	ip, r1, r3
 80096e2:	4560      	cmp	r0, ip
 80096e4:	f73f af66 	bgt.w	80095b4 <_realloc_r+0xf0>
 80096e8:	4657      	mov	r7, sl
 80096ea:	f8da 300c 	ldr.w	r3, [sl, #12]
 80096ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80096f2:	1f22      	subs	r2, r4, #4
 80096f4:	2a24      	cmp	r2, #36	; 0x24
 80096f6:	60cb      	str	r3, [r1, #12]
 80096f8:	6099      	str	r1, [r3, #8]
 80096fa:	f200 80b8 	bhi.w	800986e <_realloc_r+0x3aa>
 80096fe:	2a13      	cmp	r2, #19
 8009700:	f240 80a9 	bls.w	8009856 <_realloc_r+0x392>
 8009704:	6833      	ldr	r3, [r6, #0]
 8009706:	f8ca 3008 	str.w	r3, [sl, #8]
 800970a:	6873      	ldr	r3, [r6, #4]
 800970c:	f8ca 300c 	str.w	r3, [sl, #12]
 8009710:	2a1b      	cmp	r2, #27
 8009712:	f200 80b5 	bhi.w	8009880 <_realloc_r+0x3bc>
 8009716:	3608      	adds	r6, #8
 8009718:	f10a 0310 	add.w	r3, sl, #16
 800971c:	6832      	ldr	r2, [r6, #0]
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	6872      	ldr	r2, [r6, #4]
 8009722:	605a      	str	r2, [r3, #4]
 8009724:	68b2      	ldr	r2, [r6, #8]
 8009726:	609a      	str	r2, [r3, #8]
 8009728:	eb0a 0205 	add.w	r2, sl, r5
 800972c:	ebc5 030c 	rsb	r3, r5, ip
 8009730:	f043 0301 	orr.w	r3, r3, #1
 8009734:	f8cb 2008 	str.w	r2, [fp, #8]
 8009738:	6053      	str	r3, [r2, #4]
 800973a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	431d      	orrs	r5, r3
 8009744:	4648      	mov	r0, r9
 8009746:	f8ca 5004 	str.w	r5, [sl, #4]
 800974a:	f7ff f8c7 	bl	80088dc <__malloc_unlock>
 800974e:	4638      	mov	r0, r7
 8009750:	e769      	b.n	8009626 <_realloc_r+0x162>
 8009752:	6833      	ldr	r3, [r6, #0]
 8009754:	6003      	str	r3, [r0, #0]
 8009756:	6873      	ldr	r3, [r6, #4]
 8009758:	6043      	str	r3, [r0, #4]
 800975a:	2a1b      	cmp	r2, #27
 800975c:	d829      	bhi.n	80097b2 <_realloc_r+0x2ee>
 800975e:	f100 0308 	add.w	r3, r0, #8
 8009762:	f106 0208 	add.w	r2, r6, #8
 8009766:	e78b      	b.n	8009680 <_realloc_r+0x1bc>
 8009768:	463b      	mov	r3, r7
 800976a:	6832      	ldr	r2, [r6, #0]
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	6872      	ldr	r2, [r6, #4]
 8009770:	605a      	str	r2, [r3, #4]
 8009772:	68b2      	ldr	r2, [r6, #8]
 8009774:	609a      	str	r2, [r3, #8]
 8009776:	463e      	mov	r6, r7
 8009778:	4674      	mov	r4, lr
 800977a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800977e:	46d0      	mov	r8, sl
 8009780:	e740      	b.n	8009604 <_realloc_r+0x140>
 8009782:	eb08 0205 	add.w	r2, r8, r5
 8009786:	1b4b      	subs	r3, r1, r5
 8009788:	f043 0301 	orr.w	r3, r3, #1
 800978c:	f8cb 2008 	str.w	r2, [fp, #8]
 8009790:	6053      	str	r3, [r2, #4]
 8009792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	431d      	orrs	r5, r3
 800979c:	4648      	mov	r0, r9
 800979e:	f846 5c04 	str.w	r5, [r6, #-4]
 80097a2:	f7ff f89b 	bl	80088dc <__malloc_unlock>
 80097a6:	4630      	mov	r0, r6
 80097a8:	e73d      	b.n	8009626 <_realloc_r+0x162>
 80097aa:	4631      	mov	r1, r6
 80097ac:	f7ff fe26 	bl	80093fc <memmove>
 80097b0:	e76c      	b.n	800968c <_realloc_r+0x1c8>
 80097b2:	68b3      	ldr	r3, [r6, #8]
 80097b4:	6083      	str	r3, [r0, #8]
 80097b6:	68f3      	ldr	r3, [r6, #12]
 80097b8:	60c3      	str	r3, [r0, #12]
 80097ba:	2a24      	cmp	r2, #36	; 0x24
 80097bc:	d02c      	beq.n	8009818 <_realloc_r+0x354>
 80097be:	f100 0310 	add.w	r3, r0, #16
 80097c2:	f106 0210 	add.w	r2, r6, #16
 80097c6:	e75b      	b.n	8009680 <_realloc_r+0x1bc>
 80097c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80097cc:	f022 0203 	bic.w	r2, r2, #3
 80097d0:	4414      	add	r4, r2
 80097d2:	e717      	b.n	8009604 <_realloc_r+0x140>
 80097d4:	4631      	mov	r1, r6
 80097d6:	4638      	mov	r0, r7
 80097d8:	4674      	mov	r4, lr
 80097da:	463e      	mov	r6, r7
 80097dc:	f7ff fe0e 	bl	80093fc <memmove>
 80097e0:	46d0      	mov	r8, sl
 80097e2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80097e6:	e70d      	b.n	8009604 <_realloc_r+0x140>
 80097e8:	463a      	mov	r2, r7
 80097ea:	e700      	b.n	80095ee <_realloc_r+0x12a>
 80097ec:	4631      	mov	r1, r6
 80097ee:	4638      	mov	r0, r7
 80097f0:	461c      	mov	r4, r3
 80097f2:	463e      	mov	r6, r7
 80097f4:	f7ff fe02 	bl	80093fc <memmove>
 80097f8:	46d0      	mov	r8, sl
 80097fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80097fe:	e701      	b.n	8009604 <_realloc_r+0x140>
 8009800:	68b3      	ldr	r3, [r6, #8]
 8009802:	f8ca 3010 	str.w	r3, [sl, #16]
 8009806:	68f3      	ldr	r3, [r6, #12]
 8009808:	f8ca 3014 	str.w	r3, [sl, #20]
 800980c:	2a24      	cmp	r2, #36	; 0x24
 800980e:	d018      	beq.n	8009842 <_realloc_r+0x37e>
 8009810:	3610      	adds	r6, #16
 8009812:	f10a 0318 	add.w	r3, sl, #24
 8009816:	e7a8      	b.n	800976a <_realloc_r+0x2a6>
 8009818:	6933      	ldr	r3, [r6, #16]
 800981a:	6103      	str	r3, [r0, #16]
 800981c:	6973      	ldr	r3, [r6, #20]
 800981e:	6143      	str	r3, [r0, #20]
 8009820:	f106 0218 	add.w	r2, r6, #24
 8009824:	f100 0318 	add.w	r3, r0, #24
 8009828:	e72a      	b.n	8009680 <_realloc_r+0x1bc>
 800982a:	68b1      	ldr	r1, [r6, #8]
 800982c:	f8ca 1010 	str.w	r1, [sl, #16]
 8009830:	68f1      	ldr	r1, [r6, #12]
 8009832:	f8ca 1014 	str.w	r1, [sl, #20]
 8009836:	2a24      	cmp	r2, #36	; 0x24
 8009838:	d00f      	beq.n	800985a <_realloc_r+0x396>
 800983a:	3610      	adds	r6, #16
 800983c:	f10a 0218 	add.w	r2, sl, #24
 8009840:	e6d5      	b.n	80095ee <_realloc_r+0x12a>
 8009842:	6933      	ldr	r3, [r6, #16]
 8009844:	f8ca 3018 	str.w	r3, [sl, #24]
 8009848:	6973      	ldr	r3, [r6, #20]
 800984a:	f8ca 301c 	str.w	r3, [sl, #28]
 800984e:	3618      	adds	r6, #24
 8009850:	f10a 0320 	add.w	r3, sl, #32
 8009854:	e789      	b.n	800976a <_realloc_r+0x2a6>
 8009856:	463b      	mov	r3, r7
 8009858:	e760      	b.n	800971c <_realloc_r+0x258>
 800985a:	6932      	ldr	r2, [r6, #16]
 800985c:	f8ca 2018 	str.w	r2, [sl, #24]
 8009860:	6972      	ldr	r2, [r6, #20]
 8009862:	f8ca 201c 	str.w	r2, [sl, #28]
 8009866:	3618      	adds	r6, #24
 8009868:	f10a 0220 	add.w	r2, sl, #32
 800986c:	e6bf      	b.n	80095ee <_realloc_r+0x12a>
 800986e:	4631      	mov	r1, r6
 8009870:	4638      	mov	r0, r7
 8009872:	f8cd c004 	str.w	ip, [sp, #4]
 8009876:	f7ff fdc1 	bl	80093fc <memmove>
 800987a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800987e:	e753      	b.n	8009728 <_realloc_r+0x264>
 8009880:	68b3      	ldr	r3, [r6, #8]
 8009882:	f8ca 3010 	str.w	r3, [sl, #16]
 8009886:	68f3      	ldr	r3, [r6, #12]
 8009888:	f8ca 3014 	str.w	r3, [sl, #20]
 800988c:	2a24      	cmp	r2, #36	; 0x24
 800988e:	d003      	beq.n	8009898 <_realloc_r+0x3d4>
 8009890:	3610      	adds	r6, #16
 8009892:	f10a 0318 	add.w	r3, sl, #24
 8009896:	e741      	b.n	800971c <_realloc_r+0x258>
 8009898:	6933      	ldr	r3, [r6, #16]
 800989a:	f8ca 3018 	str.w	r3, [sl, #24]
 800989e:	6973      	ldr	r3, [r6, #20]
 80098a0:	f8ca 301c 	str.w	r3, [sl, #28]
 80098a4:	3618      	adds	r6, #24
 80098a6:	f10a 0320 	add.w	r3, sl, #32
 80098aa:	e737      	b.n	800971c <_realloc_r+0x258>
 80098ac:	20000584 	.word	0x20000584
 80098b0:	00000103 	.word	0x00000103

080098b4 <_ge_pin_num>:
 80098b4:	00020001 00080004 00200010 00800040     .......... .@...
 80098c4:	02000100 08000400 20001000 80004000     ........... .@..
 80098d4:	00020001 00080004 00200010 00800040     .......... .@...
 80098e4:	02000100 08000400 20001000 80004000     ........... .@..
 80098f4:	00020001 00080004 00200010 00800040     .......... .@...
 8009904:	02000100 08000400 20001000 80004000     ........... .@..
 8009914:	00020001 00080004 00200010 00800040     .......... .@...
 8009924:	02000100 08000400 20001000 80004000     ........... .@..
 8009934:	00020001 00080004 00200010 00800040     .......... .@...
 8009944:	02000100 08000400 20001000 80004000     ........... .@..
 8009954:	00020001 00100004 02000040 00000400     ........@.......

08009964 <_ge_pin_port>:
 8009964:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009974:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009984:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009994:	48000000 48000000 48000000 48000000     ...H...H...H...H
 80099a4:	48000400 48000400 48000400 48000400     ...H...H...H...H
 80099b4:	48000400 48000400 48000400 48000400     ...H...H...H...H
 80099c4:	48000400 48000400 48000400 48000400     ...H...H...H...H
 80099d4:	48000400 48000400 48000400 48000400     ...H...H...H...H
 80099e4:	48000800 48000800 48000800 48000800     ...H...H...H...H
 80099f4:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009a04:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009a14:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009a24:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009a34:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009a44:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009a54:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009a64:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009a74:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009a84:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009a94:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009aa4:	48001400 48001400 48001400 48001400     ...H...H...H...H
 8009ab4:	48001400 48001400 48001400              ...H...H...H

08009ac0 <_ge_pin_num>:
 8009ac0:	00020001 00080004 00200010 00800040     .......... .@...
 8009ad0:	02000100 08000400 20001000 80004000     ........... .@..
 8009ae0:	00020001 00080004 00200010 00800040     .......... .@...
 8009af0:	02000100 08000400 20001000 80004000     ........... .@..
 8009b00:	00020001 00080004 00200010 00800040     .......... .@...
 8009b10:	02000100 08000400 20001000 80004000     ........... .@..
 8009b20:	00020001 00080004 00200010 00800040     .......... .@...
 8009b30:	02000100 08000400 20001000 80004000     ........... .@..
 8009b40:	00020001 00080004 00200010 00800040     .......... .@...
 8009b50:	02000100 08000400 20001000 80004000     ........... .@..
 8009b60:	00020001 00100004 02000040 00000400     ........@.......

08009b70 <_ge_pin_port>:
 8009b70:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009b80:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009b90:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009ba0:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009bb0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009bc0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009bd0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009be0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009bf0:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009c00:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009c10:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009c20:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009c30:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009c40:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009c50:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009c60:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009c70:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009c80:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009c90:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009ca0:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009cb0:	48001400 48001400 48001400 48001400     ...H...H...H...H
 8009cc0:	48001400 48001400 48001400              ...H...H...H

08009ccc <CSWTCH.14>:
 8009ccc:	d494c080                                ....

08009cd0 <_ge_pin_num>:
 8009cd0:	00020001 00080004 00200010 00800040     .......... .@...
 8009ce0:	02000100 08000400 20001000 80004000     ........... .@..
 8009cf0:	00020001 00080004 00200010 00800040     .......... .@...
 8009d00:	02000100 08000400 20001000 80004000     ........... .@..
 8009d10:	00020001 00080004 00200010 00800040     .......... .@...
 8009d20:	02000100 08000400 20001000 80004000     ........... .@..
 8009d30:	00020001 00080004 00200010 00800040     .......... .@...
 8009d40:	02000100 08000400 20001000 80004000     ........... .@..
 8009d50:	00020001 00080004 00200010 00800040     .......... .@...
 8009d60:	02000100 08000400 20001000 80004000     ........... .@..
 8009d70:	00020001 00100004 02000040 00000400     ........@.......

08009d80 <_ge_pin_port>:
 8009d80:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009d90:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009da0:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009db0:	48000000 48000000 48000000 48000000     ...H...H...H...H
 8009dc0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009dd0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009de0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009df0:	48000400 48000400 48000400 48000400     ...H...H...H...H
 8009e00:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009e10:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009e20:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009e30:	48000800 48000800 48000800 48000800     ...H...H...H...H
 8009e40:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009e50:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009e60:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009e70:	48000c00 48000c00 48000c00 48000c00     ...H...H...H...H
 8009e80:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009e90:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009ea0:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009eb0:	48001000 48001000 48001000 48001000     ...H...H...H...H
 8009ec0:	48001400 48001400 48001400 48001400     ...H...H...H...H
 8009ed0:	48001400 48001400 48001400              ...H...H...H

08009edc <_ge_pin_source>:
 8009edc:	00010000 00030002 00050004 00070006     ................
 8009eec:	00090008 000b000a 000d000c 000f000e     ................
 8009efc:	00010000 00030002 00050004 00070006     ................
 8009f0c:	00090008 000b000a 000d000c 000f000e     ................
 8009f1c:	00010000 00030002 00050004 00070006     ................
 8009f2c:	00090008 000b000a 000d000c 000f000e     ................
 8009f3c:	00010000 00030002 00050004 00070006     ................
 8009f4c:	00090008 000b000a 000d000c 000f000e     ................
 8009f5c:	00010000 00030002 00050004 00070006     ................
 8009f6c:	00090008 000b000a 000d000c 000f000e     ................
 8009f7c:	00010000 00040002 00090006 6554000a     ..............Te
 8009f8c:	56207473 3a746c6f 00642520 74736554     st Volt: %d.Test
 8009f9c:	72754320 746e6572 0064253a 696c6143      Current:%d.Cali
 8009fac:	74617262 3a6e6f69 66666f20 73746573     bration: offsets
 8009fbc:	70704100 3020796c 6e612056 41302064     .Apply 0V and 0A
 8009fcc:	2d203200 004b4f20 726f7453 43006465     .2 - OK.Stored.C
 8009fdc:	62696c61 69746172 203a6e6f 746c6f76     alibration: volt
 8009fec:	00656761 6c707041 30312079 0056302e     age.Apply 10.0V.
 8009ffc:	696c6143 74617262 3a6e6f69 72756320     Calibration: cur
 800a00c:	746e6572 70704100 3320796c 0041302e     rent.Apply 3.0A.
 800a01c:	00000043                                C...

0800a020 <_global_impure_ptr>:
 800a020:	20000120                                 .. 

0800a024 <zeroes.6911>:
 800a024:	30303030 30303030 30303030 30303030     0000000000000000

0800a034 <blanks.6910>:
 800a034:	20202020 20202020 20202020 20202020                     
 800a044:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800a054:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800a064:	00000000 33323130 37363534 62613938     ....0123456789ab
 800a074:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800a084:	00000030 69666e49 7974696e 00000000     0...Infinity....
 800a094:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......
 800a0a4:	00000000                                ....

0800a0a8 <__mprec_tens>:
 800a0a8:	00000000 3ff00000 00000000 40240000     .......?......$@
 800a0b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800a0c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800a0d8:	00000000 412e8480 00000000 416312d0     .......A......cA
 800a0e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800a0f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800a108:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800a118:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800a128:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800a138:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800a148:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800a158:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800a168:	79d99db4 44ea7843                       ...yCx.D

0800a170 <p05.5302>:
 800a170:	00000005 00000019 0000007d 00000000     ........}.......

0800a180 <__mprec_bigtens>:
 800a180:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800a190:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800a1a0:	7f73bf3c 75154fdd                       <.s..O.u

0800a1a8 <_init>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	bf00      	nop
 800a1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ae:	bc08      	pop	{r3}
 800a1b0:	469e      	mov	lr, r3
 800a1b2:	4770      	bx	lr

0800a1b4 <_fini>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	bf00      	nop
 800a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ba:	bc08      	pop	{r3}
 800a1bc:	469e      	mov	lr, r3
 800a1be:	4770      	bx	lr
